<?xml version="1.0" encoding="UTF-8" ?>
<!-- $Header: /cvsroot/autodoc/autodoc/xml.tmpl,v 1.2 2006/05/16 19:01:27 rbt Exp $ -->

<book id="database.test-totus" xreflabel="test_totus database schema"><title>test_totus Model</title>




  <chapter id="trafficmodel.schema"
           xreflabel="trafficmodel">
    <title>Schema trafficmodel</title>
    <para></para>


      <section id="trafficmodel.table.atm2-zones"
               xreflabel="trafficmodel.atm2_zones">
        <title id="trafficmodel.table.atm2-zones-title">
         Table:
         
         <structname>atm2_zones</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>atm2_zones</structname>
            </title>


            <varlistentry>
              <term><structfield>gid</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>zone</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>area</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>atm2_secto</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sector_nam</structfield></term>
              <listitem><para>
                <type>character varying(32)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>date</structfield></term>
              <listitem><para>
                <type>double precision</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>geom</structfield></term>
              <listitem><para>
                <type>geometry</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on atm2_zones</title>

          <varlistentry>
            <term>enforce_dims_geom</term>
            <listitem><para>CHECK ((ndims(geom) = 2))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_geotype_geom</term>
            <listitem><para>CHECK (((geometrytype(geom) = &apos;MULTIPOLYGON&apos;::text) OR (geom IS NULL)))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_srid_geom</term>
            <listitem><para>CHECK ((srid(geom) = 4326))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on atm2_zones</title>

          <varlistentry>
            <term>atm2_zones_geom_gist</term>
            <listitem><para>geom</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="trafficmodel.table.link-network"
               xreflabel="trafficmodel.link_network">
        <title id="trafficmodel.table.link-network-title">
         Table:
         
         <structname>link_network</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>link_network</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>traffic_link_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.links"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>network_edge_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="network.table.edges"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>fraction</structfield></term>
              <listitem><para>
                <type>numeric(9,8)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>geom</structfield></term>
              <listitem><para>
                <type>geometry</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on link_network</title>

          <varlistentry>
            <term>enforce_dims_geom</term>
            <listitem><para>CHECK ((ndims(geom) = 2))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_geotype_geom</term>
            <listitem><para>CHECK (((geometrytype(geom) = &apos;MULTILINESTRING&apos;::text) OR (geom IS NULL)))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_srid_geom</term>
            <listitem><para>CHECK ((srid(geom) = 4326))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>link_network_fraction_check</term>
            <listitem><para>CHECK (((fraction &gt;= 0.0) AND (fraction &lt;= 1.0)))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on link_network</title>

          <varlistentry>
            <term>link_network_idx1</term>
            <listitem><para>traffic_link_id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>link_network_idx2</term>
            <listitem><para>network_edge_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="trafficmodel.table.link-traffic-data"
               xreflabel="trafficmodel.link_traffic_data">
        <title id="trafficmodel.table.link-traffic-data-title">
         Table:
         
         <structname>link_traffic_data</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>link_traffic_data</structname>
            </title>


            <varlistentry>
              <term><structfield>link_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.links"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.traffic-data"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>peak</structfield></term>
              <listitem><para>
                <type>character(2)</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.traffic-peak"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>year</structfield></term>
              <listitem><para>
                <type>smallint</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on link_traffic_data</title>

          <varlistentry>
            <term>link_traffic_data_idx1</term>
            <listitem><para>link_id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>link_traffic_data_idx2</term>
            <listitem><para>data_id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>link_traffic_data_idx3</term>
            <listitem><para>peak</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>link_traffic_data_idx4</term>
            <listitem><para>year</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="trafficmodel.table.links"
               xreflabel="trafficmodel.links">
        <title id="trafficmodel.table.links-title">
         Table:
         
         <structname>links</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>links</structname>
            </title>


            <varlistentry>
              <term><structfield>gid</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>character varying(16)</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>inode</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.nodes"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>jnode</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.nodes"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>length</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>type</structfield></term>
              <listitem><para>
                <type>character varying(10)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>modes</structfield></term>
              <listitem><para>
                <type>character varying(20)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>vdf</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data1</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data2</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data3</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>geom</structfield></term>
              <listitem><para>
                <type>geometry</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on links</title>

          <varlistentry>
            <term>enforce_dims_geom</term>
            <listitem><para>CHECK ((ndims(geom) = 2))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_geotype_geom</term>
            <listitem><para>CHECK (((geometrytype(geom) = &apos;MULTILINESTRING&apos;::text) OR (geom IS NULL)))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_srid_geom</term>
            <listitem><para>CHECK ((srid(geom) = 4326))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on links</title>

          <varlistentry>
            <term>link_geom_idx</term>
            <listitem><para>geom</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>link_inode_idx</term>
            <listitem><para>inode</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>link_jnode_idx</term>
            <listitem><para>jnode</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing trafficmodel.link_network via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="trafficmodel.table.link-network"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="trafficmodel.table.link-traffic-data"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="trafficmodel.table.node-traffic-data"
               xreflabel="trafficmodel.node_traffic_data">
        <title id="trafficmodel.table.node-traffic-data-title">
         Table:
         
         <structname>node_traffic_data</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>node_traffic_data</structname>
            </title>


            <varlistentry>
              <term><structfield>node_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.nodes"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.traffic-data"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>peak</structfield></term>
              <listitem><para>
                <type>character(2)</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.traffic-peak"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>year</structfield></term>
              <listitem><para>
                <type>smallint</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on node_traffic_data</title>

          <varlistentry>
            <term>node_traffic_data_idx1</term>
            <listitem><para>node_id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>node_traffic_data_idx2</term>
            <listitem><para>data_id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>node_traffic_data_idx3</term>
            <listitem><para>peak</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>node_traffic_data_idx4</term>
            <listitem><para>year</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="trafficmodel.table.nodes"
               xreflabel="trafficmodel.nodes">
        <title id="trafficmodel.table.nodes-title">
         Table:
         
         <structname>nodes</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>nodes</structname>
            </title>


            <varlistentry>
              <term><structfield>gid</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>x</structfield></term>
              <listitem><para>
                <type>numeric</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>y</structfield></term>
              <listitem><para>
                <type>numeric</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data1</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data2</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data3</structfield></term>
              <listitem><para>
                <type>numeric</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>iszone</structfield></term>
              <listitem><para>
                <type>boolean</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>geom</structfield></term>
              <listitem><para>
                <type>geometry</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on nodes</title>

          <varlistentry>
            <term>enforce_dims_geom</term>
            <listitem><para>CHECK ((ndims(geom) = 2))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_geotype_geom</term>
            <listitem><para>CHECK (((geometrytype(geom) = &apos;POINT&apos;::text) OR (geom IS NULL)))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_srid_geom</term>
            <listitem><para>CHECK ((srid(geom) = 4326))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on nodes</title>

          <varlistentry>
            <term>node_geom_idx</term>
            <listitem><para>geom</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing trafficmodel.links via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="trafficmodel.table.links"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="trafficmodel.table.node-traffic-data"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="trafficmodel.table.traffic-attr"
               xreflabel="trafficmodel.traffic_attr">
        <title id="trafficmodel.table.traffic-attr-title">
         Table:
         
         <structname>traffic_attr</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>traffic_attr</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>attr_type</structfield></term>
              <listitem><para>
                <type>character varying(64)</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>attr_name</structfield></term>
              <listitem><para>
                <type>character varying(256)</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data_type</structfield></term>
              <listitem><para>
                <type>character varying(64)</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>version_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.version"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing trafficmodel.traffic_data via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="trafficmodel.table.traffic-data"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="trafficmodel.table.traffic-data"
               xreflabel="trafficmodel.traffic_data">
        <title id="trafficmodel.table.traffic-data-title">
         Table:
         
         <structname>traffic_data</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>traffic_data</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>type_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="trafficmodel.table.traffic-attr"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>value</structfield></term>
              <listitem><para>
                <type>character varying(256)</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on traffic_data</title>

          <varlistentry>
            <term>traffic_data_type_idx</term>
            <listitem><para>type_id</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing trafficmodel.link_traffic_data via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="trafficmodel.table.link-traffic-data"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="trafficmodel.table.node-traffic-data"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="trafficmodel.table.traffic-peak"
               xreflabel="trafficmodel.traffic_peak">
        <title id="trafficmodel.table.traffic-peak-title">
         Table:
         
         <structname>traffic_peak</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>traffic_peak</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>type</structfield></term>
              <listitem><para>
                <type>character(2)</type>




                      <literal>UNIQUE</literal>




                <literal>NOT NULL</literal>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>description</structfield></term>
              <listitem><para>
                <type>character varying(64)</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing trafficmodel.link_traffic_data via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="trafficmodel.table.link-traffic-data"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="trafficmodel.table.node-traffic-data"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="trafficmodel.table.version"
               xreflabel="trafficmodel.version">
        <title id="trafficmodel.table.version-title">
         Table:
         
         <structname>version</structname>
        </title>
 

        <para>
          Holds Traffic Model model, input transport model and data year information
        </para>


        <para>
          <variablelist>
            <title>
              Structure of <structname>version</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

              <para>
                Unique key for Traffic Model version information
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>traffic_model</structfield></term>
              <listitem><para>
                <type>character varying(64)</type>







              </para>

              <para>
                Traffic Model model version number
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>transport_model</structfield></term>
              <listitem><para>
                <type>character varying(64)</type>







              </para>

              <para>
                Traffic Model input transport model version number, eg. ATM2, ATM3, etc.
              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>data_year</structfield></term>
              <listitem><para>
                <type>character(4)</type>







              </para>

              <para>
                Year of the data for which the traffic model was run
              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing trafficmodel.traffic_attr via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="trafficmodel.table.traffic-attr"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>



<!-- Function area_aggregate(text) -->
    <section id="trafficmodel.function.area-aggregate-text"
             xreflabel="trafficmodelarea_aggregate(text)">
      <title id="trafficmodel.function.area-aggregate-text-title">
       area_aggregate(text)
      </title>
      <titleabbrev id="trafficmodel.function.area-aggregate-text-titleabbrev">
       area_aggregate(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>area_aggregate</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
  spatial_filter ALIAS FOR $1;
  query          TEXT;
  result         RECORD;
  attrs          VARCHAR(64)[];
  aggrs          VARCHAR(256)[];
  summary        AREA_AGGREGATE;
  geomText       VARCHAR(256)[];
  prevId         INTEGER;
  l              INTEGER;
  i              INTEGER;
BEGIN
  -- sanity check on spatial filter supplied
  IF spatial_filter !~ &#39;^(MULTIP|P)OLYGON&#39; OR spatial_filter ~ &#39;(SELECT|;|DROP|UPDATE)&#39;
  THEN
    RAISE EXCEPTION &#39;Invalid spatial filter supplied: %&#39;, spatial_filter;
  END IF;

  -- query all trafficmodel network (edge) links inside spatial area
  -- and extract it&#39;s trafficmodel link traffic attributes and scaling
  -- factor
  query := &#39;SELECT td.type_id AS id, ta.attr_name, ta.data_type, td.value, ST_AsText (ne.the_geom) AS geom, ln.fraction 
              FROM link_network AS ln
              JOIN link_traffic_data AS ltd
                   ON ln.traffic_link_id = ltd.link_id
              JOIN traffic_data AS td
                   ON ltd.data_id = td.id
              JOIN traffic_attr AS ta
                   ON td.type_id = ta.id
              JOIN network.edges AS ne
                   ON ln.network_edge_id = ne.gid,
                   ST_GeomFromText (&#39; || quote_literal (spatial_filter) || &#39;, 4326) AS filter (geom)
             WHERE ne.the_geom &amp;&amp; filter.geom AND
                   ST_Within (ne.the_geom, filter.geom) AND
                   ST_IsValid (filter.geom) AND
                   ta.attr_type &lt;&gt; &#39; || quote_literal (&#39;lanes&#39;) || &#39;
          ORDER BY td.type_id&#39;;

  prevId := -9999;
  l      := 0;
  i      := 0;

  attrs[l] := &#39;&#39;;
  aggrs[l] := &#39;0&#39;;

  FOR result IN EXECUTE query
  LOOP
    IF prevId &lt;&gt; -9999 AND prevId &lt;&gt; result.id
    THEN
      -- result set is ordered by attribute type, when attribute type id changes advance to next attribute
      l := l + 1;

      -- init to zero
      aggrs[l] := &#39;0&#39;;
    END IF;

    -- attribute name
    attrs[l]    := result.attr_name;
    -- accumulate scaled value
    aggrs[l]    := (aggrs[l]::NUMERIC + (result.value::NUMERIC * result.fraction)::NUMERIC)::VARCHAR(256);
    -- capture coordinate list in mutli-line string
    geomText[i] := REGEXP_REPLACE (result.geom, E&#39;MULTILINESTRING\((\.*)\)&#39;, E&#39;\\1&#39;, &#39;&#39;);
    geomText[i] := SUBSTRING (geomText[i], 2, LENGTH (geomText[i]) - 2);

    prevId := result.id;
    i := i + 1;
  END LOOP;

  summary.geom       := ST_MLineFromText (E&#39;MULTILINESTRING (&#39; || ARRAY_TO_STRING (geomText, &#39;, &#39;) || E&#39;)&#39;, 4326);
  summary.attributes := attrs;
  summary.aggregates := aggrs;

  RETURN summary;
END;
</programlisting>
      </para>
    </section>

<!-- Function area_flux(text) -->
    <section id="trafficmodel.function.area-flux-text"
             xreflabel="trafficmodelarea_flux(text)">
      <title id="trafficmodel.function.area-flux-text-title">
       area_flux(text)
      </title>
      <titleabbrev id="trafficmodel.function.area-flux-text-titleabbrev">
       area_flux(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>area_flux</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
  spatial_filter ALIAS FOR $1;
  query          TEXT;
  result         RECORD;
  attrs          VARCHAR(64)[];
  influx         VARCHAR(256)[];
  outflux        VARCHAR(256)[];
  flux           AREA_FLUX;
  geomText       VARCHAR(256)[];
  prevId         INTEGER;
  l              INTEGER;
  i              INTEGER;
BEGIN
  -- sanity check on spatial filter supplied
  IF spatial_filter !~ &#39;^(MULTIP|P)OLYGON&#39; OR spatial_filter ~ &#39;(SELECT|;|DROP|UPDATE)&#39;
  THEN
    RAISE EXCEPTION &#39;Invalid spatial filter supplied: %&#39;, spatial_filter;
  END IF;

  -- query all trafficmodel network (edge) links inside spatial area
  -- and extract it&#39;s trafficmodel link traffic attributes and scaling
  -- factor
  query := &#39;SELECT td.type_id AS id, ta.attr_name, ta.data_type, td.value, ST_AsText (ne.the_geom) AS geom, ln.fraction,
                   CASE WHEN ST_Within (ST_SetSrid (ST_MakePoint (x1, y1), 4326), filter.geom)
                        THEN &#39; || quote_literal (&#39;outflux&#39;) || &#39;
                        ELSE &#39; || quote_literal (&#39;influx&#39;)  || &#39;
                   END AS flux_type
              FROM link_network AS ln
              JOIN link_traffic_data AS ltd
                   ON ln.traffic_link_id = ltd.link_id
              JOIN traffic_data AS td
                   ON ltd.data_id = td.id
              JOIN traffic_attr AS ta
                   ON td.type_id = ta.id
              JOIN network.edges AS ne
                   ON ln.network_edge_id = ne.gid,
                   ST_GeomFromText (&#39; || quote_literal (spatial_filter) || &#39;, 4326) AS filter (geom)
             WHERE ne.the_geom &amp;&amp; filter.geom AND
                   ST_Crosses (ne.the_geom, filter.geom) AND
                   ST_IsValid (filter.geom) AND
                   ta.attr_type &lt;&gt; &#39; || quote_literal (&#39;lanes&#39;) || &#39;
          ORDER BY td.type_id&#39;;

  prevId := -9999;
  l      := 0;
  i      := 0;

  attrs[l]   := &#39;&#39;;
  influx[l]  := &#39;0&#39;;
  outflux[l] := &#39;0&#39;;

  FOR result IN EXECUTE query
  LOOP
    IF prevId &lt;&gt; -9999 AND prevId &lt;&gt; result.id
    THEN
      -- result set is ordered by attribute type, when attribute type id changes advance to next attribute
      l := l + 1;

      -- init to zero
      influx[l]  := &#39;0&#39;;
      outflux[l] := &#39;0&#39;;
    END IF;

    -- attribute name
    attrs[l] := result.attr_name;

    -- accumulate scaled value for either in-flux or out-flux
    IF result.flux_type = &#39;influx&#39;
    THEN
      influx[l] := (influx[l]::NUMERIC + (result.value::NUMERIC * result.fraction)::NUMERIC)::VARCHAR(256);
    ELSE
      outflux[l] := (outflux[l]::NUMERIC + (result.value::NUMERIC * result.fraction)::NUMERIC)::VARCHAR(256);
    END IF;

    -- capture coordinate list in mutli-line string
    geomText[i] := REGEXP_REPLACE (result.geom, E&#39;MULTILINESTRING\((\.*)\)&#39;, E&#39;\\1&#39;, &#39;&#39;);
    geomText[i] := SUBSTRING (geomText[i], 2, LENGTH (geomText[i]) - 2);

    prevId := result.id;
    i := i + 1;
  END LOOP;

  flux.geom       := ST_MLineFromText (E&#39;MULTILINESTRING (&#39; || ARRAY_TO_STRING (geomText, &#39;, &#39;) || E&#39;)&#39;, 4326);
  flux.attributes := attrs;
  flux.influx     := influx;
  flux.outflux    := outflux;

  RETURN flux;
END;
</programlisting>
      </para>
    </section>

<!-- Function array_accum(anyelement) -->
    <section id="trafficmodel.function.array-accum-anyelement"
             xreflabel="trafficmodelarray_accum(anyelement)">
      <title id="trafficmodel.function.array-accum-anyelement-title">
       array_accum(anyelement)
      </title>
      <titleabbrev id="trafficmodel.function.array-accum-anyelement-titleabbrev">
       array_accum(anyelement)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>anyarray</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function route_aggregator(routemethod public.geometry[], endgeoms public.geometry[], startgeoms character varying) -->
    <section id="trafficmodel.function.route-aggregator-routemethod-public.geometryARRAY-endgeoms-public.geometryARRAY-startgeoms-character-varying"
             xreflabel="trafficmodelroute_aggregator(routemethod public.geometry[], endgeoms public.geometry[], startgeoms character varying)">
      <title id="trafficmodel.function.route-aggregator-routemethod-public.geometryARRAY-endgeoms-public.geometryARRAY-startgeoms-character-varying-title">
       route_aggregator(routemethod public.geometry[], endgeoms public.geometry[], startgeoms character varying)
      </title>
      <titleabbrev id="trafficmodel.function.route-aggregator-routemethod-public.geometryARRAY-endgeoms-public.geometryARRAY-startgeoms-character-varying-titleabbrev">
       route_aggregator(routemethod public.geometry[], endgeoms public.geometry[], startgeoms character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>route_aggr</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
  pathQuery    TEXT;
  trafficmodelQuery    TEXT;
  query        TEXT;
  pathResult   RECORD;
  trafficmodelResult   RECORD;
  edgePath     INTEGER[];
  nodePath     INTEGER[];
  i            INTEGER;
  j            INTEGER;
  l            INTEGER;
  k            INTEGER;
  m            INTEGER;
  prevPeak     CHAR(2);
  prevType     VARCHAR(64);
  aggr         trafficmodel.ROUTE_AGGR;
  trafficmodelAggr     trafficmodel.TRAFFIC_AGGR;
  totalEmme    trafficmodel.TRAFFIC_AGGR;
  prevEmme     trafficmodel.TRAFFIC_AGGR;
  adjustStart  BOOLEAN DEFAULT false;
  adjustEnd    BOOLEAN DEFAULT false; 
BEGIN
  -- validate that geometries are POINTs

  -- closest_node for each start geomtry
  -- closest_node for each end geometry
  -- route from each start node to each end node

  -- aggregate results
  -- return geometry collection of all edges routed
  -- and one for trafficmodel edges

  -- TODO: scale start/end edge&#39;s Traffic Model scaling fraction to account for house half way
  --       down road, trafficmodel cost will differ
  --       add these if they have been missed on route

  IF routeMethod NOT IN (&#39;dijkstra&#39;, &#39;astar&#39;, &#39;shootingstar&#39;)
  THEN
    RAISE EXCEPTION &#39;Invalid routing method supplied: %, not &#39;&#39;dijkstra&#39;&#39;, &#39;&#39;astar&#39;&#39; or &#39;&#39;shootingstar&#39;&#39;&#39;, routeMethod;
  END IF;

  IF ARRAY_UPPER (startGeoms, 1) IS NULL
  THEN
    RAISE EXCEPTION &#39;No start geometries provided to route from&#39;;
  END IF;

  IF ARRAY_UPPER (endGeoms, 1) IS NULL
  THEN
    RAISE EXCEPTION &#39;No end geometries provided to route to&#39;;
  END IF;

  -- FIXME:
  -- get paths first
  -- loop through them
  -- query their traffic attributes
  -- aggregate these
  -- compensate for start/end partials

  -- TODO:
  -- add geometry

  pathQuery := &#39;SELECT r.sourceNodeId,
                       r.targetNodeId,
                       (r.path_result).vertex_id AS nodeId,
                       (r.path_result).edge_id   AS edgeId,
                       r.sourceGeom,
                       r.targetGeom,
                       e.the_geom 
                  FROM (
                    SELECT (c.source).nodeId AS sourceNodeId,
                           (c.target).nodeId AS targetNodeId,
                           c.sourceGeom,
                           c.targetGeom,
                           network.route_filtered (c.source, c.target, &#39; ||
                             quote_literal (routeMethod) || &#39;, 0.09) AS path_result

                    FROM (
                       SELECT network.closest_edge_node (ST_X(s.geom)::NUMERIC(12,8),
                                                         ST_Y(s.geom)::NUMERIC(12,8),
                                                         0.09::NUMERIC(12,8)) AS source,
                              network.closest_edge_node (ST_X(t.geom)::NUMERIC(12,8),
                                                         ST_Y(t.geom)::NUMERIC(12,8),
                                                         0.09::NUMERIC(12,8)) AS target,
                              s.geom AS sourceGeom,
                              t.geom AS targetGeom
                         FROM (VALUES (&#39;&#39;&#39; || ARRAY_TO_STRING (startGeoms, &#39;&#39;&#39;::GEOMETRY),(&#39;&#39;&#39;) || &#39;&#39;&#39;::GEOMETRY)) AS s (geom),
                              (VALUES (&#39;&#39;&#39; || ARRAY_TO_STRING (endGeoms, &#39;&#39;&#39;::GEOMETRY),(&#39;&#39;&#39;) || &#39;&#39;&#39;::GEOMETRY)) AS t (geom)
                     ) AS c
                  ) AS r
             LEFT JOIN network.edges AS e
                       ON (r.path_result).edge_id = e.gid&#39;;
     
  trafficmodelQuery := &#39;SELECT ltd.peak, ta.attr_type AS type, (ln.fraction * td.value::NUMERIC) AS value,
                       ln.network_edge_id AS trafficmodelEdgeId
                  FROM trafficmodel.link_network AS ln
                  JOIN trafficmodel.link_traffic_data AS ltd
                       ON ln.traffic_link_id = ltd.link_id
                  JOIN trafficmodel.traffic_data AS td
                       ON ltd.data_id = td.id
                  JOIN trafficmodel.traffic_attr AS ta
                       ON td.type_id = ta.id AND
                       ta.attr_type  &lt;&gt; &#39;&#39;lanes&#39;&#39;&#39;;
  
  -- init first AM value
  trafficmodelAggr.aggregates[0] := &#39;0&#39;;

  FOR pathResult IN EXECUTE pathQuery
  LOOP
    i := 0;
    j := 0;
    l := 0;

    -- end of path is signaled by edge id of -1
    IF pathResult.edgeId = -1
    THEN
      -- end of current path
           
      -- check that we did have a path
      IF ARRAY_LENGTH (edgePath, 1) &lt;&gt; -1
      THEN
        -- fetch all of the paths traffic attributes sorted by peak and type aggregated as array of arrays
        query := trafficmodelQuery || &#39;
                 JOIN (
                  VALUES (&#39; || ARRAY_TO_STRING (edgePath, &#39;),(&#39;) || &#39;)) AS ep (edgeId) 
                        ON ln.network_edge_id = ep.edgeId
                ORDER BY ltd.peak, ta.attr_type&#39;;

        prevPeak := &#39;&#39;;
        prevType := &#39;&#39;;

        -- execute
        FOR trafficmodelResult IN EXECUTE query
        LOOP
          -- aggregate result
          IF prevPeak &lt;&gt; &#39;&#39; AND prevPeak &lt;&gt; trafficmodelResult.peak
          THEN
            -- init total Traffic Model the first time
            IF totalEmme IS NULL
            THEN
              FOR k IN SELECT GENERATE_SERIES (0, ARRAY_UPPER(trafficmodelAggr.attributes, 1))
              LOOP  
                totalEmme.peak          := &#39;AD&#39;;
                totalEmme.attributes[k] := trafficmodelAggr.attributes[k];
                totalEmme.aggregates[k] := &#39;0.0&#39;;
              END LOOP;
            END IF;

            -- init previous Emme
            IF prevEmme IS NULL
            THEN
              FOR k IN SELECT GENERATE_SERIES (0, ARRAY_UPPER(trafficmodelAggr.attributes, 1))
              LOOP
                prevEmme.attributes[k] := trafficmodelAggr.attributes[k];
                prevEmme.aggregates[k] := &#39;0.0&#39;;
              END LOOP;

              FOR m IN SELECT GENERATE_SERIES (0, 3)
              LOOP
                aggr.trafficmodelResults[m] = prevEmme;
              END LOOP;
            END IF;
 
            prevEmme = aggr.trafficmodelResults[j];

            -- sanity check to assert sort order of traffic peaks
            IF prevEmme.peak &lt;&gt; trafficmodelAggr.peak
            THEN
              RAISE EXCEPTION &#39;Cannot aggregate with different peaks: % &lt;&gt; %&#39;, prevEmme.peak, trafficmodelAggr.peak;
            END IF;

            FOR k IN SELECT GENERATE_SERIES (0, ARRAY_UPPER(trafficmodelAggr.attributes, 1))
            LOOP
              -- sanity check to assert sort order of traffic attributes
              IF prevEmme.attributes[k] &lt;&gt; trafficmodelAggr.attributes[k]
              THEN
                RAISE EXCEPTION &#39;Cannot aggregate with different attributesL % &lt;&gt; %&#39;, 
                                prevEmme.attributes[k], trafficmodelAggr.attributes[k];
              END IF;

              -- trafficmodel total
              totalEmme.aggregates[k] := (totalEmme.aggregates[k]::NUMERIC + trafficmodelAggr.aggregates[k]::NUMERIC)::VARCHAR(255);

              -- add previous trafficmodel results
              trafficmodelAggr.aggregates[k] := (prevEmme.aggregates[k]::NUMERIC + trafficmodelAggr.aggregates[k]::NUMERIC)::VARCHAR(255);
            END LOOP;

            aggr.trafficmodelResults[j] := trafficmodelAggr;
            trafficmodelAggr            := NULL;

            -- init first value
            trafficmodelAggr.aggregates[0] := &#39;0&#39;;

            -- advance to next peak
            j := j + 1;

            IF j &gt; 3
            THEN
              RAISE EXCEPTION &#39;Cannot have more than 3 traffic peaks&#39;;
            END IF;

            -- reset attributes
            l := 0;

            -- init value aggregate
            trafficmodelAggr.aggregates[l] := &#39;0&#39;;
          END IF;

          IF prevPeak = trafficmodelResult.peak AND prevType &lt;&gt; &#39;&#39; AND prevType &lt;&gt; trafficmodelResult.type
          THEN
            -- advance no next attribute for peak
            l := l + 1;

            -- init value aggregate 
            trafficmodelAggr.aggregates[l] = 0;
          END IF;

          -- accumulate trafficmodel cost for edges in path
          trafficmodelAggr.peak          := trafficmodelResult.peak;
          trafficmodelAggr.attributes[l] := trafficmodelResult.type;
          trafficmodelAggr.aggregates[l] := (trafficmodelAggr.aggregates[l]::NUMERIC + trafficmodelResult.value)::VARCHAR(256);

          prevPeak := trafficmodelResult.peak;
          prevType := trafficmodelResult.type;

          -- check first and last trafficmodelEdgeId
          IF trafficmodelResult.trafficmodelEdgeId = edgePath[0]
          THEN
            adjustStart = true; 
          END IF;

          IF trafficmodelResult.trafficmodelEdgeId = edgePath[ARRAY_UPPER(edgePath, 1)]
          THEN
            adjustEnd = true;
          END IF;
        END LOOP;

        -- TODO: adjust start/end costs

        -- assign last trafficmodel 
        prevEmme = aggr.trafficmodelResults[j];

        -- sanity check to assert sort order of traffic peaks
        IF prevEmme.peak &lt;&gt; trafficmodelAggr.peak
        THEN
          RAISE EXCEPTION &#39;Cannot aggregate with different peaks: % &lt;&gt; %&#39;, prevEmme.peak, trafficmodelAggr.peak;
        END IF;

        FOR k IN SELECT GENERATE_SERIES (0, ARRAY_UPPER(trafficmodelAggr.attributes, 1))
        LOOP
          -- sanity check to assert sort order of traffic attributes
          IF prevEmme.attributes[k] &lt;&gt; trafficmodelAggr.attributes[k]
          THEN
            RAISE EXCEPTION &#39;Cannot aggregate with different attributesL % &lt;&gt; %&#39;, 
                            prevEmme.attributes[k], trafficmodelAggr.attributes[k];
          END IF;

          -- trafficmodel total
          totalEmme.aggregates[k] := (totalEmme.aggregates[k]::NUMERIC + trafficmodelAggr.aggregates[k]::NUMERIC)::VARCHAR(255);

          -- add previous trafficmodel results
          trafficmodelAggr.aggregates[k] := (prevEmme.aggregates[k]::NUMERIC + trafficmodelAggr.aggregates[k]::NUMERIC)::VARCHAR(255);
        END LOOP;

        aggr.trafficmodelResults[j] := trafficmodelAggr;
        trafficmodelAggr            := NULL;

        -- init first value
        trafficmodelAggr.aggregates[0] := &#39;0&#39;;

        -- assign total trafficmodel result
        j := j + 1;       

        aggr.trafficmodelResults[j] := totalEmme;

        -- check if source and target edges were inserted, if not could be that start or end node was used
        -- but route start was along side edge, fetch this edges traffic information, but scale it by
        -- proportion of point along side edge and create partial geometry

        -- if these edges were wholly inserted and needed not be, remove it&#39;s trafficmodel cost and apply
        -- it as a fraction

        -- clear out path
        edgePath := NULL;

        i := 0;
      END IF;
    ELSE
      edgePath[i] := pathResult.edgeId;
      nodePath[i] := pathResult.nodeId;

      i := i + 1;
    END IF;
  END LOOP;

  RETURN aggr;
END;
</programlisting>
      </para>
    </section>

<!-- Function route_aggregator_basic(routemethod public.geometry[], endgeoms public.geometry[], startgeoms character varying) -->
    <section id="trafficmodel.function.route-aggregator-basic-routemethod-public.geometryARRAY-endgeoms-public.geometryARRAY-startgeoms-character-varying"
             xreflabel="trafficmodelroute_aggregator_basic(routemethod public.geometry[], endgeoms public.geometry[], startgeoms character varying)">
      <title id="trafficmodel.function.route-aggregator-basic-routemethod-public.geometryARRAY-endgeoms-public.geometryARRAY-startgeoms-character-varying-title">
       route_aggregator_basic(routemethod public.geometry[], endgeoms public.geometry[], startgeoms character varying)
      </title>
      <titleabbrev id="trafficmodel.function.route-aggregator-basic-routemethod-public.geometryARRAY-endgeoms-public.geometryARRAY-startgeoms-character-varying-titleabbrev">
       route_aggregator_basic(routemethod public.geometry[], endgeoms public.geometry[], startgeoms character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>route_aggr</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
  query    TEXT;
  result   RECORD;
  aggr     trafficmodel.ROUTE_AGGR;
  trafficmodelAggr trafficmodel.TRAFFIC_AGGR;
  i        INTEGER;
  l        INTEGER;
  k        INTEGER;
  m        INTEGER;
  prevPeak CHAR(2);
  geomText VARCHAR(256)[];
BEGIN
  -- validate that geometries are POINTs

  -- closest_node for each start geomtry
  -- closest_node for each end geometry
  -- route from each start node to each end node
  -- aggregate results
  -- return geometry collection of all edges routed

  IF routeMethod NOT IN (&#39;dijkstra&#39;, &#39;astar&#39;, &#39;shootingstar&#39;)
  THEN
    RAISE EXCEPTION &#39;Invalid routing method supplied: %, not &#39;&#39;dijkstra&#39;&#39;, &#39;&#39;astar&#39;&#39; or &#39;&#39;shootingstar&#39;&#39;&#39;, routeMethod;
  END IF;

  query := &#39;SELECT ltd.peak, ta.attr_type AS type,
                   SUM(ln.fraction * td.value::NUMERIC) AS value,
                   trafficmodel.ARRAY_ACCUM (ST_AsText (ne.the_geom)) AS geoms
              FROM (
                SELECT network.route_filtered (c.source, c.target, &#39; ||
                       quote_literal (routeMethod) || &#39;, 0.09) AS path_result
                  FROM (
                   SELECT network.closest_edge_node (ST_X(s.geom)::NUMERIC(12,8),
                                                     ST_Y(s.geom)::NUMERIC(12,8),
                                                     0.09::NUMERIC(12,8)) AS source,
                          network.closest_edge_node (ST_X(e.geom)::NUMERIC(12,8),
                                                     ST_Y(e.geom)::NUMERIC(12,8),
                                                     0.09::NUMERIC(12,8)) AS target
                     FROM (VALUES (&#39;&#39;&#39; || ARRAY_TO_STRING (startGeoms, &#39;&#39;&#39;::GEOMETRY),(&#39;&#39;&#39;) || &#39;&#39;&#39;::GEOMETRY)) AS s (geom),
                          (VALUES (&#39;&#39;&#39; || ARRAY_TO_STRING (endGeoms, &#39;&#39;&#39;::GEOMETRY),(&#39;&#39;&#39;) || &#39;&#39;&#39;::GEOMETRY)) AS e (geom)
                 ) AS c
              ) AS r
              JOIN network.edges AS ne
                   ON (r.path_result).edge_id = ne.gid
              JOIN trafficmodel.link_network AS ln
                   ON (r.path_result).edge_id = ln.network_edge_id
              JOIN trafficmodel.link_traffic_data AS ltd
                   ON ln.traffic_link_id = ltd.link_id
              JOIN trafficmodel.traffic_data AS td
                   ON ltd.data_id = td.id
              JOIN trafficmodel.traffic_attr AS ta
                   ON td.type_id = ta.id
             WHERE (r.path_result).edge_id &lt;&gt; -1 AND
                   ta.attr_type            &lt;&gt; &#39;&#39;lanes&#39;&#39;
          GROUP BY ltd.peak, ta.attr_type
          ORDER BY ltd.peak, ta.attr_type&#39;;
 
  i := 0;
  l := 0;
  k := 0;
  prevPeak := &#39;&#39;;

  FOR result IN EXECUTE query
  LOOP
    IF prevPeak &lt;&gt; &#39;&#39; AND prevPeak &lt;&gt; result.peak
    THEN
      l := 0;
      -- assign peak data
      aggr.trafficmodelResults[i] = trafficmodelAggr;
      -- next peak
      i := i + 1;
    END IF;
    
    trafficmodelAggr.peak          := result.peak;
    trafficmodelAggr.attributes[l] := result.type;
    trafficmodelAggr.aggregates[l] := result.value;

    IF i = 0 AND l = 0
    THEN
      -- assign geometry only once
      geomText := result.geoms;
    END IF;

    l := l + 1;
    prevPeak := result.peak;
  END LOOP;

  -- assign trafficmodel geom
  FOR k IN SELECT GENERATE_SERIES (0, ARRAY_UPPER (geomText, 1))
  LOOP
    geomText[k] := REGEXP_REPLACE (geomText[k], E&#39;MULTILINESTRING\((\.*)\)&#39;, E&#39;\\1&#39;, &#39;&#39;);
    geomText[k] := SUBSTRING (geomText[k], 2, LENGTH (geomText[k]) - 2);
  END LOOP;

  aggr.trafficmodelgeom := ST_MLineFromText (E&#39;MULTILINESTRING (&#39; || ARRAY_TO_STRING (geomText, &#39;, &#39;) || E&#39;)&#39;, 4326);
  RETURN aggr;
END;
</programlisting>
      </para>
    </section>

<!-- Function route_aggregator_basic(routemethod public.geometry[], trafficpeak public.geometry[], endgeoms bpchar, startgeoms character varying) -->
    <section id="trafficmodel.function.route-aggregator-basic-routemethod-public.geometryARRAY-trafficpeak-public.geometryARRAY-endgeoms-bpchar-startgeoms-character-varying"
             xreflabel="trafficmodelroute_aggregator_basic(routemethod public.geometry[], trafficpeak public.geometry[], endgeoms bpchar, startgeoms character varying)">
      <title id="trafficmodel.function.route-aggregator-basic-routemethod-public.geometryARRAY-trafficpeak-public.geometryARRAY-endgeoms-bpchar-startgeoms-character-varying-title">
       route_aggregator_basic(routemethod public.geometry[], trafficpeak public.geometry[], endgeoms bpchar, startgeoms character varying)
      </title>
      <titleabbrev id="trafficmodel.function.route-aggregator-basic-routemethod-public.geometryARRAY-trafficpeak-public.geometryARRAY-endgeoms-bpchar-startgeoms-character-varying-titleabbrev">
       route_aggregator_basic(routemethod public.geometry[], trafficpeak public.geometry[], endgeoms bpchar, startgeoms character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>peak_traffic_aggr</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
  query    TEXT;
  result   RECORD;
  aggr trafficmodel.PEAK_TRAFFIC_AGGR;
  i        INTEGER;
  l        INTEGER;
  k        INTEGER;
  m        INTEGER;
  geomText TEXT[];
BEGIN
  -- validate that geometries are POINTs

  -- closest_node for each start geomtry
  -- closest_node for each end geometry
  -- route from each start node to each end node
  -- aggregate results
  -- return geometry collection of all edges routed

  IF routeMethod NOT IN (&#39;dijkstra&#39;, &#39;astar&#39;, &#39;shootingstar&#39;)
  THEN
    RAISE EXCEPTION &#39;Invalid routing method supplied: %, not &#39;&#39;dijkstra&#39;&#39;, &#39;&#39;astar&#39;&#39; or &#39;&#39;shootingstar&#39;&#39;&#39;, routeMethod;
  END IF;

  query := &#39;SELECT ltd.peak, ta.attr_type AS type,
                   SUM(ln.fraction * td.value::NUMERIC) AS value,
                   trafficmodel.ARRAY_ACCUM (ST_AsText (ne.the_geom)) AS geoms
              FROM (
                SELECT network.route_filtered (c.source, c.target, &#39; ||
                       quote_literal (routeMethod) || &#39;, 0.09) AS path_result
                  FROM (
                   SELECT network.closest_edge_node (ST_X(s.geom)::NUMERIC(12,8),
                                                     ST_Y(s.geom)::NUMERIC(12,8),
                                                     0.09::NUMERIC(12,8)) AS source,
                          network.closest_edge_node (ST_X(e.geom)::NUMERIC(12,8),
                                                     ST_Y(e.geom)::NUMERIC(12,8),
                                                     0.09::NUMERIC(12,8)) AS target
                     FROM (VALUES (&#39;&#39;&#39; || ARRAY_TO_STRING (startGeoms, &#39;&#39;&#39;::GEOMETRY),(&#39;&#39;&#39;) || &#39;&#39;&#39;::GEOMETRY)) AS s (geom),
                          (VALUES (&#39;&#39;&#39; || ARRAY_TO_STRING (endGeoms, &#39;&#39;&#39;::GEOMETRY),(&#39;&#39;&#39;) || &#39;&#39;&#39;::GEOMETRY)) AS e (geom)
                 ) AS c
              ) AS r
              JOIN network.edges AS ne
                   ON (r.path_result).edge_id = ne.gid
              JOIN trafficmodel.link_network AS ln
                   ON (r.path_result).edge_id = ln.network_edge_id
              JOIN trafficmodel.link_traffic_data AS ltd
                   ON ln.traffic_link_id = ltd.link_id
              JOIN trafficmodel.traffic_data AS td
                   ON ltd.data_id = td.id
              JOIN trafficmodel.traffic_attr AS ta
                   ON td.type_id = ta.id
             WHERE (r.path_result).edge_id &lt;&gt; -1
               AND ta.attr_type            &lt;&gt; &#39;&#39;lanes&#39;&#39; 
               AND ltd.peak                = &#39; || quote_literal (trafficPeak) || &#39;
          GROUP BY ltd.peak, ta.attr_type
          ORDER BY ltd.peak, ta.attr_type&#39;;
 
  l := 0;

  FOR result IN EXECUTE query
  LOOP
    aggr.peak          := result.peak;
    aggr.attributes[l] := result.type;
    aggr.aggregates[l] := result.value;

    IF l = 0
    THEN
      -- assign geometry only once
      geomText := result.geoms;
    END IF;

    l := l + 1;
  END LOOP;

  -- assign trafficmodel geom
  FOR k IN SELECT GENERATE_SERIES (0, ARRAY_UPPER (geomText, 1))
  LOOP
    geomText[k] := REGEXP_REPLACE (geomText[k], E&#39;MULTILINESTRING\((\.*)\)&#39;, E&#39;\\1&#39;, &#39;&#39;);
    geomText[k] := SUBSTRING (geomText[k], 2, LENGTH (geomText[k]) - 2);
  END LOOP;

  aggr.trafficmodelgeom := ST_MLineFromText (E&#39;MULTILINESTRING (&#39; || ARRAY_TO_STRING (geomText, &#39;, &#39;) || E&#39;)&#39;, 4326);
  RETURN aggr;
END;
</programlisting>
      </para>
    </section>

  </chapter>

  <chapter id="network.schema"
           xreflabel="network">
    <title>Schema network</title>
    <para></para>


      <section id="network.table.classes"
               xreflabel="network.classes">
        <title id="network.table.classes-title">
         Table:
         
         <structname>classes</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>classes</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>type_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="network.table.types"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>name</structfield></term>
              <listitem><para>
                <type>character(200)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>cost</structfield></term>
              <listitem><para>
                <type>double precision</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing network.edges via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="network.table.edges"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="network.table.edges"
               xreflabel="network.edges">
        <title id="network.table.edges-title">
         Table:
         
         <structname>edges</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>edges</structname>
            </title>


            <varlistentry>
              <term><structfield>gid</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>









                <literal>DEFAULT nextval((&apos;&quot;edges_gid_seq&quot;&apos;::text)::regclass)</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>osm_id</structfield></term>
              <listitem><para>
                <type>bigint</type>












                <literal>REFERENCES</literal> <xref linkend="osm.table.ways"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>class_id</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="network.table.classes"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>length</structfield></term>
              <listitem><para>
                <type>double precision</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>name</structfield></term>
              <listitem><para>
                <type>character(200)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>x1</structfield></term>
              <listitem><para>
                <type>double precision</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>y1</structfield></term>
              <listitem><para>
                <type>double precision</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>x2</structfield></term>
              <listitem><para>
                <type>double precision</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>y2</structfield></term>
              <listitem><para>
                <type>double precision</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>reverse_cost</structfield></term>
              <listitem><para>
                <type>double precision</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>rule</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>to_cost</structfield></term>
              <listitem><para>
                <type>double precision</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>the_geom</structfield></term>
              <listitem><para>
                <type>geometry</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>source</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="network.table.nodes"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>target</structfield></term>
              <listitem><para>
                <type>integer</type>












                <literal>REFERENCES</literal> <xref linkend="network.table.nodes"/>


              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on edges</title>

          <varlistentry>
            <term>enforce_dims_the_geom</term>
            <listitem><para>CHECK ((ndims(the_geom) = 2))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_geotype_the_geom</term>
            <listitem><para>CHECK (((geometrytype(the_geom) = &apos;MULTILINESTRING&apos;::text) OR (the_geom IS NULL)))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_srid_the_geom</term>
            <listitem><para>CHECK ((srid(the_geom) = 4326))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on edges</title>

          <varlistentry>
            <term>edges_osm_id_idx</term>
            <listitem><para>osm_id</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>edges_source_node_idx</term>
            <listitem><para>source</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>edges_target_node_idx</term>
            <listitem><para>target</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>geom_idx</term>
            <listitem><para>the_geom</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>source_idx</term>
            <listitem><para>source</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>target_idx</term>
            <listitem><para>target</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing trafficmodel.link_network via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="trafficmodel.table.link-network"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="network.table.nodes"
               xreflabel="network.nodes">
        <title id="network.table.nodes-title">
         Table:
         
         <structname>nodes</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>nodes</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>serial</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>the_geom</structfield></term>
              <listitem><para>
                <type>geometry</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on nodes</title>

          <varlistentry>
            <term>enforce_dims_the_geom</term>
            <listitem><para>CHECK ((ndims(the_geom) = 2))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_geotype_the_geom</term>
            <listitem><para>CHECK (((geometrytype(the_geom) = &apos;POINT&apos;::text) OR (the_geom IS NULL)))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_srid_the_geom</term>
            <listitem><para>CHECK ((srid(the_geom) = 4326))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on nodes</title>

          <varlistentry>
            <term>nodes_idx</term>
            <listitem><para>the_geom</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing network.edges via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="network.table.edges"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="network.table.tmp-pupil-edge-path"
               xreflabel="network.tmp_pupil_edge_path">
        <title id="network.table.tmp-pupil-edge-path-title">
         Table:
         
         <structname>tmp_pupil_edge_path</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>tmp_pupil_edge_path</structname>
            </title>


            <varlistentry>
              <term><structfield>pupil_id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>trip_time</structfield></term>
              <listitem><para>
                <type>character(2)</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>edge_id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>seq</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="network.table.types"
               xreflabel="network.types">
        <title id="network.table.types-title">
         Table:
         
         <structname>types</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>types</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>name</structfield></term>
              <listitem><para>
                <type>character(200)</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing network.classes via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="network.table.classes"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>



<!-- Function closest_edge_node(range numeric, y numeric, x numeric) -->
    <section id="network.function.closest-edge-node-range-numeric-y-numeric-x-numeric"
             xreflabel="networkclosest_edge_node(range numeric, y numeric, x numeric)">
      <title id="network.function.closest-edge-node-range-numeric-y-numeric-x-numeric-title">
       closest_edge_node(range numeric, y numeric, x numeric)
      </title>
      <titleabbrev id="network.function.closest-edge-node-range-numeric-y-numeric-x-numeric-titleabbrev">
       closest_edge_node(range numeric, y numeric, x numeric)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>route_edge</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
  srid   INTEGER       DEFAULT 4326;  -- WGS84
  bbox   VARCHAR(256);
  query  TEXT;
  result network.ROUTE_EDGE;
BEGIN
  bbox := &#39;BOX3D(&#39; || x - range || &#39; &#39; || y - range || &#39;,&#39; || x + range || &#39; &#39; || y + range || &#39;)&#39;;

  query := &#39;SELECT gid AS id,
                   CASE WHEN LINE_LOCATE_POINT (LINEMERGE(the_geom), 
                                                GeometryFromText(&#39;&#39;POINT(&#39; || x || &#39; &#39; || y || &#39;)&#39;&#39;, &#39; || srid || &#39;)
                                               ) &lt; 0.5
                        THEN source
                        ELSE target
                   END AS nodeId
             FROM network.edges
             WHERE the_geom &amp;&amp; ST_SetSRID (&#39;&#39;&#39; || bbox || &#39;&#39;&#39;::box3d, &#39; || srid || &#39;)
          ORDER BY distance(the_geom, GeometryFromText(&#39;&#39;POINT(&#39; || x || &#39; &#39; || y || &#39;)&#39;&#39;, &#39; || srid || &#39;))
             LIMIT 1&#39;;

  EXECUTE query INTO result;

  RETURN result;
END;
</programlisting>
      </para>
    </section>

<!-- Function closest_nodes(number numeric, range numeric, y numeric, x smallint) -->
    <section id="network.function.closest-nodes-number-numeric-range-numeric-y-numeric-x-smallint"
             xreflabel="networkclosest_nodes(number numeric, range numeric, y numeric, x smallint)">
      <title id="network.function.closest-nodes-number-numeric-range-numeric-y-numeric-x-smallint-title">
       closest_nodes(number numeric, range numeric, y numeric, x smallint)
      </title>
      <titleabbrev id="network.function.closest-nodes-number-numeric-range-numeric-y-numeric-x-smallint-titleabbrev">
       closest_nodes(number numeric, range numeric, y numeric, x smallint)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF node</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
  srid   INTEGER       DEFAULT 4326;  -- WGS84
  bbox   VARCHAR(256);
  query  TEXT;
  result record;
  node   network.node;
BEGIN
  bbox := &#39;BOX3D(&#39; || x - range || &#39; &#39; || y - range || &#39;,&#39; || x + range || &#39; &#39; || y + range || &#39;)&#39;;

  query := &#39;SELECT id,
                   ST_X(the_geom) AS x,
                   ST_Y(the_geom) AS y,
                   distance(the_geom, GeometryFromText(&#39;&#39;POINT(&#39; || x || &#39; &#39; || y || &#39;)&#39;&#39;, &#39; || srid || &#39;)) AS error
              FROM network.nodes
             WHERE the_geom &amp;&amp; ST_SetSRID (&#39;&#39;&#39; || bbox || &#39;&#39;&#39;::box3d, &#39; || srid || &#39;)
          ORDER BY distance(the_geom, GeometryFromText(&#39;&#39;POINT(&#39; || x || &#39; &#39; || y || &#39;)&#39;&#39;, &#39; || srid || &#39;))
             LIMIT &#39; || number;

	FOR result IN EXECUTE query
    LOOP
      node.id    := result.id;
      node.x     := result.x;
      node.y     := result.y;
      node.error := result.error;
      RETURN NEXT node;
    END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function route(routemethod network.route_edge, target network.route_edge, source character varying) -->
    <section id="network.function.route-routemethod-network.route-edge-target-network.route-edge-source-character-varying"
             xreflabel="networkroute(routemethod network.route_edge, target network.route_edge, source character varying)">
      <title id="network.function.route-routemethod-network.route-edge-target-network.route-edge-source-character-varying-title">
       route(routemethod network.route_edge, target network.route_edge, source character varying)
      </title>
      <titleabbrev id="network.function.route-routemethod-network.route-edge-target-network.route-edge-source-character-varying-titleabbrev">
       route(routemethod network.route_edge, target network.route_edge, source character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF path_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
  query    TEXT;
  result   RECORD;
  output   path_result;
BEGIN
  IF routeMethod NOT IN (&#39;dijkstra&#39;, &#39;astar&#39;, &#39;shootingstar&#39;)
  THEN
    RAISE EXCEPTION &#39;Invalid routing method supplied: %, not &#39;&#39;dijkstra&#39;&#39;, &#39;&#39;astar&#39;&#39; or &#39;&#39;shootingstar&#39;&#39;&#39;, routeMethod;
  END IF;

  IF source IS NULL
  THEN
    RAISE EXCEPTION &#39;Invalid null source ROUTE_EDGE provided&#39;;
  END IF;

  IF target IS NULL
  THEN
    RAISE EXCEPTION &#39;Invalid null target ROUTE_EDGE provided&#39;;
  END IF;

  query := &#39;
     SELECT (path.result).vertex_id, (path.result).edge_id, (path.result).cost
       FROM (&#39;;
 
  IF routeMethod = &#39;dijkstra&#39;
  THEN
    query := query || &#39;
              SELECT shortest_path (
                 &#39;&#39;SELECT e.gid AS id, e.source::int4, e.target::int4, e.length AS cost, e.reverse_cost
                      FROM network.edges AS e&#39;&#39;,
                    &#39; || source.nodeId || &#39;,
                    &#39; || target.nodeId || &#39;, 
                    true, 
                    true)::path_result AS result&#39;;
  ELSIF routeMethod = &#39;astar&#39;
  THEN
    query := query || &#39;
              SELECT shortest_path_astar(
                  &#39;&#39;SELECT e.gid AS id, e.source::int4, e.target::int4, e.length AS cost, e.reverse_cost,
                           e.x1, e.y1, e.x2, e.y2 
                      FROM network.edges AS e&#39;&#39;,
                    &#39; || source.nodeId || &#39;,
                    &#39; || target.nodeId || &#39;, 
                    true, 
                    true)::path_result AS result&#39;;

  ELSIF routeMethod = &#39;shootingstar&#39;
  THEN
    query := query || &#39;
              SELECT shortest_path_shooting_star(
                  &#39;&#39;SELECT e.gid AS id, e.source::int4, e.target::int4, e.length AS cost, e.reverse_cost,
                           e.x1, e.y1, e.x2, e.y2, e.rule, e.to_cost
                      FROM network.edges AS e&#39;&#39;,
                    &#39; || source.Id || &#39;,
                    &#39; || target.Id || &#39;, 
                    true, 
                    true)::path_result AS result&#39;;
  END IF;

  query := query || &#39;) AS path&#39;;

  FOR result IN EXECUTE query
  LOOP
    output.vertex_id := result.vertex_id;
    output.edge_id   := result.edge_id;
    output.cost      := result.cost;

    RETURN NEXT output;
  END LOOP;

  RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function route_filtered(expandby network.route_edge, routemethod network.route_edge, target character varying, source numeric) -->
    <section id="network.function.route-filtered-expandby-network.route-edge-routemethod-network.route-edge-target-character-varying-source-numeric"
             xreflabel="networkroute_filtered(expandby network.route_edge, routemethod network.route_edge, target character varying, source numeric)">
      <title id="network.function.route-filtered-expandby-network.route-edge-routemethod-network.route-edge-target-character-varying-source-numeric-title">
       route_filtered(expandby network.route_edge, routemethod network.route_edge, target character varying, source numeric)
      </title>
      <titleabbrev id="network.function.route-filtered-expandby-network.route-edge-routemethod-network.route-edge-target-character-varying-source-numeric-titleabbrev">
       route_filtered(expandby network.route_edge, routemethod network.route_edge, target character varying, source numeric)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF path_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
  query    TEXT;
  subquery TEXT;
  result   RECORD;
  output   path_result;
BEGIN
  IF routeMethod NOT IN (&#39;dijkstra&#39;, &#39;astar&#39;, &#39;shootingstar&#39;)
  THEN
    RAISE EXCEPTION &#39;Invalid routing method supplied: %, not &#39;&#39;dijkstra&#39;&#39;, &#39;&#39;astar&#39;&#39; or &#39;&#39;shootingstar&#39;&#39;&#39;, routeMethod;
  END IF;

  IF source IS NULL
  THEN
    RAISE EXCEPTION &#39;Invalid null source ROUTE_EDGE provided&#39;;
  END IF;

  IF target IS NULL
  THEN
    RAISE EXCEPTION &#39;Invalid null target ROUTE_EDGE provided&#39;;
  END IF;

  subquery := &#39;SELECT ST_Expand (ST_MakeLine (source.the_geom, target.the_geom), &#39; || expandBy || &#39;) AS geom
                 FROM network.nodes AS source, network.nodes AS target
                WHERE source.id = &#39; || source.nodeId || &#39;
                  AND target.id = &#39; || target.nodeId;

  query := &#39;
     SELECT (path.result).vertex_id, (path.result).edge_id, (path.result).cost
       FROM (&#39;;
 
  IF routeMethod = &#39;dijkstra&#39;
  THEN
    query := query || &#39;
              SELECT shortest_path (
                 &#39;&#39;SELECT e.gid AS id, e.source::int4, e.target::int4, e.length AS cost, e.reverse_cost
                      FROM network.edges AS e
                      JOIN (&#39; || subquery || &#39;) AS filter
                        ON e.the_geom &amp;&amp; filter.geom&#39;&#39;,
                    &#39; || source.nodeId || &#39;,
                    &#39; || target.nodeId || &#39;, 
                    true, 
                    true)::path_result AS result&#39;;
  ELSIF routeMethod = &#39;astar&#39;
  THEN
    query := query || &#39;
              SELECT shortest_path_astar(
                  &#39;&#39;SELECT e.gid AS id, e.source::int4, e.target::int4, e.length AS cost, e.reverse_cost,
                           e.x1, e.y1, e.x2, e.y2 
                      FROM network.edges AS e
                      JOIN (&#39; || subquery || &#39;) AS filter
                        ON e.the_geom &amp;&amp; filter.geom&#39;&#39;,
                    &#39; || source.nodeId || &#39;,
                    &#39; || target.nodeId || &#39;, 
                    true, 
                    true)::path_result AS result&#39;;

  ELSIF routeMethod = &#39;shootingstar&#39;
  THEN
    query := query || &#39;
              SELECT shortest_path_shooting_star(
                  &#39;&#39;SELECT e.gid AS id, e.source::int4, e.target::int4, e.length AS cost, e.reverse_cost,
                           e.x1, e.y1, e.x2, e.y2, e.rule, e.to_cost
                      FROM network.edges AS e
                      JOIN (&#39; || subquery || &#39;) AS filter
                        ON e.the_geom &amp;&amp; filter.geom&#39;&#39;,
                    &#39; || source.Id || &#39;,
                    &#39; || target.Id || &#39;, 
                    true, 
                    true)::path_result AS result&#39;;
  END IF;

  query := query || &#39;) AS path&#39;;

  FOR result IN EXECUTE query
  LOOP
    output.vertex_id := result.vertex_id;
    output.edge_id   := result.edge_id;
    output.cost      := result.cost;

    RETURN NEXT output;
  END LOOP;

  RETURN;
END;
</programlisting>
      </para>
    </section>

  </chapter>

  <chapter id="osm.schema"
           xreflabel="osm">
    <title>Schema osm</title>
    <para></para>


      <section id="osm.table.actions"
               xreflabel="osm.actions">
        <title id="osm.table.actions-title">
         Table:
         
         <structname>actions</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>actions</structname>
            </title>


            <varlistentry>
              <term><structfield>data_type</structfield></term>
              <listitem><para>
                <type>character(1)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>action</structfield></term>
              <listitem><para>
                <type>character(1)</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>bigint</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="osm.table.node-tags"
               xreflabel="osm.node_tags">
        <title id="osm.table.node-tags-title">
         Table:
         
         <structname>node_tags</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>node_tags</structname>
            </title>


            <varlistentry>
              <term><structfield>node_id</structfield></term>
              <listitem><para>
                <type>bigint</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="osm.table.nodes"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>k</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>v</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on node_tags</title>

          <varlistentry>
            <term>idx_node_tags_node_id</term>
            <listitem><para>node_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="osm.table.nodes"
               xreflabel="osm.nodes">
        <title id="osm.table.nodes-title">
         Table:
         
         <structname>nodes</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>nodes</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>bigint</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>version</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>user_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="osm.table.users"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>tstamp</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>changeset_id</structfield></term>
              <listitem><para>
                <type>bigint</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>geom</structfield></term>
              <listitem><para>
                <type>geometry</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on nodes</title>

          <varlistentry>
            <term>enforce_dims_geom</term>
            <listitem><para>CHECK ((ndims(geom) = 2))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_geotype_geom</term>
            <listitem><para>CHECK (((geometrytype(geom) = &apos;POINT&apos;::text) OR (geom IS NULL)))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_srid_geom</term>
            <listitem><para>CHECK ((srid(geom) = 4326))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on nodes</title>

          <varlistentry>
            <term>idx_nodes_geom</term>
            <listitem><para>geom</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing osm.node_tags via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="osm.table.node-tags"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="osm.table.way-nodes"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="osm.table.relation-members"
               xreflabel="osm.relation_members">
        <title id="osm.table.relation-members-title">
         Table:
         
         <structname>relation_members</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>relation_members</structname>
            </title>


            <varlistentry>
              <term><structfield>relation_id</structfield></term>
              <listitem><para>
                <type>bigint</type>


                <literal>PRIMARY KEY</literal>


















                <literal>REFERENCES</literal> <xref linkend="osm.table.relations"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>member_id</structfield></term>
              <listitem><para>
                <type>bigint</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>member_type</structfield></term>
              <listitem><para>
                <type>character(1)</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>member_role</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sequence_id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="osm.table.relation-tags"
               xreflabel="osm.relation_tags">
        <title id="osm.table.relation-tags-title">
         Table:
         
         <structname>relation_tags</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>relation_tags</structname>
            </title>


            <varlistentry>
              <term><structfield>relation_id</structfield></term>
              <listitem><para>
                <type>bigint</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="osm.table.relations"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>k</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>v</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on relation_tags</title>

          <varlistentry>
            <term>idx_relation_tags_relation_id</term>
            <listitem><para>relation_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="osm.table.relations"
               xreflabel="osm.relations">
        <title id="osm.table.relations-title">
         Table:
         
         <structname>relations</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>relations</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>bigint</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>version</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>user_id</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>tstamp</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>changeset_id</structfield></term>
              <listitem><para>
                <type>bigint</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing osm.relation_members via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="osm.table.relation-members"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="osm.table.relation-tags"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="osm.table.schema-info"
               xreflabel="osm.schema_info">
        <title id="osm.table.schema-info-title">
         Table:
         
         <structname>schema_info</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>schema_info</structname>
            </title>


            <varlistentry>
              <term><structfield>version</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="osm.table.users"
               xreflabel="osm.users">
        <title id="osm.table.users-title">
         Table:
         
         <structname>users</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>users</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>name</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>







        <itemizedlist>
          <title>
            Tables referencing osm.nodes via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="osm.table.nodes"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="osm.table.ways"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>

      <section id="osm.table.way-nodes"
               xreflabel="osm.way_nodes">
        <title id="osm.table.way-nodes-title">
         Table:
         
         <structname>way_nodes</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>way_nodes</structname>
            </title>


            <varlistentry>
              <term><structfield>way_id</structfield></term>
              <listitem><para>
                <type>bigint</type>


                <literal>PRIMARY KEY</literal>


















                <literal>REFERENCES</literal> <xref linkend="osm.table.ways"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>node_id</structfield></term>
              <listitem><para>
                <type>bigint</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="osm.table.nodes"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>sequence_id</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on way_nodes</title>

          <varlistentry>
            <term>idx_way_nodes_node_id</term>
            <listitem><para>node_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="osm.table.way-tags"
               xreflabel="osm.way_tags">
        <title id="osm.table.way-tags-title">
         Table:
         
         <structname>way_tags</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>way_tags</structname>
            </title>


            <varlistentry>
              <term><structfield>way_id</structfield></term>
              <listitem><para>
                <type>bigint</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="osm.table.ways"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>k</structfield></term>
              <listitem><para>
                <type>text</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>v</structfield></term>
              <listitem><para>
                <type>text</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on way_tags</title>

          <varlistentry>
            <term>idx_way_tags_way_id</term>
            <listitem><para>way_id</para></listitem>
          </varlistentry>

        </variablelist>








      </para>
    </section>

      <section id="osm.table.ways"
               xreflabel="osm.ways">
        <title id="osm.table.ways-title">
         Table:
         
         <structname>ways</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>ways</structname>
            </title>


            <varlistentry>
              <term><structfield>id</structfield></term>
              <listitem><para>
                <type>bigint</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>version</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>user_id</structfield></term>
              <listitem><para>
                <type>integer</type>







                <literal>NOT NULL</literal>






                <literal>REFERENCES</literal> <xref linkend="osm.table.users"/>


              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>tstamp</structfield></term>
              <listitem><para>
                <type>timestamp without time zone</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>changeset_id</structfield></term>
              <listitem><para>
                <type>bigint</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>bbox</structfield></term>
              <listitem><para>
                <type>geometry</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>linestring</structfield></term>
              <listitem><para>
                <type>geometry</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>



        <variablelist>
          <title>Constraints on ways</title>

          <varlistentry>
            <term>enforce_dims_bbox</term>
            <listitem><para>CHECK ((ndims(bbox) = 2))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_dims_linestring</term>
            <listitem><para>CHECK ((ndims(linestring) = 2))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_srid_bbox</term>
            <listitem><para>CHECK ((srid(bbox) = 4326))</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>enforce_srid_linestring</term>
            <listitem><para>CHECK ((srid(linestring) = 4326))</para></listitem>
          </varlistentry>

        </variablelist>





        <variablelist>
          <title>Indexes on ways</title>

          <varlistentry>
            <term>idx_ways_bbox</term>
            <listitem><para>bbox</para></listitem>
          </varlistentry>



          <varlistentry>
            <term>idx_ways_linestring</term>
            <listitem><para>linestring</para></listitem>
          </varlistentry>

        </variablelist>





        <itemizedlist>
          <title>
            Tables referencing network.edges via Foreign Key Constraints
          </title>

          <listitem>
            <para>
              <xref linkend="network.table.edges"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="osm.table.way-nodes"/>
            </para>
          </listitem>



          <listitem>
            <para>
              <xref linkend="osm.table.way-tags"/>
            </para>
          </listitem>

        </itemizedlist>






      </para>
    </section>



<!-- Function osmosisupdate() -->
    <section id="osm.function.osmosisupdate"
             xreflabel="osmosmosisupdate()">
      <title id="osm.function.osmosisupdate-title">
       osmosisupdate()
      </title>
      <titleabbrev id="osm.function.osmosisupdate-titleabbrev">
       osmosisupdate()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
BEGIN
END;
</programlisting>
      </para>
    </section>

  </chapter>

  <chapter id="public.schema"
           xreflabel="public">
    <title>Schema public</title>
    <para>standard public schema</para>


      <section id="public.table.geometry-columns"
               xreflabel="public.geometry_columns">
        <title id="public.table.geometry-columns-title">
         Table:
         
         <structname>geometry_columns</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>geometry_columns</structname>
            </title>


            <varlistentry>
              <term><structfield>f_table_catalog</structfield></term>
              <listitem><para>
                <type>character varying(256)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>f_table_schema</structfield></term>
              <listitem><para>
                <type>character varying(256)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>f_table_name</structfield></term>
              <listitem><para>
                <type>character varying(256)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>f_geometry_column</structfield></term>
              <listitem><para>
                <type>character varying(256)</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>coord_dimension</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>srid</structfield></term>
              <listitem><para>
                <type>integer</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>type</structfield></term>
              <listitem><para>
                <type>character varying(30)</type>



                <literal>NOT NULL</literal>





              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>

      <section id="public.table.spatial-ref-sys"
               xreflabel="public.spatial_ref_sys">
        <title id="public.table.spatial-ref-sys-title">
         Table:
         
         <structname>spatial_ref_sys</structname>
        </title>
 


        <para>
          <variablelist>
            <title>
              Structure of <structname>spatial_ref_sys</structname>
            </title>


            <varlistentry>
              <term><structfield>srid</structfield></term>
              <listitem><para>
                <type>integer</type>


                <literal>PRIMARY KEY</literal>













              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>auth_name</structfield></term>
              <listitem><para>
                <type>character varying(256)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>auth_srid</structfield></term>
              <listitem><para>
                <type>integer</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>srtext</structfield></term>
              <listitem><para>
                <type>character varying(2048)</type>







              </para>

            </listitem>
          </varlistentry>

            <varlistentry>
              <term><structfield>proj4text</structfield></term>
              <listitem><para>
                <type>character varying(2048)</type>







              </para>

            </listitem>
          </varlistentry>

        </variablelist>










      </para>
    </section>



<!-- Function _st_asgeojson(integer, public.geometry, integer, integer) -->
    <section id="public.function.-st-asgeojson-integer-public.geometry-integer-integer"
             xreflabel="public_st_asgeojson(integer, public.geometry, integer, integer)">
      <title id="public.function.-st-asgeojson-integer-public.geometry-integer-integer-title">
       _st_asgeojson(integer, public.geometry, integer, integer)
      </title>
      <titleabbrev id="public.function.-st-asgeojson-integer-public.geometry-integer-integer-titleabbrev">
       _st_asgeojson(integer, public.geometry, integer, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asGeoJson</programlisting>
      </para>
    </section>

<!-- Function _st_asgml(integer, public.geometry, integer) -->
    <section id="public.function.-st-asgml-integer-public.geometry-integer"
             xreflabel="public_st_asgml(integer, public.geometry, integer)">
      <title id="public.function.-st-asgml-integer-public.geometry-integer-title">
       _st_asgml(integer, public.geometry, integer)
      </title>
      <titleabbrev id="public.function.-st-asgml-integer-public.geometry-integer-titleabbrev">
       _st_asgml(integer, public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asGML</programlisting>
      </para>
    </section>

<!-- Function _st_askml(integer, public.geometry, integer) -->
    <section id="public.function.-st-askml-integer-public.geometry-integer"
             xreflabel="public_st_askml(integer, public.geometry, integer)">
      <title id="public.function.-st-askml-integer-public.geometry-integer-title">
       _st_askml(integer, public.geometry, integer)
      </title>
      <titleabbrev id="public.function.-st-askml-integer-public.geometry-integer-titleabbrev">
       _st_askml(integer, public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asKML</programlisting>
      </para>
    </section>

<!-- Function _st_contains(public.geometry, public.geometry) -->
    <section id="public.function.-st-contains-public.geometry-public.geometry"
             xreflabel="public_st_contains(public.geometry, public.geometry)">
      <title id="public.function.-st-contains-public.geometry-public.geometry-title">
       _st_contains(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.-st-contains-public.geometry-public.geometry-titleabbrev">
       _st_contains(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>contains</programlisting>
      </para>
    </section>

<!-- Function _st_crosses(public.geometry, public.geometry) -->
    <section id="public.function.-st-crosses-public.geometry-public.geometry"
             xreflabel="public_st_crosses(public.geometry, public.geometry)">
      <title id="public.function.-st-crosses-public.geometry-public.geometry-title">
       _st_crosses(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.-st-crosses-public.geometry-public.geometry-titleabbrev">
       _st_crosses(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>crosses</programlisting>
      </para>
    </section>

<!-- Function _st_dwithin(public.geometry, public.geometry, double precision) -->
    <section id="public.function.-st-dwithin-public.geometry-public.geometry-double-precision"
             xreflabel="public_st_dwithin(public.geometry, public.geometry, double precision)">
      <title id="public.function.-st-dwithin-public.geometry-public.geometry-double-precision-title">
       _st_dwithin(public.geometry, public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.-st-dwithin-public.geometry-public.geometry-double-precision-titleabbrev">
       _st_dwithin(public.geometry, public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_dwithin</programlisting>
      </para>
    </section>

<!-- Function _st_intersects(public.geometry, public.geometry) -->
    <section id="public.function.-st-intersects-public.geometry-public.geometry"
             xreflabel="public_st_intersects(public.geometry, public.geometry)">
      <title id="public.function.-st-intersects-public.geometry-public.geometry-title">
       _st_intersects(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.-st-intersects-public.geometry-public.geometry-titleabbrev">
       _st_intersects(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>intersects</programlisting>
      </para>
    </section>

<!-- Function _st_overlaps(public.geometry, public.geometry) -->
    <section id="public.function.-st-overlaps-public.geometry-public.geometry"
             xreflabel="public_st_overlaps(public.geometry, public.geometry)">
      <title id="public.function.-st-overlaps-public.geometry-public.geometry-title">
       _st_overlaps(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.-st-overlaps-public.geometry-public.geometry-titleabbrev">
       _st_overlaps(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>overlaps</programlisting>
      </para>
    </section>

<!-- Function _st_touches(public.geometry, public.geometry) -->
    <section id="public.function.-st-touches-public.geometry-public.geometry"
             xreflabel="public_st_touches(public.geometry, public.geometry)">
      <title id="public.function.-st-touches-public.geometry-public.geometry-title">
       _st_touches(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.-st-touches-public.geometry-public.geometry-titleabbrev">
       _st_touches(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>touches</programlisting>
      </para>
    </section>

<!-- Function _st_within(public.geometry, public.geometry) -->
    <section id="public.function.-st-within-public.geometry-public.geometry"
             xreflabel="public_st_within(public.geometry, public.geometry)">
      <title id="public.function.-st-within-public.geometry-public.geometry-title">
       _st_within(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.-st-within-public.geometry-public.geometry-titleabbrev">
       _st_within(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>within</programlisting>
      </para>
    </section>

<!-- Function accum(public.geometry) -->
    <section id="public.function.accum-public.geometry"
             xreflabel="publicaccum(public.geometry)">
      <title id="public.function.accum-public.geometry-title">
       accum(public.geometry)
      </title>
      <titleabbrev id="public.function.accum-public.geometry-titleabbrev">
       accum(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function add_vertices_geometry(geom_table character varying) -->
    <section id="public.function.add-vertices-geometry-geom-table-character-varying"
             xreflabel="publicadd_vertices_geometry(geom_table character varying)">
      <title id="public.function.add-vertices-geometry-geom-table-character-varying-title">
       add_vertices_geometry(geom_table character varying)
      </title>
      <titleabbrev id="public.function.add-vertices-geometry-geom-table-character-varying-titleabbrev">
       add_vertices_geometry(geom_table character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	vertices_table varchar := quote_ident(geom_table) || &#39;_vertices&#39;;
BEGIN
	
	BEGIN
		EXECUTE &#39;SELECT addGeometryColumn(&#39;&#39;&#39; || 
                        quote_ident(vertices_table)  || 
                        &#39;&#39;&#39;, &#39;&#39;the_geom&#39;&#39;, -1, &#39;&#39;POINT&#39;&#39;, 2)&#39;;
	EXCEPTION 
		WHEN DUPLICATE_COLUMN THEN
	END;

	EXECUTE &#39;UPDATE &#39; || quote_ident(vertices_table) || 
                &#39; SET the_geom = NULL&#39;;

	EXECUTE &#39;UPDATE &#39; || quote_ident(vertices_table) || 
                &#39; SET the_geom = startPoint(geometryn(m.the_geom, 1)) FROM &#39; ||
                 quote_ident(geom_table) || 
                &#39; m where geom_id = m.source&#39;;

	EXECUTE &#39;UPDATE &#39; || quote_ident(vertices_table) || 
                &#39; set the_geom = endPoint(geometryn(m.the_geom, 1)) FROM &#39; || 
                quote_ident(geom_table) || 
                &#39; m where geom_id = m.target_id AND &#39; || 
                quote_ident(vertices_table) || 
                &#39;.the_geom IS NULL&#39;;

	RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function addauth(text) -->
    <section id="public.function.addauth-text"
             xreflabel="publicaddauth(text)">
      <title id="public.function.addauth-text-title">
       addauth(text)
      </title>
      <titleabbrev id="public.function.addauth-text-titleabbrev">
       addauth(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := &#39;f&#39;;
	FOR myrec IN SELECT * FROM pg_class WHERE relname = &#39;temp_lock_have_table&#39; LOOP
		okay := &#39;t&#39;;
	END LOOP; 
	IF (okay &lt;&gt; &#39;t&#39;) THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;

	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE &#39;INSERT INTO temp_lock_have_table VALUES ( &#39;||
--		quote_literal(getTransactionID()) || &#39;,&#39; ||
--		quote_literal(lockid) ||&#39;)&#39;;

	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);

	RETURN true::boolean;
END;
</programlisting>
      </para>
    </section>

<!-- Function addbbox(public.geometry) -->
    <section id="public.function.addbbox-public.geometry"
             xreflabel="publicaddbbox(public.geometry)">
      <title id="public.function.addbbox-public.geometry-title">
       addbbox(public.geometry)
      </title>
      <titleabbrev id="public.function.addbbox-public.geometry-titleabbrev">
       addbbox(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_addBBOX</programlisting>
      </para>
    </section>

<!-- Function addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer) -->
    <section id="public.function.addgeometrycolumn-character-varying-character-varying-character-varying-character-varying-integer-character-varying-integer"
             xreflabel="publicaddgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer)">
      <title id="public.function.addgeometrycolumn-character-varying-character-varying-character-varying-character-varying-integer-character-varying-integer-title">
       addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer)
      </title>
      <titleabbrev id="public.function.addgeometrycolumn-character-varying-character-varying-character-varying-character-varying-integer-character-varying-integer-titleabbrev">
       addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	catalog_name alias for $1;
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	new_type alias for $6;
	new_dim alias for $7;
	sr varchar;
	rec RECORD;
	schema_ok bool;
	real_schema name;

BEGIN

	IF ( not ( (new_type =&#39;GEOMETRY&#39;) or
		   (new_type =&#39;GEOMETRYCOLLECTION&#39;) or
		   (new_type =&#39;POINT&#39;) or 
		   (new_type =&#39;MULTIPOINT&#39;) or
		   (new_type =&#39;POLYGON&#39;) or
		   (new_type =&#39;MULTIPOLYGON&#39;) or
		   (new_type =&#39;LINESTRING&#39;) or
		   (new_type =&#39;MULTILINESTRING&#39;) or
		   (new_type =&#39;GEOMETRYCOLLECTIONM&#39;) or
		   (new_type =&#39;POINTM&#39;) or 
		   (new_type =&#39;MULTIPOINTM&#39;) or
		   (new_type =&#39;POLYGONM&#39;) or
		   (new_type =&#39;MULTIPOLYGONM&#39;) or
		   (new_type =&#39;LINESTRINGM&#39;) or
		   (new_type =&#39;MULTILINESTRINGM&#39;) or
                   (new_type = &#39;CIRCULARSTRING&#39;) or
                   (new_type = &#39;CIRCULARSTRINGM&#39;) or
                   (new_type = &#39;COMPOUNDCURVE&#39;) or
                   (new_type = &#39;COMPOUNDCURVEM&#39;) or
                   (new_type = &#39;CURVEPOLYGON&#39;) or
                   (new_type = &#39;CURVEPOLYGONM&#39;) or
                   (new_type = &#39;MULTICURVE&#39;) or
                   (new_type = &#39;MULTICURVEM&#39;) or
                   (new_type = &#39;MULTISURFACE&#39;) or
                   (new_type = &#39;MULTISURFACEM&#39;)) )
	THEN
		RAISE EXCEPTION &#39;Invalid type name - valid ones are: 
			GEOMETRY, GEOMETRYCOLLECTION, POINT, 
			MULTIPOINT, POLYGON, MULTIPOLYGON, 
			LINESTRING, MULTILINESTRING,
                        CIRCULARSTRING, COMPOUNDCURVE,
                        CURVEPOLYGON, MULTICURVE, MULTISURFACE,
			GEOMETRYCOLLECTIONM, POINTM, 
			MULTIPOINTM, POLYGONM, MULTIPOLYGONM, 
			LINESTRINGM, MULTILINESTRINGM 
                        CIRCULARSTRINGM, COMPOUNDCURVEM,
                        CURVEPOLYGONM, MULTICURVEM or MULTISURFACEM&#39;;
		return &#39;fail&#39;;
	END IF;

	IF ( (new_dim &gt;4) or (new_dim &lt;0) ) THEN
		RAISE EXCEPTION &#39;invalid dimension&#39;;
		return &#39;fail&#39;;
	END IF;

	IF ( (new_type LIKE &#39;%M&#39;) and (new_dim!=3) ) THEN

		RAISE EXCEPTION &#39;TypeM needs 3 dimensions&#39;;
		return &#39;fail&#39;;
	END IF;

	IF ( schema_name != &#39;&#39; ) THEN
		schema_ok = &#39;f&#39;;
		FOR rec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			schema_ok := &#39;t&#39;;
		END LOOP;

		if ( schema_ok &lt;&gt; &#39;t&#39; ) THEN
			RAISE EXCEPTION &#39;Invalid schema name&#39;;
		ELSE
			real_schema = schema_name;
		END IF;

	ELSE
		SELECT current_schema() into real_schema;
	END IF;

	IF ( new_srid != -1 ) THEN
		SELECT SRID INTO sr FROM SPATIAL_REF_SYS WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION &#39;AddGeometryColumns() - invalid SRID&#39;;
		END IF;
	END IF;


	-- Add geometry column

	EXECUTE &#39;ALTER TABLE &#39; ||
		quote_ident(real_schema) || &#39;.&#39; || quote_ident(table_name)
		|| &#39; ADD COLUMN &#39; || quote_ident(column_name) || 
		&#39; geometry &#39;;


	-- Delete stale record in geometry_column (if any)

	EXECUTE &#39;DELETE FROM geometry_columns WHERE
		f_table_catalog = &#39; || quote_literal(&#39;&#39;) || 
		&#39; AND f_table_schema = &#39; ||
		quote_literal(real_schema) || 
		&#39; AND f_table_name = &#39; || quote_literal(table_name) ||
		&#39; AND f_geometry_column = &#39; || quote_literal(column_name);


	-- Add record in geometry_column 

	EXECUTE &#39;INSERT INTO geometry_columns VALUES (&#39; ||
		quote_literal(&#39;&#39;) || &#39;,&#39; ||
		quote_literal(real_schema) || &#39;,&#39; ||
		quote_literal(table_name) || &#39;,&#39; ||
		quote_literal(column_name) || &#39;,&#39; ||
		new_dim::text || &#39;,&#39; || new_srid::text || &#39;,&#39; ||
		quote_literal(new_type) || &#39;)&#39;;

	-- Add table checks

	EXECUTE &#39;ALTER TABLE &#39; || 
		quote_ident(real_schema) || &#39;.&#39; || quote_ident(table_name)
		|| &#39; ADD CONSTRAINT &#39; 
		|| quote_ident(&#39;enforce_srid_&#39; || column_name)
		|| &#39; CHECK (SRID(&#39; || quote_ident(column_name) ||
		&#39;) = &#39; || new_srid::text || &#39;)&#39; ;

	EXECUTE &#39;ALTER TABLE &#39; || 
		quote_ident(real_schema) || &#39;.&#39; || quote_ident(table_name)
		|| &#39; ADD CONSTRAINT &#39;
		|| quote_ident(&#39;enforce_dims_&#39; || column_name)
		|| &#39; CHECK (ndims(&#39; || quote_ident(column_name) ||
		&#39;) = &#39; || new_dim::text || &#39;)&#39; ;

	IF (not(new_type = &#39;GEOMETRY&#39;)) THEN
		EXECUTE &#39;ALTER TABLE &#39; || 
		quote_ident(real_schema) || &#39;.&#39; || quote_ident(table_name)
		|| &#39; ADD CONSTRAINT &#39;
		|| quote_ident(&#39;enforce_geotype_&#39; || column_name)
		|| &#39; CHECK (geometrytype(&#39; ||
		quote_ident(column_name) || &#39;)=&#39; ||
		quote_literal(new_type) || &#39; OR (&#39; ||
		quote_ident(column_name) || &#39;) is null)&#39;;
	END IF;

	return 
		real_schema || &#39;.&#39; || 
		table_name || &#39;.&#39; || column_name ||
		&#39; SRID:&#39; || new_srid::text ||
		&#39; TYPE:&#39; || new_type || 
		&#39; DIMS:&#39; || new_dim::text || chr(10) || &#39; &#39;; 
END;
</programlisting>
      </para>
    </section>

<!-- Function addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer) -->
    <section id="public.function.addgeometrycolumn-character-varying-character-varying-character-varying-integer-character-varying-integer"
             xreflabel="publicaddgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer)">
      <title id="public.function.addgeometrycolumn-character-varying-character-varying-character-varying-integer-character-varying-integer-title">
       addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer)
      </title>
      <titleabbrev id="public.function.addgeometrycolumn-character-varying-character-varying-character-varying-integer-character-varying-integer-titleabbrev">
       addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn(&#39;&#39;,$1,$2,$3,$4,$5,$6) into ret;
	RETURN ret;
END;
</programlisting>
      </para>
    </section>

<!-- Function addgeometrycolumn(character varying, character varying, integer, character varying, integer) -->
    <section id="public.function.addgeometrycolumn-character-varying-character-varying-integer-character-varying-integer"
             xreflabel="publicaddgeometrycolumn(character varying, character varying, integer, character varying, integer)">
      <title id="public.function.addgeometrycolumn-character-varying-character-varying-integer-character-varying-integer-title">
       addgeometrycolumn(character varying, character varying, integer, character varying, integer)
      </title>
      <titleabbrev id="public.function.addgeometrycolumn-character-varying-character-varying-integer-character-varying-integer-titleabbrev">
       addgeometrycolumn(character varying, character varying, integer, character varying, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn(&#39;&#39;,&#39;&#39;,$1,$2,$3,$4,$5) into ret;
	RETURN ret;
END;
</programlisting>
      </para>
    </section>

<!-- Function addpoint(public.geometry, public.geometry) -->
    <section id="public.function.addpoint-public.geometry-public.geometry"
             xreflabel="publicaddpoint(public.geometry, public.geometry)">
      <title id="public.function.addpoint-public.geometry-public.geometry-title">
       addpoint(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.addpoint-public.geometry-public.geometry-titleabbrev">
       addpoint(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_addpoint</programlisting>
      </para>
    </section>

<!-- Function addpoint(public.geometry, public.geometry, integer) -->
    <section id="public.function.addpoint-public.geometry-public.geometry-integer"
             xreflabel="publicaddpoint(public.geometry, public.geometry, integer)">
      <title id="public.function.addpoint-public.geometry-public.geometry-integer-title">
       addpoint(public.geometry, public.geometry, integer)
      </title>
      <titleabbrev id="public.function.addpoint-public.geometry-public.geometry-integer-titleabbrev">
       addpoint(public.geometry, public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_addpoint</programlisting>
      </para>
    </section>

<!-- Function affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision) -->
    <section id="public.function.affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicaffine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision)">
      <title id="public.function.affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-title">
       affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)</programlisting>
      </para>
    </section>

<!-- Function affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) -->
    <section id="public.function.affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicaffine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)">
      <title id="public.function.affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-title">
       affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_affine</programlisting>
      </para>
    </section>

<!-- Function area(public.geometry) -->
    <section id="public.function.area-public.geometry"
             xreflabel="publicarea(public.geometry)">
      <title id="public.function.area-public.geometry-title">
       area(public.geometry)
      </title>
      <titleabbrev id="public.function.area-public.geometry-titleabbrev">
       area(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_area_polygon</programlisting>
      </para>
    </section>

<!-- Function area2d(public.geometry) -->
    <section id="public.function.area2d-public.geometry"
             xreflabel="publicarea2d(public.geometry)">
      <title id="public.function.area2d-public.geometry-title">
       area2d(public.geometry)
      </title>
      <titleabbrev id="public.function.area2d-public.geometry-titleabbrev">
       area2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_area_polygon</programlisting>
      </para>
    </section>

<!-- Function asbinary(public.geometry) -->
    <section id="public.function.asbinary-public.geometry"
             xreflabel="publicasbinary(public.geometry)">
      <title id="public.function.asbinary-public.geometry-title">
       asbinary(public.geometry)
      </title>
      <titleabbrev id="public.function.asbinary-public.geometry-titleabbrev">
       asbinary(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asBinary</programlisting>
      </para>
    </section>

<!-- Function asbinary(public.geometry, text) -->
    <section id="public.function.asbinary-public.geometry-text"
             xreflabel="publicasbinary(public.geometry, text)">
      <title id="public.function.asbinary-public.geometry-text-title">
       asbinary(public.geometry, text)
      </title>
      <titleabbrev id="public.function.asbinary-public.geometry-text-titleabbrev">
       asbinary(public.geometry, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asBinary</programlisting>
      </para>
    </section>

<!-- Function asewkb(public.geometry) -->
    <section id="public.function.asewkb-public.geometry"
             xreflabel="publicasewkb(public.geometry)">
      <title id="public.function.asewkb-public.geometry-title">
       asewkb(public.geometry)
      </title>
      <titleabbrev id="public.function.asewkb-public.geometry-titleabbrev">
       asewkb(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>WKBFromLWGEOM</programlisting>
      </para>
    </section>

<!-- Function asewkb(public.geometry, text) -->
    <section id="public.function.asewkb-public.geometry-text"
             xreflabel="publicasewkb(public.geometry, text)">
      <title id="public.function.asewkb-public.geometry-text-title">
       asewkb(public.geometry, text)
      </title>
      <titleabbrev id="public.function.asewkb-public.geometry-text-titleabbrev">
       asewkb(public.geometry, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>WKBFromLWGEOM</programlisting>
      </para>
    </section>

<!-- Function asewkt(public.geometry) -->
    <section id="public.function.asewkt-public.geometry"
             xreflabel="publicasewkt(public.geometry)">
      <title id="public.function.asewkt-public.geometry-title">
       asewkt(public.geometry)
      </title>
      <titleabbrev id="public.function.asewkt-public.geometry-titleabbrev">
       asewkt(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asEWKT</programlisting>
      </para>
    </section>

<!-- Function asgml(public.geometry) -->
    <section id="public.function.asgml-public.geometry"
             xreflabel="publicasgml(public.geometry)">
      <title id="public.function.asgml-public.geometry-title">
       asgml(public.geometry)
      </title>
      <titleabbrev id="public.function.asgml-public.geometry-titleabbrev">
       asgml(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGML(2, $1, 15)</programlisting>
      </para>
    </section>

<!-- Function asgml(public.geometry, integer) -->
    <section id="public.function.asgml-public.geometry-integer"
             xreflabel="publicasgml(public.geometry, integer)">
      <title id="public.function.asgml-public.geometry-integer-title">
       asgml(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.asgml-public.geometry-integer-titleabbrev">
       asgml(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGML(2, $1, $2)</programlisting>
      </para>
    </section>

<!-- Function ashexewkb(public.geometry) -->
    <section id="public.function.ashexewkb-public.geometry"
             xreflabel="publicashexewkb(public.geometry)">
      <title id="public.function.ashexewkb-public.geometry-title">
       ashexewkb(public.geometry)
      </title>
      <titleabbrev id="public.function.ashexewkb-public.geometry-titleabbrev">
       ashexewkb(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asHEXEWKB</programlisting>
      </para>
    </section>

<!-- Function ashexewkb(public.geometry, text) -->
    <section id="public.function.ashexewkb-public.geometry-text"
             xreflabel="publicashexewkb(public.geometry, text)">
      <title id="public.function.ashexewkb-public.geometry-text-title">
       ashexewkb(public.geometry, text)
      </title>
      <titleabbrev id="public.function.ashexewkb-public.geometry-text-titleabbrev">
       ashexewkb(public.geometry, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asHEXEWKB</programlisting>
      </para>
    </section>

<!-- Function askml(integer, public.geometry, integer) -->
    <section id="public.function.askml-integer-public.geometry-integer"
             xreflabel="publicaskml(integer, public.geometry, integer)">
      <title id="public.function.askml-integer-public.geometry-integer-title">
       askml(integer, public.geometry, integer)
      </title>
      <titleabbrev id="public.function.askml-integer-public.geometry-integer-titleabbrev">
       askml(integer, public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsKML($1, transform($2,4326), $3)</programlisting>
      </para>
    </section>

<!-- Function askml(public.geometry) -->
    <section id="public.function.askml-public.geometry"
             xreflabel="publicaskml(public.geometry)">
      <title id="public.function.askml-public.geometry-title">
       askml(public.geometry)
      </title>
      <titleabbrev id="public.function.askml-public.geometry-titleabbrev">
       askml(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsKML(2, transform($1,4326), 15)</programlisting>
      </para>
    </section>

<!-- Function askml(public.geometry, integer) -->
    <section id="public.function.askml-public.geometry-integer"
             xreflabel="publicaskml(public.geometry, integer)">
      <title id="public.function.askml-public.geometry-integer-title">
       askml(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.askml-public.geometry-integer-titleabbrev">
       askml(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsKML(2, transform($1,4326), $2)</programlisting>
      </para>
    </section>

<!-- Function assign_vertex_id(gid_cname character varying, geo_cname double precision, tolerance character varying, geom_table character varying) -->
    <section id="public.function.assign-vertex-id-gid-cname-character-varying-geo-cname-double-precision-tolerance-character-varying-geom-table-character-varying"
             xreflabel="publicassign_vertex_id(gid_cname character varying, geo_cname double precision, tolerance character varying, geom_table character varying)">
      <title id="public.function.assign-vertex-id-gid-cname-character-varying-geo-cname-double-precision-tolerance-character-varying-geom-table-character-varying-title">
       assign_vertex_id(gid_cname character varying, geo_cname double precision, tolerance character varying, geom_table character varying)
      </title>
      <titleabbrev id="public.function.assign-vertex-id-gid-cname-character-varying-geo-cname-double-precision-tolerance-character-varying-geom-table-character-varying-titleabbrev">
       assign_vertex_id(gid_cname character varying, geo_cname double precision, tolerance character varying, geom_table character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>character varying</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
    _r record;
    source_id int;
    target_id int;
    srid integer;
BEGIN

    BEGIN
    DROP TABLE nodes;
    EXCEPTION 
    WHEN UNDEFINED_TABLE THEN
    END;

    EXECUTE &#39;CREATE TABLE nodes (id serial)&#39;;

    FOR _r IN EXECUTE &#39;SELECT srid FROM geometry_columns WHERE f_table_name=&#39;&#39;&#39;|| quote_ident(geom_table)||&#39;&#39;&#39;;&#39; LOOP
	srid := _r.srid;
    END LOOP;

    EXECUTE &#39;SELECT addGeometryColumn(&#39;&#39;nodes&#39;&#39;, &#39;&#39;the_geom&#39;&#39;, &#39;||srid||&#39;, &#39;&#39;POINT&#39;&#39;, 2)&#39;;
    CREATE INDEX nodes_idx ON nodes USING GIST (the_geom);
			
    FOR _r IN EXECUTE &#39;SELECT &#39; || quote_ident(gid_cname) || &#39; AS id,&#39;
	    || &#39; StartPoint(&#39;|| quote_ident(geo_cname) ||&#39;) AS source,&#39;
            || &#39; EndPoint(&#39;|| quote_ident(geo_cname) ||&#39;) as target&#39;
	    || &#39; FROM &#39; || quote_ident(geom_table) 
    LOOP
        
        source_id := point_to_id(setsrid(_r.source, srid), tolerance);
	target_id := point_to_id(setsrid(_r.target, srid), tolerance);
								
	EXECUTE &#39;update &#39; || quote_ident(geom_table) || 
		&#39; SET source = &#39; || source_id || 
		&#39;, target = &#39; || target_id || 
		&#39; WHERE &#39; || quote_ident(gid_cname) || &#39; =  &#39; || _r.id;
    END LOOP;

    RETURN &#39;OK&#39;;

END;
</programlisting>
      </para>
    </section>

<!-- Function assvg(public.geometry) -->
    <section id="public.function.assvg-public.geometry"
             xreflabel="publicassvg(public.geometry)">
      <title id="public.function.assvg-public.geometry-title">
       assvg(public.geometry)
      </title>
      <titleabbrev id="public.function.assvg-public.geometry-titleabbrev">
       assvg(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>assvg_geometry</programlisting>
      </para>
    </section>

<!-- Function assvg(public.geometry, integer) -->
    <section id="public.function.assvg-public.geometry-integer"
             xreflabel="publicassvg(public.geometry, integer)">
      <title id="public.function.assvg-public.geometry-integer-title">
       assvg(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.assvg-public.geometry-integer-titleabbrev">
       assvg(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>assvg_geometry</programlisting>
      </para>
    </section>

<!-- Function assvg(public.geometry, integer, integer) -->
    <section id="public.function.assvg-public.geometry-integer-integer"
             xreflabel="publicassvg(public.geometry, integer, integer)">
      <title id="public.function.assvg-public.geometry-integer-integer-title">
       assvg(public.geometry, integer, integer)
      </title>
      <titleabbrev id="public.function.assvg-public.geometry-integer-integer-titleabbrev">
       assvg(public.geometry, integer, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>assvg_geometry</programlisting>
      </para>
    </section>

<!-- Function astar_sp(target character varying, source integer, geom_table integer) -->
    <section id="public.function.astar-sp-target-character-varying-source-integer-geom-table-integer"
             xreflabel="publicastar_sp(target character varying, source integer, geom_table integer)">
      <title id="public.function.astar-sp-target-character-varying-source-integer-geom-table-integer-title">
       astar_sp(target character varying, source integer, geom_table integer)
      </title>
      <titleabbrev id="public.function.astar-sp-target-character-varying-source-integer-geom-table-integer-titleabbrev">
       astar_sp(target character varying, source integer, geom_table integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;

	id integer;
BEGIN
	
	id :=0;
	FOR path_result IN EXECUTE &#39;SELECT gid,the_geom FROM &#39; || 
           &#39;astar_sp_directed(&#39;&#39;&#39; || 
           quote_ident(geom_table) || &#39;&#39;&#39;, &#39; || quote_literal(source) || &#39;, &#39; || 
	   quote_literal(target) || &#39;, false, false)&#39;
        LOOP

              geom.gid      := path_result.gid;
              geom.the_geom := path_result.the_geom;
              id := id+1;
	      geom.id       := id;
                 
              RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function astar_sp_bbox(character varying, integer, integer, double precision, double precision, double precision, double precision) -->
    <section id="public.function.astar-sp-bbox-character-varying-integer-integer-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicastar_sp_bbox(character varying, integer, integer, double precision, double precision, double precision, double precision)">
      <title id="public.function.astar-sp-bbox-character-varying-integer-integer-double-precision-double-precision-double-precision-double-precision-title">
       astar_sp_bbox(character varying, integer, integer, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.astar-sp-bbox-character-varying-integer-integer-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       astar_sp_bbox(character varying, integer, integer, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	ll_x ALIAS FOR $4;
	ll_y ALIAS FOR $5;
	ur_x ALIAS FOR $6;
	ur_y ALIAS FOR $7;

	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;

	id integer;
BEGIN
	
	id :=0;
	FOR path_result IN EXECUTE &#39;SELECT gid,the_geom FROM &#39; || 
           &#39;astar_sp_bbox_directed(&#39;&#39;&#39; || 
           quote_ident(geom_table) || &#39;&#39;&#39;, &#39; || quote_literal(sourceid) || &#39;, &#39; || 
	   quote_literal(targetid) || &#39;, &#39; || ll_x || &#39;, &#39; || ll_y || &#39;, &#39; ||
	   ur_x || &#39;, &#39; || ur_y || &#39;, false, false)&#39;
        LOOP

               geom.gid      := path_result.gid;
               geom.the_geom := path_result.the_geom;
               id := id+1;
	       geom.id       := id;
                 
               RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function astar_sp_bbox_directed(character varying, integer, integer, double precision, double precision, double precision, double precision, boolean, boolean) -->
    <section id="public.function.astar-sp-bbox-directed-character-varying-integer-integer-double-precision-double-precision-double-precision-double-precision-boolean-boolean"
             xreflabel="publicastar_sp_bbox_directed(character varying, integer, integer, double precision, double precision, double precision, double precision, boolean, boolean)">
      <title id="public.function.astar-sp-bbox-directed-character-varying-integer-integer-double-precision-double-precision-double-precision-double-precision-boolean-boolean-title">
       astar_sp_bbox_directed(character varying, integer, integer, double precision, double precision, double precision, double precision, boolean, boolean)
      </title>
      <titleabbrev id="public.function.astar-sp-bbox-directed-character-varying-integer-integer-double-precision-double-precision-double-precision-double-precision-boolean-boolean-titleabbrev">
       astar_sp_bbox_directed(character varying, integer, integer, double precision, double precision, double precision, double precision, boolean, boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	ll_x ALIAS FOR $4;
	ll_y ALIAS FOR $5;
	ur_x ALIAS FOR $6;
	ur_y ALIAS FOR $7;
	dir ALIAS FOR $8;
	rc ALIAS FOR $9;

	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;
	
	query text;

	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    &#39;select srid(the_geom) from &#39; ||
	    quote_ident(geom_table) || &#39; limit 1&#39;
	LOOP
	END LOOP;
	srid := rec.srid;
	
	query := &#39;SELECT gid,the_geom FROM &#39; || 
           &#39;shortest_path_astar(&#39;&#39;SELECT gid as id, source::integer, &#39; || 
           &#39;target::integer, length::double precision as cost, &#39; || 
           &#39;x1::double precision, y1::double precision, &#39; || 
           &#39;x2::double precision, y2::double precision &#39;;
	   
	IF rc THEN query := query || &#39; , reverse_cost &#39;;
	END IF;
	   
	query := query || &#39;FROM &#39; || 
           quote_ident(geom_table) || &#39; where setSRID(&#39;&#39;&#39;&#39;BOX3D(&#39;||ll_x||&#39; &#39;||
           ll_y||&#39;,&#39;||ur_x||&#39; &#39;||ur_y||&#39;)&#39;&#39;&#39;&#39;::BOX3D, &#39; || srid || 
	   &#39;) &amp;&amp; the_geom&#39;&#39;, &#39; || quote_literal(sourceid) || &#39; , &#39; || 
           quote_literal(targetid) || &#39; , &#39;&#39;&#39;||text(dir)||&#39;&#39;&#39;, &#39;&#39;&#39;||text(rc)||&#39;&#39;&#39; ),&#39;  ||
           quote_ident(geom_table) || &#39; where edge_id = gid &#39;;
	
	FOR path_result IN EXECUTE query
        LOOP
               geom.gid      := path_result.gid;
               geom.the_geom := path_result.the_geom;
               id := id+1;
	       geom.id       := id;
                 
               RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function astar_sp_delta(character varying, integer, integer, double precision) -->
    <section id="public.function.astar-sp-delta-character-varying-integer-integer-double-precision"
             xreflabel="publicastar_sp_delta(character varying, integer, integer, double precision)">
      <title id="public.function.astar-sp-delta-character-varying-integer-integer-double-precision-title">
       astar_sp_delta(character varying, integer, integer, double precision)
      </title>
      <titleabbrev id="public.function.astar-sp-delta-character-varying-integer-integer-double-precision-titleabbrev">
       astar_sp_delta(character varying, integer, integer, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;

	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	id integer;
BEGIN
	
	id :=0;

	FOR path_result IN EXECUTE &#39;SELECT gid,the_geom FROM &#39; || 
           &#39;astar_sp_delta_directed(&#39;&#39;&#39; || 
           quote_ident(geom_table) || &#39;&#39;&#39;, &#39; || quote_literal(sourceid) || &#39;, &#39; || 
	   quote_literal(targetid) || &#39;, &#39; || delta || &#39;, false, false)&#39;
        LOOP

                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function astar_sp_delta_cc(character varying, integer, integer, double precision, character varying) -->
    <section id="public.function.astar-sp-delta-cc-character-varying-integer-integer-double-precision-character-varying"
             xreflabel="publicastar_sp_delta_cc(character varying, integer, integer, double precision, character varying)">
      <title id="public.function.astar-sp-delta-cc-character-varying-integer-integer-double-precision-character-varying-title">
       astar_sp_delta_cc(character varying, integer, integer, double precision, character varying)
      </title>
      <titleabbrev id="public.function.astar-sp-delta-cc-character-varying-integer-integer-double-precision-character-varying-titleabbrev">
       astar_sp_delta_cc(character varying, integer, integer, double precision, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	cost_column ALIAS FOR $5;

	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	id integer;
BEGIN
	
	id :=0;
	FOR path_result IN EXECUTE &#39;SELECT gid,the_geom FROM &#39; || 
           &#39;astar_sp_delta_cc_directed(&#39;&#39;&#39; || 
           quote_ident(geom_table) || &#39;&#39;&#39;, &#39; || quote_literal(sourceid) || &#39;, &#39; || 
	   quote_literal(targetid) || &#39;, &#39; || delta || &#39;,&#39; || 
	   quote_literal(cost_column) || &#39;, false, false)&#39;
        LOOP

                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function astar_sp_delta_cc_directed(character varying, integer, integer, double precision, character varying, boolean, boolean) -->
    <section id="public.function.astar-sp-delta-cc-directed-character-varying-integer-integer-double-precision-character-varying-boolean-boolean"
             xreflabel="publicastar_sp_delta_cc_directed(character varying, integer, integer, double precision, character varying, boolean, boolean)">
      <title id="public.function.astar-sp-delta-cc-directed-character-varying-integer-integer-double-precision-character-varying-boolean-boolean-title">
       astar_sp_delta_cc_directed(character varying, integer, integer, double precision, character varying, boolean, boolean)
      </title>
      <titleabbrev id="public.function.astar-sp-delta-cc-directed-character-varying-integer-integer-double-precision-character-varying-boolean-boolean-titleabbrev">
       astar_sp_delta_cc_directed(character varying, integer, integer, double precision, character varying, boolean, boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	cost_column ALIAS FOR $5;
	dir ALIAS FOR $6;
	rc ALIAS FOR $7;

	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;

	source_x float8;
	source_y float8;
	target_x float8;
	target_y float8;
	
	ll_x float8;
	ll_y float8;
	ur_x float8;
	ur_y float8;
	
	query text;

	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    &#39;select srid(the_geom) from &#39; ||
	    quote_ident(geom_table) || &#39; limit 1&#39;
	LOOP
	END LOOP;
	srid := rec.srid;
	
	FOR rec IN EXECUTE 
            &#39;select x(startpoint(the_geom)) as source_x from &#39; || 
            quote_ident(geom_table) || &#39; where source = &#39; || 
            sourceid || &#39; or target=&#39;||sourceid||&#39; limit 1&#39;
        LOOP
	END LOOP;
	source_x := rec.source_x;
	
	FOR rec IN EXECUTE 
            &#39;select y(startpoint(the_geom)) as source_y from &#39; || 
            quote_ident(geom_table) || &#39; where source = &#39; || 
            sourceid ||  &#39; or target=&#39;||sourceid||&#39; limit 1&#39;
        LOOP
	END LOOP;

	source_y := rec.source_y;

	FOR rec IN EXECUTE 
            &#39;select x(startpoint(the_geom)) as target_x from &#39; ||
            quote_ident(geom_table) || &#39; where source = &#39; || 
            targetid ||  &#39; or target=&#39;||targetid||&#39; limit 1&#39;
        LOOP
	END LOOP;

	target_x := rec.target_x;
	
	FOR rec IN EXECUTE 
            &#39;select y(startpoint(the_geom)) as target_y from &#39; || 
            quote_ident(geom_table) || &#39; where source = &#39; || 
            targetid ||  &#39; or target=&#39;||targetid||&#39; limit 1&#39;
        LOOP
	END LOOP;
	target_y := rec.target_y;


	FOR rec IN EXECUTE &#39;SELECT CASE WHEN &#39;||source_x||&#39;&lt;&#39;||target_x||
           &#39; THEN &#39;||source_x||&#39; ELSE &#39;||target_x||
           &#39; END as ll_x, CASE WHEN &#39;||source_x||&#39;&gt;&#39;||target_x||
           &#39; THEN &#39;||source_x||&#39; ELSE &#39;||target_x||&#39; END as ur_x&#39;
        LOOP
	END LOOP;

	ll_x := rec.ll_x;
	ur_x := rec.ur_x;

	FOR rec IN EXECUTE &#39;SELECT CASE WHEN &#39;||source_y||&#39;&lt;&#39;||
            target_y||&#39; THEN &#39;||source_y||&#39; ELSE &#39;||
            target_y||&#39; END as ll_y, CASE WHEN &#39;||
            source_y||&#39;&gt;&#39;||target_y||&#39; THEN &#39;||
            source_y||&#39; ELSE &#39;||target_y||&#39; END as ur_y&#39;
        LOOP
	END LOOP;

	ll_y := rec.ll_y;
	ur_y := rec.ur_y;

	query := &#39;SELECT gid,the_geom FROM &#39; || 
          &#39;shortest_path_astar(&#39;&#39;SELECT gid as id, source::integer, &#39; || 
          &#39;target::integer, &#39;||cost_column||&#39;::double precision as cost, &#39; || 
          &#39;x1::double precision, y1::double precision, x2::double &#39; ||
          &#39;precision, y2::double precision &#39;;
	
	IF rc THEN query := query || &#39; , reverse_cost &#39;;
	END IF;
	  
	query := query || &#39;FROM &#39; || quote_ident(geom_table) || &#39; where setSRID(&#39;&#39;&#39;&#39;BOX3D(&#39;||
          ll_x-delta||&#39; &#39;||ll_y-delta||&#39;,&#39;||ur_x+delta||&#39; &#39;||
          ur_y+delta||&#39;)&#39;&#39;&#39;&#39;::BOX3D, &#39; || srid || &#39;) &amp;&amp; the_geom&#39;&#39;, &#39; || 
          quote_literal(sourceid) || &#39; , &#39; || 
          quote_literal(targetid) || &#39; , &#39;&#39;&#39;||text(dir)||&#39;&#39;&#39;, &#39;&#39;&#39;||text(rc)||&#39;&#39;&#39; ),&#39; || 
          quote_ident(geom_table) || &#39; where edge_id = gid &#39;;
	
	FOR path_result IN EXECUTE query
        LOOP

                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function astar_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean) -->
    <section id="public.function.astar-sp-delta-directed-character-varying-integer-integer-double-precision-boolean-boolean"
             xreflabel="publicastar_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean)">
      <title id="public.function.astar-sp-delta-directed-character-varying-integer-integer-double-precision-boolean-boolean-title">
       astar_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean)
      </title>
      <titleabbrev id="public.function.astar-sp-delta-directed-character-varying-integer-integer-double-precision-boolean-boolean-titleabbrev">
       astar_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	dir ALIAS FOR $5;
	rc ALIAS FOR $6;

	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;

	source_x float8;
	source_y float8;
	target_x float8;
	target_y float8;
	
	ll_x float8;
	ll_y float8;
	ur_x float8;
	ur_y float8;
	
	query text;

	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    &#39;select srid(the_geom) from &#39; ||
	    quote_ident(geom_table) || &#39; limit 1&#39;
	LOOP
	END LOOP;
	srid := rec.srid;
	
	FOR rec IN EXECUTE 
            &#39;select x(startpoint(the_geom)) as source_x from &#39; || 
            quote_ident(geom_table) || &#39; where source = &#39; || 
            sourceid ||  &#39; or target=&#39;||sourceid||&#39; limit 1&#39;
        LOOP
	END LOOP;
	source_x := rec.source_x;
	
	FOR rec IN EXECUTE 
            &#39;select y(startpoint(the_geom)) as source_y from &#39; || 
            quote_ident(geom_table) || &#39; where source = &#39; || 
            sourceid ||  &#39; or target=&#39;||sourceid||&#39; limit 1&#39;
        LOOP
	END LOOP;

	source_y := rec.source_y;

	FOR rec IN EXECUTE 
            &#39;select x(startpoint(the_geom)) as target_x from &#39; ||
            quote_ident(geom_table) || &#39; where source = &#39; || 
            targetid ||  &#39; or target=&#39;||targetid||&#39; limit 1&#39;
        LOOP
	END LOOP;

	target_x := rec.target_x;
	
	FOR rec IN EXECUTE 
            &#39;select y(startpoint(the_geom)) as target_y from &#39; || 
            quote_ident(geom_table) || &#39; where source = &#39; || 
            targetid ||  &#39; or target=&#39;||targetid||&#39; limit 1&#39;
        LOOP
	END LOOP;
	target_y := rec.target_y;

	FOR rec IN EXECUTE &#39;SELECT CASE WHEN &#39;||source_x||&#39;&lt;&#39;||target_x||
           &#39; THEN &#39;||source_x||&#39; ELSE &#39;||target_x||
           &#39; END as ll_x, CASE WHEN &#39;||source_x||&#39;&gt;&#39;||target_x||
           &#39; THEN &#39;||source_x||&#39; ELSE &#39;||target_x||&#39; END as ur_x&#39;
        LOOP
	END LOOP;

	ll_x := rec.ll_x;
	ur_x := rec.ur_x;

	FOR rec IN EXECUTE &#39;SELECT CASE WHEN &#39;||source_y||&#39;&lt;&#39;||
            target_y||&#39; THEN &#39;||source_y||&#39; ELSE &#39;||
            target_y||&#39; END as ll_y, CASE WHEN &#39;||
            source_y||&#39;&gt;&#39;||target_y||&#39; THEN &#39;||
            source_y||&#39; ELSE &#39;||target_y||&#39; END as ur_y&#39;
        LOOP
	END LOOP;

	ll_y := rec.ll_y;
	ur_y := rec.ur_y;

	query := &#39;SELECT gid,the_geom FROM &#39; || 
          &#39;shortest_path_astar(&#39;&#39;SELECT gid as id, source::integer, &#39; || 
          &#39;target::integer, length::double precision as cost, &#39; || 
          &#39;x1::double precision, y1::double precision, x2::double &#39; ||
          &#39;precision, y2::double precision &#39;;
	  
	IF rc THEN query := query || &#39; , reverse_cost &#39;;  
	END IF;
	  
	query := query || &#39;FROM &#39; || quote_ident(geom_table) || &#39; where setSRID(&#39;&#39;&#39;&#39;BOX3D(&#39;||
          ll_x-delta||&#39; &#39;||ll_y-delta||&#39;,&#39;||ur_x+delta||&#39; &#39;||
          ur_y+delta||&#39;)&#39;&#39;&#39;&#39;::BOX3D, &#39; || srid || &#39;) &amp;&amp; the_geom&#39;&#39;, &#39; || 
          quote_literal(sourceid) || &#39; , &#39; || 
          quote_literal(targetid) || &#39; , &#39;&#39;&#39;||text(dir)||&#39;&#39;&#39;, &#39;&#39;&#39;||text(rc)||&#39;&#39;&#39; ),&#39; || 
          quote_ident(geom_table) || &#39; where edge_id = gid &#39;;
	  
	FOR path_result IN EXECUTE query
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;
--
--                v_id = path_result.vertex_id;
--                e_id = path_result.edge_id;

--                FOR r IN EXECUTE &#39;SELECT gid, the_geom FROM &#39; || 
--                      quote_ident(geom_table) || &#39;  WHERE gid = &#39; || 
--                      quote_literal(e_id) LOOP
--                        geom.gid := r.gid;
--                        geom.the_geom := r.the_geom;
--                        RETURN NEXT geom;
--                END LOOP;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function astar_sp_directed(rc character varying, dir integer, target integer, source boolean, geom_table boolean) -->
    <section id="public.function.astar-sp-directed-rc-character-varying-dir-integer-target-integer-source-boolean-geom-table-boolean"
             xreflabel="publicastar_sp_directed(rc character varying, dir integer, target integer, source boolean, geom_table boolean)">
      <title id="public.function.astar-sp-directed-rc-character-varying-dir-integer-target-integer-source-boolean-geom-table-boolean-title">
       astar_sp_directed(rc character varying, dir integer, target integer, source boolean, geom_table boolean)
      </title>
      <titleabbrev id="public.function.astar-sp-directed-rc-character-varying-dir-integer-target-integer-source-boolean-geom-table-boolean-titleabbrev">
       astar_sp_directed(rc character varying, dir integer, target integer, source boolean, geom_table boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	query text;

	id integer;
BEGIN
	
	id :=0;
	query := &#39;SELECT gid,the_geom FROM &#39; || 
           &#39;shortest_path_astar(&#39;&#39;SELECT gid as id, source::integer, &#39; || 
           &#39;target::integer, length::double precision as cost, &#39; || 
           &#39;x1::double precision, y1::double precision, &#39; || 
           &#39;x2::double precision, y2::double precision &#39;;
	   
	IF rc THEN query := query || &#39; , reverse_cost &#39;;
	END IF;

	query := query || &#39;FROM &#39; || quote_ident(geom_table) || &#39; &#39;&#39;, &#39; || 
           quote_literal(source) || &#39; , &#39; || 
           quote_literal(target) || &#39; , &#39;&#39;&#39;||text(dir)||&#39;&#39;&#39;, &#39;&#39;&#39;||text(rc)||&#39;&#39;&#39;), &#39; ||
           quote_ident(geom_table) || &#39; where edge_id = gid &#39;;
	   
	FOR path_result IN EXECUTE query
        LOOP

              geom.gid      := path_result.gid;
              geom.the_geom := path_result.the_geom;
              id := id+1;
	      geom.id       := id;
                 
              RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function astext(public.geometry) -->
    <section id="public.function.astext-public.geometry"
             xreflabel="publicastext(public.geometry)">
      <title id="public.function.astext-public.geometry-title">
       astext(public.geometry)
      </title>
      <titleabbrev id="public.function.astext-public.geometry-titleabbrev">
       astext(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asText</programlisting>
      </para>
    </section>

<!-- Function azimuth(public.geometry, public.geometry) -->
    <section id="public.function.azimuth-public.geometry-public.geometry"
             xreflabel="publicazimuth(public.geometry, public.geometry)">
      <title id="public.function.azimuth-public.geometry-public.geometry-title">
       azimuth(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.azimuth-public.geometry-public.geometry-titleabbrev">
       azimuth(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_azimuth</programlisting>
      </para>
    </section>

<!-- Function bdmpolyfromtext(text, integer) -->
    <section id="public.function.bdmpolyfromtext-text-integer"
             xreflabel="publicbdmpolyfromtext(text, integer)">
      <title id="public.function.bdmpolyfromtext-text-integer-title">
       bdmpolyfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.bdmpolyfromtext-text-integer-titleabbrev">
       bdmpolyfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION &#39;Input is not a MultiLinestring&#39;;
	END IF;

	geom := multi(BuildArea(mline));

	RETURN geom;
END;
</programlisting>
      </para>
    </section>

<!-- Function bdpolyfromtext(text, integer) -->
    <section id="public.function.bdpolyfromtext-text-integer"
             xreflabel="publicbdpolyfromtext(text, integer)">
      <title id="public.function.bdpolyfromtext-text-integer-title">
       bdpolyfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.bdpolyfromtext-text-integer-titleabbrev">
       bdpolyfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION &#39;Input is not a MultiLinestring&#39;;
	END IF;

	geom := BuildArea(mline);

	IF GeometryType(geom) != &#39;POLYGON&#39;
	THEN
		RAISE EXCEPTION &#39;Input returns more then a single polygon, try using BdMPolyFromText instead&#39;;
	END IF;

	RETURN geom;
END;
</programlisting>
      </para>
    </section>

<!-- Function boundary(public.geometry) -->
    <section id="public.function.boundary-public.geometry"
             xreflabel="publicboundary(public.geometry)">
      <title id="public.function.boundary-public.geometry-title">
       boundary(public.geometry)
      </title>
      <titleabbrev id="public.function.boundary-public.geometry-titleabbrev">
       boundary(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>boundary</programlisting>
      </para>
    </section>

<!-- Function box(public.box3d) -->
    <section id="public.function.box-public.box3d"
             xreflabel="publicbox(public.box3d)">
      <title id="public.function.box-public.box3d-title">
       box(public.box3d)
      </title>
      <titleabbrev id="public.function.box-public.box3d-titleabbrev">
       box(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_to_BOX</programlisting>
      </para>
    </section>

<!-- Function box(public.geometry) -->
    <section id="public.function.box-public.geometry"
             xreflabel="publicbox(public.geometry)">
      <title id="public.function.box-public.geometry-title">
       box(public.geometry)
      </title>
      <titleabbrev id="public.function.box-public.geometry-titleabbrev">
       box(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_BOX</programlisting>
      </para>
    </section>

<!-- Function box2d(public.box3d) -->
    <section id="public.function.box2d-public.box3d"
             xreflabel="publicbox2d(public.box3d)">
      <title id="public.function.box2d-public.box3d-title">
       box2d(public.box3d)
      </title>
      <titleabbrev id="public.function.box2d-public.box3d-titleabbrev">
       box2d(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_to_BOX2DFLOAT4</programlisting>
      </para>
    </section>

<!-- Function box2d(public.geometry) -->
    <section id="public.function.box2d-public.geometry"
             xreflabel="publicbox2d(public.geometry)">
      <title id="public.function.box2d-public.geometry-title">
       box2d(public.geometry)
      </title>
      <titleabbrev id="public.function.box2d-public.geometry-titleabbrev">
       box2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_BOX2DFLOAT4</programlisting>
      </para>
    </section>

<!-- Function box2d_contain(public.box2d, public.box2d) -->
    <section id="public.function.box2d-contain-public.box2d-public.box2d"
             xreflabel="publicbox2d_contain(public.box2d, public.box2d)">
      <title id="public.function.box2d-contain-public.box2d-public.box2d-title">
       box2d_contain(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-contain-public.box2d-public.box2d-titleabbrev">
       box2d_contain(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_contain</programlisting>
      </para>
    </section>

<!-- Function box2d_contained(public.box2d, public.box2d) -->
    <section id="public.function.box2d-contained-public.box2d-public.box2d"
             xreflabel="publicbox2d_contained(public.box2d, public.box2d)">
      <title id="public.function.box2d-contained-public.box2d-public.box2d-title">
       box2d_contained(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-contained-public.box2d-public.box2d-titleabbrev">
       box2d_contained(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_contained</programlisting>
      </para>
    </section>

<!-- Function box2d_in(cstring) -->
    <section id="public.function.box2d-in-cstring"
             xreflabel="publicbox2d_in(cstring)">
      <title id="public.function.box2d-in-cstring-title">
       box2d_in(cstring)
      </title>
      <titleabbrev id="public.function.box2d-in-cstring-titleabbrev">
       box2d_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_in</programlisting>
      </para>
    </section>

<!-- Function box2d_intersects(public.box2d, public.box2d) -->
    <section id="public.function.box2d-intersects-public.box2d-public.box2d"
             xreflabel="publicbox2d_intersects(public.box2d, public.box2d)">
      <title id="public.function.box2d-intersects-public.box2d-public.box2d-title">
       box2d_intersects(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-intersects-public.box2d-public.box2d-titleabbrev">
       box2d_intersects(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_intersects</programlisting>
      </para>
    </section>

<!-- Function box2d_left(public.box2d, public.box2d) -->
    <section id="public.function.box2d-left-public.box2d-public.box2d"
             xreflabel="publicbox2d_left(public.box2d, public.box2d)">
      <title id="public.function.box2d-left-public.box2d-public.box2d-title">
       box2d_left(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-left-public.box2d-public.box2d-titleabbrev">
       box2d_left(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_left</programlisting>
      </para>
    </section>

<!-- Function box2d_out(public.box2d) -->
    <section id="public.function.box2d-out-public.box2d"
             xreflabel="publicbox2d_out(public.box2d)">
      <title id="public.function.box2d-out-public.box2d-title">
       box2d_out(public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-out-public.box2d-titleabbrev">
       box2d_out(public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_out</programlisting>
      </para>
    </section>

<!-- Function box2d_overlap(public.box2d, public.box2d) -->
    <section id="public.function.box2d-overlap-public.box2d-public.box2d"
             xreflabel="publicbox2d_overlap(public.box2d, public.box2d)">
      <title id="public.function.box2d-overlap-public.box2d-public.box2d-title">
       box2d_overlap(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-overlap-public.box2d-public.box2d-titleabbrev">
       box2d_overlap(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_overlap</programlisting>
      </para>
    </section>

<!-- Function box2d_overleft(public.box2d, public.box2d) -->
    <section id="public.function.box2d-overleft-public.box2d-public.box2d"
             xreflabel="publicbox2d_overleft(public.box2d, public.box2d)">
      <title id="public.function.box2d-overleft-public.box2d-public.box2d-title">
       box2d_overleft(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-overleft-public.box2d-public.box2d-titleabbrev">
       box2d_overleft(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_overleft</programlisting>
      </para>
    </section>

<!-- Function box2d_overright(public.box2d, public.box2d) -->
    <section id="public.function.box2d-overright-public.box2d-public.box2d"
             xreflabel="publicbox2d_overright(public.box2d, public.box2d)">
      <title id="public.function.box2d-overright-public.box2d-public.box2d-title">
       box2d_overright(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-overright-public.box2d-public.box2d-titleabbrev">
       box2d_overright(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_overright</programlisting>
      </para>
    </section>

<!-- Function box2d_right(public.box2d, public.box2d) -->
    <section id="public.function.box2d-right-public.box2d-public.box2d"
             xreflabel="publicbox2d_right(public.box2d, public.box2d)">
      <title id="public.function.box2d-right-public.box2d-public.box2d-title">
       box2d_right(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-right-public.box2d-public.box2d-titleabbrev">
       box2d_right(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_right</programlisting>
      </para>
    </section>

<!-- Function box2d_same(public.box2d, public.box2d) -->
    <section id="public.function.box2d-same-public.box2d-public.box2d"
             xreflabel="publicbox2d_same(public.box2d, public.box2d)">
      <title id="public.function.box2d-same-public.box2d-public.box2d-title">
       box2d_same(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.box2d-same-public.box2d-public.box2d-titleabbrev">
       box2d_same(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_same</programlisting>
      </para>
    </section>

<!-- Function box3d(public.box2d) -->
    <section id="public.function.box3d-public.box2d"
             xreflabel="publicbox3d(public.box2d)">
      <title id="public.function.box3d-public.box2d-title">
       box3d(public.box2d)
      </title>
      <titleabbrev id="public.function.box3d-public.box2d-titleabbrev">
       box3d(public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_to_BOX3D</programlisting>
      </para>
    </section>

<!-- Function box3d(public.geometry) -->
    <section id="public.function.box3d-public.geometry"
             xreflabel="publicbox3d(public.geometry)">
      <title id="public.function.box3d-public.geometry-title">
       box3d(public.geometry)
      </title>
      <titleabbrev id="public.function.box3d-public.geometry-titleabbrev">
       box3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_BOX3D</programlisting>
      </para>
    </section>

<!-- Function box3d_in(cstring) -->
    <section id="public.function.box3d-in-cstring"
             xreflabel="publicbox3d_in(cstring)">
      <title id="public.function.box3d-in-cstring-title">
       box3d_in(cstring)
      </title>
      <titleabbrev id="public.function.box3d-in-cstring-titleabbrev">
       box3d_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_in</programlisting>
      </para>
    </section>

<!-- Function box3d_out(public.box3d) -->
    <section id="public.function.box3d-out-public.box3d"
             xreflabel="publicbox3d_out(public.box3d)">
      <title id="public.function.box3d-out-public.box3d-title">
       box3d_out(public.box3d)
      </title>
      <titleabbrev id="public.function.box3d-out-public.box3d-titleabbrev">
       box3d_out(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_out</programlisting>
      </para>
    </section>

<!-- Function box3dtobox(public.box3d) -->
    <section id="public.function.box3dtobox-public.box3d"
             xreflabel="publicbox3dtobox(public.box3d)">
      <title id="public.function.box3dtobox-public.box3d-title">
       box3dtobox(public.box3d)
      </title>
      <titleabbrev id="public.function.box3dtobox-public.box3d-titleabbrev">
       box3dtobox(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>box</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT box($1)</programlisting>
      </para>
    </section>

<!-- Function buffer(public.geometry, double precision) -->
    <section id="public.function.buffer-public.geometry-double-precision"
             xreflabel="publicbuffer(public.geometry, double precision)">
      <title id="public.function.buffer-public.geometry-double-precision-title">
       buffer(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.buffer-public.geometry-double-precision-titleabbrev">
       buffer(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>buffer</programlisting>
      </para>
    </section>

<!-- Function buffer(public.geometry, double precision, integer) -->
    <section id="public.function.buffer-public.geometry-double-precision-integer"
             xreflabel="publicbuffer(public.geometry, double precision, integer)">
      <title id="public.function.buffer-public.geometry-double-precision-integer-title">
       buffer(public.geometry, double precision, integer)
      </title>
      <titleabbrev id="public.function.buffer-public.geometry-double-precision-integer-titleabbrev">
       buffer(public.geometry, double precision, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>buffer</programlisting>
      </para>
    </section>

<!-- Function build_histogram2d(public.histogram2d, text, text) -->
    <section id="public.function.build-histogram2d-public.histogram2d-text-text"
             xreflabel="publicbuild_histogram2d(public.histogram2d, text, text)">
      <title id="public.function.build-histogram2d-public.histogram2d-text-text-title">
       build_histogram2d(public.histogram2d, text, text)
      </title>
      <titleabbrev id="public.function.build-histogram2d-public.histogram2d-text-text-titleabbrev">
       build_histogram2d(public.histogram2d, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>build_lwhistogram2d</programlisting>
      </para>
    </section>

<!-- Function build_histogram2d(public.histogram2d, text, text, text) -->
    <section id="public.function.build-histogram2d-public.histogram2d-text-text-text"
             xreflabel="publicbuild_histogram2d(public.histogram2d, text, text, text)">
      <title id="public.function.build-histogram2d-public.histogram2d-text-text-text-title">
       build_histogram2d(public.histogram2d, text, text, text)
      </title>
      <titleabbrev id="public.function.build-histogram2d-public.histogram2d-text-text-text-titleabbrev">
       build_histogram2d(public.histogram2d, text, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	EXECUTE &#39;SET local search_path = &#39;||$2||&#39;,public&#39;;
	RETURN public.build_histogram2d($1,$3,$4);
END
</programlisting>
      </para>
    </section>

<!-- Function buildarea(public.geometry) -->
    <section id="public.function.buildarea-public.geometry"
             xreflabel="publicbuildarea(public.geometry)">
      <title id="public.function.buildarea-public.geometry-title">
       buildarea(public.geometry)
      </title>
      <titleabbrev id="public.function.buildarea-public.geometry-titleabbrev">
       buildarea(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_buildarea</programlisting>
      </para>
    </section>

<!-- Function bytea(public.geometry) -->
    <section id="public.function.bytea-public.geometry"
             xreflabel="publicbytea(public.geometry)">
      <title id="public.function.bytea-public.geometry-title">
       bytea(public.geometry)
      </title>
      <titleabbrev id="public.function.bytea-public.geometry-titleabbrev">
       bytea(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_bytea</programlisting>
      </para>
    </section>

<!-- Function cache_bbox() -->
    <section id="public.function.cache-bbox"
             xreflabel="publiccache_bbox()">
      <title id="public.function.cache-bbox-title">
       cache_bbox()
      </title>
      <titleabbrev id="public.function.cache-bbox-titleabbrev">
       cache_bbox()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>cache_bbox</programlisting>
      </para>
    </section>

<!-- Function centroid(public.geometry) -->
    <section id="public.function.centroid-public.geometry"
             xreflabel="publiccentroid(public.geometry)">
      <title id="public.function.centroid-public.geometry-title">
       centroid(public.geometry)
      </title>
      <titleabbrev id="public.function.centroid-public.geometry-titleabbrev">
       centroid(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>centroid</programlisting>
      </para>
    </section>

<!-- Function checkauth(text, text) -->
    <section id="public.function.checkauth-text-text"
             xreflabel="publiccheckauth(text, text)">
      <title id="public.function.checkauth-text-text-title">
       checkauth(text, text)
      </title>
      <titleabbrev id="public.function.checkauth-text-text-titleabbrev">
       checkauth(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT CheckAuth(&#39;&#39;, $1, $2)</programlisting>
      </para>
    </section>

<!-- Function checkauth(text, text, text) -->
    <section id="public.function.checkauth-text-text-text"
             xreflabel="publiccheckauth(text, text, text)">
      <title id="public.function.checkauth-text-text-text-title">
       checkauth(text, text, text)
      </title>
      <titleabbrev id="public.function.checkauth-text-text-text-titleabbrev">
       checkauth(text, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION &#39;Long transaction support disabled, use EnableLongTransaction() to enable.&#39;;
	END IF;

	if ( $1 != &#39;&#39; ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;

	-- TODO: check for an already existing trigger ?

	EXECUTE &#39;CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON &#39; 
		|| quote_ident(schema) || &#39;.&#39; || quote_ident($2)
		||&#39; FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger(&#39;
		|| quote_literal($3) || &#39;)&#39;;

	RETURN 0;
END;
</programlisting>
      </para>
    </section>

<!-- Function checkauthtrigger() -->
    <section id="public.function.checkauthtrigger"
             xreflabel="publiccheckauthtrigger()">
      <title id="public.function.checkauthtrigger-title">
       checkauthtrigger()
      </title>
      <titleabbrev id="public.function.checkauthtrigger-titleabbrev">
       checkauthtrigger()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>check_authorization</programlisting>
      </para>
    </section>

<!-- Function chip_in(cstring) -->
    <section id="public.function.chip-in-cstring"
             xreflabel="publicchip_in(cstring)">
      <title id="public.function.chip-in-cstring-title">
       chip_in(cstring)
      </title>
      <titleabbrev id="public.function.chip-in-cstring-titleabbrev">
       chip_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>chip</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_in</programlisting>
      </para>
    </section>

<!-- Function chip_out(public.chip) -->
    <section id="public.function.chip-out-public.chip"
             xreflabel="publicchip_out(public.chip)">
      <title id="public.function.chip-out-public.chip-title">
       chip_out(public.chip)
      </title>
      <titleabbrev id="public.function.chip-out-public.chip-titleabbrev">
       chip_out(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_out</programlisting>
      </para>
    </section>

<!-- Function collect(public.geometry) -->
    <section id="public.function.collect-public.geometry"
             xreflabel="publiccollect(public.geometry)">
      <title id="public.function.collect-public.geometry-title">
       collect(public.geometry)
      </title>
      <titleabbrev id="public.function.collect-public.geometry-titleabbrev">
       collect(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function collect(public.geometry, public.geometry) -->
    <section id="public.function.collect-public.geometry-public.geometry"
             xreflabel="publiccollect(public.geometry, public.geometry)">
      <title id="public.function.collect-public.geometry-public.geometry-title">
       collect(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.collect-public.geometry-public.geometry-titleabbrev">
       collect(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_collect</programlisting>
      </para>
    </section>

<!-- Function collect_garray(public.geometry[]) -->
    <section id="public.function.collect-garray-public.geometryARRAY"
             xreflabel="publiccollect_garray(public.geometry[])">
      <title id="public.function.collect-garray-public.geometryARRAY-title">
       collect_garray(public.geometry[])
      </title>
      <titleabbrev id="public.function.collect-garray-public.geometryARRAY-titleabbrev">
       collect_garray(public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_collect_garray</programlisting>
      </para>
    </section>

<!-- Function collector(public.geometry, public.geometry) -->
    <section id="public.function.collector-public.geometry-public.geometry"
             xreflabel="publiccollector(public.geometry, public.geometry)">
      <title id="public.function.collector-public.geometry-public.geometry-title">
       collector(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.collector-public.geometry-public.geometry-titleabbrev">
       collector(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_collect</programlisting>
      </para>
    </section>

<!-- Function combine_bbox(public.box2d, public.geometry) -->
    <section id="public.function.combine-bbox-public.box2d-public.geometry"
             xreflabel="publiccombine_bbox(public.box2d, public.geometry)">
      <title id="public.function.combine-bbox-public.box2d-public.geometry-title">
       combine_bbox(public.box2d, public.geometry)
      </title>
      <titleabbrev id="public.function.combine-bbox-public.box2d-public.geometry-titleabbrev">
       combine_bbox(public.box2d, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_combine</programlisting>
      </para>
    </section>

<!-- Function combine_bbox(public.box3d, public.geometry) -->
    <section id="public.function.combine-bbox-public.box3d-public.geometry"
             xreflabel="publiccombine_bbox(public.box3d, public.geometry)">
      <title id="public.function.combine-bbox-public.box3d-public.geometry-title">
       combine_bbox(public.box3d, public.geometry)
      </title>
      <titleabbrev id="public.function.combine-bbox-public.box3d-public.geometry-titleabbrev">
       combine_bbox(public.box3d, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_combine</programlisting>
      </para>
    </section>

<!-- Function compression(public.chip) -->
    <section id="public.function.compression-public.chip"
             xreflabel="publiccompression(public.chip)">
      <title id="public.function.compression-public.chip-title">
       compression(public.chip)
      </title>
      <titleabbrev id="public.function.compression-public.chip-titleabbrev">
       compression(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getCompression</programlisting>
      </para>
    </section>

<!-- Function contains(public.geometry, public.geometry) -->
    <section id="public.function.contains-public.geometry-public.geometry"
             xreflabel="publiccontains(public.geometry, public.geometry)">
      <title id="public.function.contains-public.geometry-public.geometry-title">
       contains(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.contains-public.geometry-public.geometry-titleabbrev">
       contains(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>contains</programlisting>
      </para>
    </section>

<!-- Function convexhull(public.geometry) -->
    <section id="public.function.convexhull-public.geometry"
             xreflabel="publicconvexhull(public.geometry)">
      <title id="public.function.convexhull-public.geometry-title">
       convexhull(public.geometry)
      </title>
      <titleabbrev id="public.function.convexhull-public.geometry-titleabbrev">
       convexhull(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>convexhull</programlisting>
      </para>
    </section>

<!-- Function create_histogram2d(public.box2d, integer) -->
    <section id="public.function.create-histogram2d-public.box2d-integer"
             xreflabel="publiccreate_histogram2d(public.box2d, integer)">
      <title id="public.function.create-histogram2d-public.box2d-integer-title">
       create_histogram2d(public.box2d, integer)
      </title>
      <titleabbrev id="public.function.create-histogram2d-public.box2d-integer-titleabbrev">
       create_histogram2d(public.box2d, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>create_lwhistogram2d</programlisting>
      </para>
    </section>

<!-- Function crosses(public.geometry, public.geometry) -->
    <section id="public.function.crosses-public.geometry-public.geometry"
             xreflabel="publiccrosses(public.geometry, public.geometry)">
      <title id="public.function.crosses-public.geometry-public.geometry-title">
       crosses(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.crosses-public.geometry-public.geometry-titleabbrev">
       crosses(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>crosses</programlisting>
      </para>
    </section>

<!-- Function datatype(public.chip) -->
    <section id="public.function.datatype-public.chip"
             xreflabel="publicdatatype(public.chip)">
      <title id="public.function.datatype-public.chip-title">
       datatype(public.chip)
      </title>
      <titleabbrev id="public.function.datatype-public.chip-titleabbrev">
       datatype(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getDatatype</programlisting>
      </para>
    </section>

<!-- Function difference(public.geometry, public.geometry) -->
    <section id="public.function.difference-public.geometry-public.geometry"
             xreflabel="publicdifference(public.geometry, public.geometry)">
      <title id="public.function.difference-public.geometry-public.geometry-title">
       difference(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.difference-public.geometry-public.geometry-titleabbrev">
       difference(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>difference</programlisting>
      </para>
    </section>

<!-- Function dijkstra_sp(target character varying, source integer, geom_table integer) -->
    <section id="public.function.dijkstra-sp-target-character-varying-source-integer-geom-table-integer"
             xreflabel="publicdijkstra_sp(target character varying, source integer, geom_table integer)">
      <title id="public.function.dijkstra-sp-target-character-varying-source-integer-geom-table-integer-title">
       dijkstra_sp(target character varying, source integer, geom_table integer)
      </title>
      <titleabbrev id="public.function.dijkstra-sp-target-character-varying-source-integer-geom-table-integer-titleabbrev">
       dijkstra_sp(target character varying, source integer, geom_table integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
	r record;
	path_result record;
	v_id integer;
	e_id integer;
	geom geoms;
	id integer;
BEGIN
	
	id :=0;
	
	FOR path_result IN EXECUTE &#39;SELECT gid,the_geom FROM &#39; ||
          &#39;shortest_path(&#39;&#39;SELECT gid as id, source::integer, target::integer, &#39; || 
          &#39;length::double precision as cost FROM &#39; ||
	  quote_ident(geom_table) || &#39;&#39;&#39;, &#39; || quote_literal(source) || 
          &#39; , &#39; || quote_literal(target) || &#39; , false, false), &#39; || 
          quote_ident(geom_table) || &#39; where edge_id = gid &#39; 
        LOOP

                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;

	END LOOP;
	RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function dijkstra_sp_delta(character varying, integer, integer, double precision) -->
    <section id="public.function.dijkstra-sp-delta-character-varying-integer-integer-double-precision"
             xreflabel="publicdijkstra_sp_delta(character varying, integer, integer, double precision)">
      <title id="public.function.dijkstra-sp-delta-character-varying-integer-integer-double-precision-title">
       dijkstra_sp_delta(character varying, integer, integer, double precision)
      </title>
      <titleabbrev id="public.function.dijkstra-sp-delta-character-varying-integer-integer-double-precision-titleabbrev">
       dijkstra_sp_delta(character varying, integer, integer, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;

	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	id integer;
BEGIN
	
	id :=0;
	FOR path_result IN EXECUTE &#39;SELECT gid,the_geom FROM &#39; || 
           &#39;dijkstra_sp_delta_directed(&#39;&#39;&#39; || 
           quote_ident(geom_table) || &#39;&#39;&#39;, &#39; || quote_literal(sourceid) || &#39;, &#39; || 
	   quote_literal(targetid) || &#39;, &#39; || delta || &#39;, false, false)&#39;
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function dijkstra_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean) -->
    <section id="public.function.dijkstra-sp-delta-directed-character-varying-integer-integer-double-precision-boolean-boolean"
             xreflabel="publicdijkstra_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean)">
      <title id="public.function.dijkstra-sp-delta-directed-character-varying-integer-integer-double-precision-boolean-boolean-title">
       dijkstra_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean)
      </title>
      <titleabbrev id="public.function.dijkstra-sp-delta-directed-character-varying-integer-integer-double-precision-boolean-boolean-titleabbrev">
       dijkstra_sp_delta_directed(character varying, integer, integer, double precision, boolean, boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
	dir ALIAS FOR $5;
	rc ALIAS FOR $6;

	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;

	source_x float8;
	source_y float8;
	target_x float8;
	target_y float8;
	
	ll_x float8;
	ll_y float8;
	ur_x float8;
	ur_y float8;
	
	query text;
	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    &#39;select srid(the_geom) from &#39; ||
	    quote_ident(geom_table) || &#39; limit 1&#39;
	LOOP
	END LOOP;
	srid := rec.srid;

	FOR rec IN EXECUTE 
            &#39;select x(startpoint(the_geom)) as source_x from &#39; || 
            quote_ident(geom_table) || &#39; where source = &#39; || 
            sourceid ||  &#39; or target=&#39;||sourceid||&#39; limit 1&#39;
        LOOP
	END LOOP;
	source_x := rec.source_x;
	
	FOR rec IN EXECUTE 
            &#39;select y(startpoint(the_geom)) as source_y from &#39; || 
            quote_ident(geom_table) || &#39; where source = &#39; || 
            sourceid ||  &#39; or target=&#39;||sourceid||&#39; limit 1&#39;
        LOOP
	END LOOP;

	source_y := rec.source_y;

	FOR rec IN EXECUTE 
            &#39;select x(startpoint(the_geom)) as target_x from &#39; ||
            quote_ident(geom_table) || &#39; where source = &#39; || 
            targetid ||  &#39; or target=&#39;||targetid||&#39; limit 1&#39;
        LOOP
	END LOOP;

	target_x := rec.target_x;
	
	FOR rec IN EXECUTE 
            &#39;select y(startpoint(the_geom)) as target_y from &#39; || 
            quote_ident(geom_table) || &#39; where source = &#39; || 
            targetid ||  &#39; or target=&#39;||targetid||&#39; limit 1&#39;
        LOOP
	END LOOP;
	target_y := rec.target_y;


	FOR rec IN EXECUTE &#39;SELECT CASE WHEN &#39;||source_x||&#39;&lt;&#39;||target_x||
           &#39; THEN &#39;||source_x||&#39; ELSE &#39;||target_x||
           &#39; END as ll_x, CASE WHEN &#39;||source_x||&#39;&gt;&#39;||target_x||
           &#39; THEN &#39;||source_x||&#39; ELSE &#39;||target_x||&#39; END as ur_x&#39;
        LOOP
	END LOOP;

	ll_x := rec.ll_x;
	ur_x := rec.ur_x;

	FOR rec IN EXECUTE &#39;SELECT CASE WHEN &#39;||source_y||&#39;&lt;&#39;||
            target_y||&#39; THEN &#39;||source_y||&#39; ELSE &#39;||
            target_y||&#39; END as ll_y, CASE WHEN &#39;||
            source_y||&#39;&gt;&#39;||target_y||&#39; THEN &#39;||
            source_y||&#39; ELSE &#39;||target_y||&#39; END as ur_y&#39;
        LOOP
	END LOOP;

	ll_y := rec.ll_y;
	ur_y := rec.ur_y;

	query := &#39;SELECT gid,the_geom FROM &#39; || 
          &#39;shortest_path(&#39;&#39;SELECT gid as id, source::integer, target::integer, &#39; || 
          &#39;length::double precision as cost &#39;;
	  
	IF rc THEN query := query || &#39; , reverse_cost &#39;;
	END IF;

	query := query || &#39; FROM &#39; || quote_ident(geom_table) || &#39; where setSRID(&#39;&#39;&#39;&#39;BOX3D(&#39;||
          ll_x-delta||&#39; &#39;||ll_y-delta||&#39;,&#39;||ur_x+delta||&#39; &#39;||
          ur_y+delta||&#39;)&#39;&#39;&#39;&#39;::BOX3D, &#39; || srid || &#39;) &amp;&amp; the_geom&#39;&#39;, &#39; || 
          quote_literal(sourceid) || &#39; , &#39; || 
          quote_literal(targetid) || &#39; , &#39;&#39;&#39;||text(dir)||&#39;&#39;&#39;, &#39;&#39;&#39;||text(rc)||&#39;&#39;&#39; ), &#39; ||
          quote_ident(geom_table) || &#39; where edge_id = gid &#39;;
	  
	FOR path_result IN EXECUTE query
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function dijkstra_sp_directed(rc character varying, dir integer, target integer, source boolean, geom_table boolean) -->
    <section id="public.function.dijkstra-sp-directed-rc-character-varying-dir-integer-target-integer-source-boolean-geom-table-boolean"
             xreflabel="publicdijkstra_sp_directed(rc character varying, dir integer, target integer, source boolean, geom_table boolean)">
      <title id="public.function.dijkstra-sp-directed-rc-character-varying-dir-integer-target-integer-source-boolean-geom-table-boolean-title">
       dijkstra_sp_directed(rc character varying, dir integer, target integer, source boolean, geom_table boolean)
      </title>
      <titleabbrev id="public.function.dijkstra-sp-directed-rc-character-varying-dir-integer-target-integer-source-boolean-geom-table-boolean-titleabbrev">
       dijkstra_sp_directed(rc character varying, dir integer, target integer, source boolean, geom_table boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
	r record;
	path_result record;
	v_id integer;
	e_id integer;
	geom geoms;
	query text;
	id integer;
BEGIN
	
	id :=0;
	
	query := &#39;SELECT gid,the_geom FROM &#39; ||
          &#39;shortest_path(&#39;&#39;SELECT gid as id, source::integer, target::integer, &#39; || 
          &#39;length::double precision as cost &#39;;
	  
	IF rc THEN query := query || &#39;, reverse_cost &#39;;  
	END IF;
	
	query := query || &#39;FROM &#39; ||  quote_ident(geom_table) || &#39;&#39;&#39;, &#39; || quote_literal(source) || 
          &#39; , &#39; || quote_literal(target) || &#39; , &#39;&#39;&#39;||text(dir)||&#39;&#39;&#39;, &#39;&#39;&#39;||text(rc)||&#39;&#39;&#39;), &#39; || 
          quote_ident(geom_table) || &#39; where edge_id = gid &#39;;

	FOR path_result IN EXECUTE query
        LOOP

                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;

	END LOOP;
	RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function dimension(public.geometry) -->
    <section id="public.function.dimension-public.geometry"
             xreflabel="publicdimension(public.geometry)">
      <title id="public.function.dimension-public.geometry-title">
       dimension(public.geometry)
      </title>
      <titleabbrev id="public.function.dimension-public.geometry-titleabbrev">
       dimension(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_dimension</programlisting>
      </para>
    </section>

<!-- Function disablelongtransactions() -->
    <section id="public.function.disablelongtransactions"
             xreflabel="publicdisablelongtransactions()">
      <title id="public.function.disablelongtransactions-title">
       disablelongtransactions()
      </title>
      <titleabbrev id="public.function.disablelongtransactions-titleabbrev">
       disablelongtransactions()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	rec RECORD;

BEGIN

	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = &#39;checkauthtrigger&#39; and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE &#39;DROP TRIGGER &#39; || quote_ident(rec.tgname) ||
			&#39; ON &#39; || quote_ident(rec.relname);
	END LOOP;

	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = &#39;authorization_table&#39; LOOP
		DROP TABLE authorization_table;
	END LOOP;

	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = &#39;authorized_tables&#39; LOOP
		DROP VIEW authorized_tables;
	END LOOP;

	RETURN &#39;Long transactions support disabled&#39;;
END;
</programlisting>
      </para>
    </section>

<!-- Function disjoint(public.geometry, public.geometry) -->
    <section id="public.function.disjoint-public.geometry-public.geometry"
             xreflabel="publicdisjoint(public.geometry, public.geometry)">
      <title id="public.function.disjoint-public.geometry-public.geometry-title">
       disjoint(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.disjoint-public.geometry-public.geometry-titleabbrev">
       disjoint(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>disjoint</programlisting>
      </para>
    </section>

<!-- Function distance(public.geometry, public.geometry) -->
    <section id="public.function.distance-public.geometry-public.geometry"
             xreflabel="publicdistance(public.geometry, public.geometry)">
      <title id="public.function.distance-public.geometry-public.geometry-title">
       distance(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.distance-public.geometry-public.geometry-titleabbrev">
       distance(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_mindistance2d</programlisting>
      </para>
    </section>

<!-- Function distance_sphere(public.geometry, public.geometry) -->
    <section id="public.function.distance-sphere-public.geometry-public.geometry"
             xreflabel="publicdistance_sphere(public.geometry, public.geometry)">
      <title id="public.function.distance-sphere-public.geometry-public.geometry-title">
       distance_sphere(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.distance-sphere-public.geometry-public.geometry-titleabbrev">
       distance_sphere(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_distance_sphere</programlisting>
      </para>
    </section>

<!-- Function distance_spheroid(public.geometry, public.geometry, public.spheroid) -->
    <section id="public.function.distance-spheroid-public.geometry-public.geometry-public.spheroid"
             xreflabel="publicdistance_spheroid(public.geometry, public.geometry, public.spheroid)">
      <title id="public.function.distance-spheroid-public.geometry-public.geometry-public.spheroid-title">
       distance_spheroid(public.geometry, public.geometry, public.spheroid)
      </title>
      <titleabbrev id="public.function.distance-spheroid-public.geometry-public.geometry-public.spheroid-titleabbrev">
       distance_spheroid(public.geometry, public.geometry, public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_distance_ellipsoid_point</programlisting>
      </para>
    </section>

<!-- Function dropbbox(public.geometry) -->
    <section id="public.function.dropbbox-public.geometry"
             xreflabel="publicdropbbox(public.geometry)">
      <title id="public.function.dropbbox-public.geometry-title">
       dropbbox(public.geometry)
      </title>
      <titleabbrev id="public.function.dropbbox-public.geometry-titleabbrev">
       dropbbox(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_dropBBOX</programlisting>
      </para>
    </section>

<!-- Function dropgeometrycolumn(character varying, character varying) -->
    <section id="public.function.dropgeometrycolumn-character-varying-character-varying"
             xreflabel="publicdropgeometrycolumn(character varying, character varying)">
      <title id="public.function.dropgeometrycolumn-character-varying-character-varying-title">
       dropgeometrycolumn(character varying, character varying)
      </title>
      <titleabbrev id="public.function.dropgeometrycolumn-character-varying-character-varying-titleabbrev">
       dropgeometrycolumn(character varying, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn(&#39;&#39;,&#39;&#39;,$1,$2) into ret;
	RETURN ret;
END;
</programlisting>
      </para>
    </section>

<!-- Function dropgeometrycolumn(character varying, character varying, character varying) -->
    <section id="public.function.dropgeometrycolumn-character-varying-character-varying-character-varying"
             xreflabel="publicdropgeometrycolumn(character varying, character varying, character varying)">
      <title id="public.function.dropgeometrycolumn-character-varying-character-varying-character-varying-title">
       dropgeometrycolumn(character varying, character varying, character varying)
      </title>
      <titleabbrev id="public.function.dropgeometrycolumn-character-varying-character-varying-character-varying-titleabbrev">
       dropgeometrycolumn(character varying, character varying, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn(&#39;&#39;,$1,$2,$3) into ret;
	RETURN ret;
END;
</programlisting>
      </para>
    </section>

<!-- Function dropgeometrycolumn(character varying, character varying, character varying, character varying) -->
    <section id="public.function.dropgeometrycolumn-character-varying-character-varying-character-varying-character-varying"
             xreflabel="publicdropgeometrycolumn(character varying, character varying, character varying, character varying)">
      <title id="public.function.dropgeometrycolumn-character-varying-character-varying-character-varying-character-varying-title">
       dropgeometrycolumn(character varying, character varying, character varying, character varying)
      </title>
      <titleabbrev id="public.function.dropgeometrycolumn-character-varying-character-varying-character-varying-character-varying-titleabbrev">
       dropgeometrycolumn(character varying, character varying, character varying, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	catalog_name alias for $1; 
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	myrec RECORD;
	okay boolean;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != &#39;&#39; ) THEN
		okay = &#39;f&#39;;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := &#39;t&#39;;
		END LOOP;

		IF ( okay &lt;&gt; &#39;t&#39; ) THEN
			RAISE NOTICE &#39;Invalid schema name - using current_schema()&#39;;
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;

 	-- Find out if the column is in the geometry_columns table
	okay = &#39;f&#39;;
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := &#39;t&#39;;
	END LOOP; 
	IF (okay &lt;&gt; &#39;t&#39;) THEN 
		RAISE EXCEPTION &#39;column not found in geometry_columns table&#39;;
		RETURN &#39;f&#39;;
	END IF;

	-- Remove ref from geometry_columns table
	EXECUTE &#39;delete from geometry_columns where f_table_schema = &#39; ||
		quote_literal(real_schema) || &#39; and f_table_name = &#39; ||
		quote_literal(table_name)  || &#39; and f_geometry_column = &#39; ||
		quote_literal(column_name);
	
	-- Remove table column
	EXECUTE &#39;ALTER TABLE &#39; || quote_ident(real_schema) || &#39;.&#39; ||
		quote_ident(table_name) || &#39; DROP COLUMN &#39; ||
		quote_ident(column_name);


	RETURN real_schema || &#39;.&#39; || table_name || &#39;.&#39; || column_name ||&#39; effectively removed.&#39;;
	
END;
</programlisting>
      </para>
    </section>

<!-- Function dropgeometrytable(character varying) -->
    <section id="public.function.dropgeometrytable-character-varying"
             xreflabel="publicdropgeometrytable(character varying)">
      <title id="public.function.dropgeometrytable-character-varying-title">
       dropgeometrytable(character varying)
      </title>
      <titleabbrev id="public.function.dropgeometrytable-character-varying-titleabbrev">
       dropgeometrytable(character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT DropGeometryTable(&#39;&#39;,&#39;&#39;,$1)</programlisting>
      </para>
    </section>

<!-- Function dropgeometrytable(character varying, character varying) -->
    <section id="public.function.dropgeometrytable-character-varying-character-varying"
             xreflabel="publicdropgeometrytable(character varying, character varying)">
      <title id="public.function.dropgeometrytable-character-varying-character-varying-title">
       dropgeometrytable(character varying, character varying)
      </title>
      <titleabbrev id="public.function.dropgeometrytable-character-varying-character-varying-titleabbrev">
       dropgeometrytable(character varying, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT DropGeometryTable(&#39;&#39;,$1,$2)</programlisting>
      </para>
    </section>

<!-- Function dropgeometrytable(character varying, character varying, character varying) -->
    <section id="public.function.dropgeometrytable-character-varying-character-varying-character-varying"
             xreflabel="publicdropgeometrytable(character varying, character varying, character varying)">
      <title id="public.function.dropgeometrytable-character-varying-character-varying-character-varying-title">
       dropgeometrytable(character varying, character varying, character varying)
      </title>
      <titleabbrev id="public.function.dropgeometrytable-character-varying-character-varying-character-varying-titleabbrev">
       dropgeometrytable(character varying, character varying, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	catalog_name alias for $1; 
	schema_name alias for $2;
	table_name alias for $3;
	real_schema name;

BEGIN

	IF ( schema_name = &#39;&#39; ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;

	-- Remove refs from geometry_columns table
	EXECUTE &#39;DELETE FROM geometry_columns WHERE &#39; ||
		&#39;f_table_schema = &#39; || quote_literal(real_schema) ||
		&#39; AND &#39; ||
		&#39; f_table_name = &#39; || quote_literal(table_name);
	
	-- Remove table 
	EXECUTE &#39;DROP TABLE &#39;
		|| quote_ident(real_schema) || &#39;.&#39; ||
		quote_ident(table_name);

	RETURN
		real_schema || &#39;.&#39; ||
		table_name ||&#39; dropped.&#39;;
	
END;
</programlisting>
      </para>
    </section>

<!-- Function dump(public.geometry) -->
    <section id="public.function.dump-public.geometry"
             xreflabel="publicdump(public.geometry)">
      <title id="public.function.dump-public.geometry-title">
       dump(public.geometry)
      </title>
      <titleabbrev id="public.function.dump-public.geometry-titleabbrev">
       dump(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF geometry_dump</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_dump</programlisting>
      </para>
    </section>

<!-- Function dumprings(public.geometry) -->
    <section id="public.function.dumprings-public.geometry"
             xreflabel="publicdumprings(public.geometry)">
      <title id="public.function.dumprings-public.geometry-title">
       dumprings(public.geometry)
      </title>
      <titleabbrev id="public.function.dumprings-public.geometry-titleabbrev">
       dumprings(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF geometry_dump</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_dump_rings</programlisting>
      </para>
    </section>

<!-- Function enablelongtransactions() -->
    <section id="public.function.enablelongtransactions"
             xreflabel="publicenablelongtransactions()">
      <title id="public.function.enablelongtransactions-title">
       enablelongtransactions()
      </title>
      <titleabbrev id="public.function.enablelongtransactions-titleabbrev">
       enablelongtransactions()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	&quot;query&quot; text;
	exists bool;
	rec RECORD;

BEGIN

	exists = &#39;f&#39;;
	FOR rec IN SELECT * FROM pg_class WHERE relname = &#39;authorization_table&#39;
	LOOP
		exists = &#39;t&#39;;
	END LOOP;

	IF NOT exists
	THEN
		&quot;query&quot; = &#39;CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)&#39;;
		EXECUTE &quot;query&quot;;
	END IF;

	exists = &#39;f&#39;;
	FOR rec IN SELECT * FROM pg_class WHERE relname = &#39;authorized_tables&#39;
	LOOP
		exists = &#39;t&#39;;
	END LOOP;

	IF NOT exists THEN
		&quot;query&quot; = &#39;CREATE VIEW authorized_tables AS &#39; ||
			&#39;SELECT &#39; ||
			&#39;n.nspname as schema, &#39; ||
			&#39;c.relname as table, trim(&#39; ||
			quote_literal(chr(92) || &#39;000&#39;) ||
			&#39; from t.tgargs) as id_column &#39; ||
			&#39;FROM pg_trigger t, pg_class c, pg_proc p &#39; ||
			&#39;, pg_namespace n &#39; ||
			&#39;WHERE p.proname = &#39; || quote_literal(&#39;checkauthtrigger&#39;) ||
			&#39; AND c.relnamespace = n.oid&#39; ||
			&#39; AND t.tgfoid = p.oid and t.tgrelid = c.oid&#39;;
		EXECUTE &quot;query&quot;;
	END IF;

	RETURN &#39;Long transactions support enabled&#39;;
END;
</programlisting>
      </para>
    </section>

<!-- Function endpoint(public.geometry) -->
    <section id="public.function.endpoint-public.geometry"
             xreflabel="publicendpoint(public.geometry)">
      <title id="public.function.endpoint-public.geometry-title">
       endpoint(public.geometry)
      </title>
      <titleabbrev id="public.function.endpoint-public.geometry-titleabbrev">
       endpoint(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_endpoint_linestring</programlisting>
      </para>
    </section>

<!-- Function envelope(public.geometry) -->
    <section id="public.function.envelope-public.geometry"
             xreflabel="publicenvelope(public.geometry)">
      <title id="public.function.envelope-public.geometry-title">
       envelope(public.geometry)
      </title>
      <titleabbrev id="public.function.envelope-public.geometry-titleabbrev">
       envelope(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_envelope</programlisting>
      </para>
    </section>

<!-- Function equals(public.geometry, public.geometry) -->
    <section id="public.function.equals-public.geometry-public.geometry"
             xreflabel="publicequals(public.geometry, public.geometry)">
      <title id="public.function.equals-public.geometry-public.geometry-title">
       equals(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.equals-public.geometry-public.geometry-titleabbrev">
       equals(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>geomequals</programlisting>
      </para>
    </section>

<!-- Function estimate_histogram2d(public.histogram2d, public.box2d) -->
    <section id="public.function.estimate-histogram2d-public.histogram2d-public.box2d"
             xreflabel="publicestimate_histogram2d(public.histogram2d, public.box2d)">
      <title id="public.function.estimate-histogram2d-public.histogram2d-public.box2d-title">
       estimate_histogram2d(public.histogram2d, public.box2d)
      </title>
      <titleabbrev id="public.function.estimate-histogram2d-public.histogram2d-public.box2d-titleabbrev">
       estimate_histogram2d(public.histogram2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>estimate_lwhistogram2d</programlisting>
      </para>
    </section>

<!-- Function estimated_extent(text, text) -->
    <section id="public.function.estimated-extent-text-text"
             xreflabel="publicestimated_extent(text, text)">
      <title id="public.function.estimated-extent-text-text-title">
       estimated_extent(text, text)
      </title>
      <titleabbrev id="public.function.estimated-extent-text-text-titleabbrev">
       estimated_extent(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_estimated_extent</programlisting>
      </para>
    </section>

<!-- Function estimated_extent(text, text, text) -->
    <section id="public.function.estimated-extent-text-text-text"
             xreflabel="publicestimated_extent(text, text, text)">
      <title id="public.function.estimated-extent-text-text-text-title">
       estimated_extent(text, text, text)
      </title>
      <titleabbrev id="public.function.estimated-extent-text-text-text-titleabbrev">
       estimated_extent(text, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_estimated_extent</programlisting>
      </para>
    </section>

<!-- Function expand(public.box2d, double precision) -->
    <section id="public.function.expand-public.box2d-double-precision"
             xreflabel="publicexpand(public.box2d, double precision)">
      <title id="public.function.expand-public.box2d-double-precision-title">
       expand(public.box2d, double precision)
      </title>
      <titleabbrev id="public.function.expand-public.box2d-double-precision-titleabbrev">
       expand(public.box2d, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_expand</programlisting>
      </para>
    </section>

<!-- Function expand(public.box3d, double precision) -->
    <section id="public.function.expand-public.box3d-double-precision"
             xreflabel="publicexpand(public.box3d, double precision)">
      <title id="public.function.expand-public.box3d-double-precision-title">
       expand(public.box3d, double precision)
      </title>
      <titleabbrev id="public.function.expand-public.box3d-double-precision-titleabbrev">
       expand(public.box3d, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_expand</programlisting>
      </para>
    </section>

<!-- Function expand(public.geometry, double precision) -->
    <section id="public.function.expand-public.geometry-double-precision"
             xreflabel="publicexpand(public.geometry, double precision)">
      <title id="public.function.expand-public.geometry-double-precision-title">
       expand(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.expand-public.geometry-double-precision-titleabbrev">
       expand(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_expand</programlisting>
      </para>
    </section>

<!-- Function explode_histogram2d(public.histogram2d, text) -->
    <section id="public.function.explode-histogram2d-public.histogram2d-text"
             xreflabel="publicexplode_histogram2d(public.histogram2d, text)">
      <title id="public.function.explode-histogram2d-public.histogram2d-text-title">
       explode_histogram2d(public.histogram2d, text)
      </title>
      <titleabbrev id="public.function.explode-histogram2d-public.histogram2d-text-titleabbrev">
       explode_histogram2d(public.histogram2d, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>explode_lwhistogram2d</programlisting>
      </para>
    </section>

<!-- Function extent(public.geometry) -->
    <section id="public.function.extent-public.geometry"
             xreflabel="publicextent(public.geometry)">
      <title id="public.function.extent-public.geometry-title">
       extent(public.geometry)
      </title>
      <titleabbrev id="public.function.extent-public.geometry-titleabbrev">
       extent(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function extent3d(public.geometry) -->
    <section id="public.function.extent3d-public.geometry"
             xreflabel="publicextent3d(public.geometry)">
      <title id="public.function.extent3d-public.geometry-title">
       extent3d(public.geometry)
      </title>
      <titleabbrev id="public.function.extent3d-public.geometry-titleabbrev">
       extent3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function exteriorring(public.geometry) -->
    <section id="public.function.exteriorring-public.geometry"
             xreflabel="publicexteriorring(public.geometry)">
      <title id="public.function.exteriorring-public.geometry-title">
       exteriorring(public.geometry)
      </title>
      <titleabbrev id="public.function.exteriorring-public.geometry-titleabbrev">
       exteriorring(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_exteriorring_polygon</programlisting>
      </para>
    </section>

<!-- Function factor(public.chip) -->
    <section id="public.function.factor-public.chip"
             xreflabel="publicfactor(public.chip)">
      <title id="public.function.factor-public.chip-title">
       factor(public.chip)
      </title>
      <titleabbrev id="public.function.factor-public.chip-titleabbrev">
       factor(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getFactor</programlisting>
      </para>
    </section>

<!-- Function find_extent(text, text) -->
    <section id="public.function.find-extent-text-text"
             xreflabel="publicfind_extent(text, text)">
      <title id="public.function.find-extent-text-text-title">
       find_extent(text, text)
      </title>
      <titleabbrev id="public.function.find-extent-text-text-titleabbrev">
       find_extent(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE &#39;SELECT extent(&quot;&#39;||columnname||&#39;&quot;) FROM &quot;&#39;||tablename||&#39;&quot;&#39; LOOP
		return myrec.extent;
	END LOOP; 
END;
</programlisting>
      </para>
    </section>

<!-- Function find_extent(text, text, text) -->
    <section id="public.function.find-extent-text-text-text"
             xreflabel="publicfind_extent(text, text, text)">
      <title id="public.function.find-extent-text-text-text-title">
       find_extent(text, text, text)
      </title>
      <titleabbrev id="public.function.find-extent-text-text-text-titleabbrev">
       find_extent(text, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE &#39;SELECT extent(&quot;&#39;||columnname||&#39;&quot;) FROM &quot;&#39;||schemaname||&#39;&quot;.&quot;&#39;||tablename||&#39;&quot;&#39; LOOP
		return myrec.extent;
	END LOOP; 
END;
</programlisting>
      </para>
    </section>

<!-- Function find_srid(character varying, character varying, character varying) -->
    <section id="public.function.find-srid-character-varying-character-varying-character-varying"
             xreflabel="publicfind_srid(character varying, character varying, character varying)">
      <title id="public.function.find-srid-character-varying-character-varying-character-varying-title">
       find_srid(character varying, character varying, character varying)
      </title>
      <titleabbrev id="public.function.find-srid-character-varying-character-varying-character-varying-titleabbrev">
       find_srid(character varying, character varying, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>DECLARE
   schem text;
   tabl text;
   sr int4;
BEGIN
   IF $1 IS NULL THEN
      RAISE EXCEPTION &#39;find_srid() - schema is NULL!&#39;;
   END IF;
   IF $2 IS NULL THEN
      RAISE EXCEPTION &#39;find_srid() - table name is NULL!&#39;;
   END IF;
   IF $3 IS NULL THEN
      RAISE EXCEPTION &#39;find_srid() - column name is NULL!&#39;;
   END IF;
   schem = $1;
   tabl = $2;
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
   IF ( schem = &#39;&#39; and tabl LIKE &#39;%.%&#39; ) THEN
     schem = substr(tabl,1,strpos(tabl,&#39;.&#39;)-1);
     tabl = substr(tabl,length(schem)+2);
   ELSE
     schem = schem || &#39;%&#39;;
   END IF;

   select SRID into sr from geometry_columns where f_table_schema like schem and f_table_name = tabl and f_geometry_column = $3;
   IF NOT FOUND THEN
       RAISE EXCEPTION &#39;find_srid() - couldnt find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase missmatch?&#39;;
   END IF;
  return sr;
END;
</programlisting>
      </para>
    </section>

<!-- Function fix_geometry_columns() -->
    <section id="public.function.fix-geometry-columns"
             xreflabel="publicfix_geometry_columns()">
      <title id="public.function.fix-geometry-columns-title">
       fix_geometry_columns()
      </title>
      <titleabbrev id="public.function.fix-geometry-columns-titleabbrev">
       fix_geometry_columns()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	mislinked record;
	result text;
	linked integer;
	deleted integer;
	foundschema integer;
BEGIN

	-- Since 7.3 schema support has been added.
	-- Previous postgis versions used to put the database name in
	-- the schema column. This needs to be fixed, so we try to 
	-- set the correct schema for each geometry_colums record
	-- looking at table, column, type and srid.
	UPDATE geometry_columns SET f_table_schema = n.nspname
		FROM pg_namespace n, pg_class c, pg_attribute a,
			pg_constraint sridcheck, pg_constraint typecheck
                WHERE ( f_table_schema is NULL
		OR f_table_schema = &#39;&#39;
                OR f_table_schema NOT IN (
                        SELECT nspname::varchar
                        FROM pg_namespace nn, pg_class cc, pg_attribute aa
                        WHERE cc.relnamespace = nn.oid
                        AND cc.relname = f_table_name::name
                        AND aa.attrelid = cc.oid
                        AND aa.attname = f_geometry_column::name))
                AND f_table_name::name = c.relname
                AND c.oid = a.attrelid
                AND c.relnamespace = n.oid
                AND f_geometry_column::name = a.attname

                AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE &#39;(srid(% = %)&#39;
                AND sridcheck.consrc ~ textcat(&#39; = &#39;, srid::text)

                AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
	&#39;((geometrytype(%) = &#39;&#39;%&#39;&#39;::text) OR (% IS NULL))&#39;
                AND typecheck.consrc ~ textcat(&#39; = &#39;&#39;&#39;, type::text)

                AND NOT EXISTS (
                        SELECT oid FROM geometry_columns gc
                        WHERE c.relname::varchar = gc.f_table_name
                        AND n.nspname::varchar = gc.f_table_schema
                        AND a.attname::varchar = gc.f_geometry_column
                );

	GET DIAGNOSTICS foundschema = ROW_COUNT;

	-- no linkage to system table needed
	return &#39;fixed:&#39;||foundschema::text;

	-- fix linking to system tables
	SELECT 0 INTO linked;
	FOR mislinked in
		SELECT gc.oid as gcrec,
			a.attrelid as attrelid, a.attnum as attnum
                FROM geometry_columns gc, pg_class c,
		pg_namespace n, pg_attribute a
                WHERE ( gc.attrelid IS NULL OR gc.attrelid != a.attrelid 
			OR gc.varattnum IS NULL OR gc.varattnum != a.attnum)
                AND n.nspname = gc.f_table_schema::name
                AND c.relnamespace = n.oid
                AND c.relname = gc.f_table_name::name
                AND a.attname = f_geometry_column::name
                AND a.attrelid = c.oid
	LOOP
		UPDATE geometry_columns SET
			attrelid = mislinked.attrelid,
			varattnum = mislinked.attnum,
			stats = NULL
			WHERE geometry_columns.oid = mislinked.gcrec;
		SELECT linked+1 INTO linked;
	END LOOP; 

	-- remove stale records
	DELETE FROM geometry_columns WHERE attrelid IS NULL;

	GET DIAGNOSTICS deleted = ROW_COUNT;

	result = 
		&#39;fixed:&#39; || foundschema::text ||
		&#39; linked:&#39; || linked::text || 
		&#39; deleted:&#39; || deleted::text;

	return result;

END;
</programlisting>
      </para>
    </section>

<!-- Function force_2d(public.geometry) -->
    <section id="public.function.force-2d-public.geometry"
             xreflabel="publicforce_2d(public.geometry)">
      <title id="public.function.force-2d-public.geometry-title">
       force_2d(public.geometry)
      </title>
      <titleabbrev id="public.function.force-2d-public.geometry-titleabbrev">
       force_2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_2d</programlisting>
      </para>
    </section>

<!-- Function force_3d(public.geometry) -->
    <section id="public.function.force-3d-public.geometry"
             xreflabel="publicforce_3d(public.geometry)">
      <title id="public.function.force-3d-public.geometry-title">
       force_3d(public.geometry)
      </title>
      <titleabbrev id="public.function.force-3d-public.geometry-titleabbrev">
       force_3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_3dz</programlisting>
      </para>
    </section>

<!-- Function force_3dm(public.geometry) -->
    <section id="public.function.force-3dm-public.geometry"
             xreflabel="publicforce_3dm(public.geometry)">
      <title id="public.function.force-3dm-public.geometry-title">
       force_3dm(public.geometry)
      </title>
      <titleabbrev id="public.function.force-3dm-public.geometry-titleabbrev">
       force_3dm(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_3dm</programlisting>
      </para>
    </section>

<!-- Function force_3dz(public.geometry) -->
    <section id="public.function.force-3dz-public.geometry"
             xreflabel="publicforce_3dz(public.geometry)">
      <title id="public.function.force-3dz-public.geometry-title">
       force_3dz(public.geometry)
      </title>
      <titleabbrev id="public.function.force-3dz-public.geometry-titleabbrev">
       force_3dz(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_3dz</programlisting>
      </para>
    </section>

<!-- Function force_4d(public.geometry) -->
    <section id="public.function.force-4d-public.geometry"
             xreflabel="publicforce_4d(public.geometry)">
      <title id="public.function.force-4d-public.geometry-title">
       force_4d(public.geometry)
      </title>
      <titleabbrev id="public.function.force-4d-public.geometry-titleabbrev">
       force_4d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_4d</programlisting>
      </para>
    </section>

<!-- Function force_collection(public.geometry) -->
    <section id="public.function.force-collection-public.geometry"
             xreflabel="publicforce_collection(public.geometry)">
      <title id="public.function.force-collection-public.geometry-title">
       force_collection(public.geometry)
      </title>
      <titleabbrev id="public.function.force-collection-public.geometry-titleabbrev">
       force_collection(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_collection</programlisting>
      </para>
    </section>

<!-- Function forcerhr(public.geometry) -->
    <section id="public.function.forcerhr-public.geometry"
             xreflabel="publicforcerhr(public.geometry)">
      <title id="public.function.forcerhr-public.geometry-title">
       forcerhr(public.geometry)
      </title>
      <titleabbrev id="public.function.forcerhr-public.geometry-titleabbrev">
       forcerhr(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_forceRHR_poly</programlisting>
      </para>
    </section>

<!-- Function geom_accum(public.geometry[], public.geometry) -->
    <section id="public.function.geom-accum-public.geometryARRAY-public.geometry"
             xreflabel="publicgeom_accum(public.geometry[], public.geometry)">
      <title id="public.function.geom-accum-public.geometryARRAY-public.geometry-title">
       geom_accum(public.geometry[], public.geometry)
      </title>
      <titleabbrev id="public.function.geom-accum-public.geometryARRAY-public.geometry-titleabbrev">
       geom_accum(public.geometry[], public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_accum</programlisting>
      </para>
    </section>

<!-- Function geomcollfromtext(text) -->
    <section id="public.function.geomcollfromtext-text"
             xreflabel="publicgeomcollfromtext(text)">
      <title id="public.function.geomcollfromtext-text-title">
       geomcollfromtext(text)
      </title>
      <titleabbrev id="public.function.geomcollfromtext-text-titleabbrev">
       geomcollfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromText($1)) = &#39;GEOMETRYCOLLECTION&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function geomcollfromtext(text, integer) -->
    <section id="public.function.geomcollfromtext-text-integer"
             xreflabel="publicgeomcollfromtext(text, integer)">
      <title id="public.function.geomcollfromtext-text-integer-title">
       geomcollfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.geomcollfromtext-text-integer-titleabbrev">
       geomcollfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = &#39;GEOMETRYCOLLECTION&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function geomcollfromwkb(bytea) -->
    <section id="public.function.geomcollfromwkb-bytea"
             xreflabel="publicgeomcollfromwkb(bytea)">
      <title id="public.function.geomcollfromwkb-bytea-title">
       geomcollfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.geomcollfromwkb-bytea-titleabbrev">
       geomcollfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1)) = &#39;GEOMETRYCOLLECTION&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function geomcollfromwkb(bytea, integer) -->
    <section id="public.function.geomcollfromwkb-bytea-integer"
             xreflabel="publicgeomcollfromwkb(bytea, integer)">
      <title id="public.function.geomcollfromwkb-bytea-integer-title">
       geomcollfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.geomcollfromwkb-bytea-integer-titleabbrev">
       geomcollfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;GEOMETRYCOLLECTION&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function geometry(bytea) -->
    <section id="public.function.geometry-bytea"
             xreflabel="publicgeometry(bytea)">
      <title id="public.function.geometry-bytea-title">
       geometry(bytea)
      </title>
      <titleabbrev id="public.function.geometry-bytea-titleabbrev">
       geometry(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_from_bytea</programlisting>
      </para>
    </section>

<!-- Function geometry(public.box2d) -->
    <section id="public.function.geometry-public.box2d"
             xreflabel="publicgeometry(public.box2d)">
      <title id="public.function.geometry-public.box2d-title">
       geometry(public.box2d)
      </title>
      <titleabbrev id="public.function.geometry-public.box2d-titleabbrev">
       geometry(public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_to_LWGEOM</programlisting>
      </para>
    </section>

<!-- Function geometry(public.box3d) -->
    <section id="public.function.geometry-public.box3d"
             xreflabel="publicgeometry(public.box3d)">
      <title id="public.function.geometry-public.box3d-title">
       geometry(public.box3d)
      </title>
      <titleabbrev id="public.function.geometry-public.box3d-titleabbrev">
       geometry(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_to_LWGEOM</programlisting>
      </para>
    </section>

<!-- Function geometry(public.chip) -->
    <section id="public.function.geometry-public.chip"
             xreflabel="publicgeometry(public.chip)">
      <title id="public.function.geometry-public.chip-title">
       geometry(public.chip)
      </title>
      <titleabbrev id="public.function.geometry-public.chip-titleabbrev">
       geometry(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_to_LWGEOM</programlisting>
      </para>
    </section>

<!-- Function geometry(text) -->
    <section id="public.function.geometry-text"
             xreflabel="publicgeometry(text)">
      <title id="public.function.geometry-text-title">
       geometry(text)
      </title>
      <titleabbrev id="public.function.geometry-text-titleabbrev">
       geometry(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>parse_WKT_lwgeom</programlisting>
      </para>
    </section>

<!-- Function geometry_above(public.geometry, public.geometry) -->
    <section id="public.function.geometry-above-public.geometry-public.geometry"
             xreflabel="publicgeometry_above(public.geometry, public.geometry)">
      <title id="public.function.geometry-above-public.geometry-public.geometry-title">
       geometry_above(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-above-public.geometry-public.geometry-titleabbrev">
       geometry_above(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_above</programlisting>
      </para>
    </section>

<!-- Function geometry_analyze(internal) -->
    <section id="public.function.geometry-analyze-internal"
             xreflabel="publicgeometry_analyze(internal)">
      <title id="public.function.geometry-analyze-internal-title">
       geometry_analyze(internal)
      </title>
      <titleabbrev id="public.function.geometry-analyze-internal-titleabbrev">
       geometry_analyze(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_analyze</programlisting>
      </para>
    </section>

<!-- Function geometry_below(public.geometry, public.geometry) -->
    <section id="public.function.geometry-below-public.geometry-public.geometry"
             xreflabel="publicgeometry_below(public.geometry, public.geometry)">
      <title id="public.function.geometry-below-public.geometry-public.geometry-title">
       geometry_below(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-below-public.geometry-public.geometry-titleabbrev">
       geometry_below(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_below</programlisting>
      </para>
    </section>

<!-- Function geometry_cmp(public.geometry, public.geometry) -->
    <section id="public.function.geometry-cmp-public.geometry-public.geometry"
             xreflabel="publicgeometry_cmp(public.geometry, public.geometry)">
      <title id="public.function.geometry-cmp-public.geometry-public.geometry-title">
       geometry_cmp(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-cmp-public.geometry-public.geometry-titleabbrev">
       geometry_cmp(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_cmp</programlisting>
      </para>
    </section>

<!-- Function geometry_contain(public.geometry, public.geometry) -->
    <section id="public.function.geometry-contain-public.geometry-public.geometry"
             xreflabel="publicgeometry_contain(public.geometry, public.geometry)">
      <title id="public.function.geometry-contain-public.geometry-public.geometry-title">
       geometry_contain(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-contain-public.geometry-public.geometry-titleabbrev">
       geometry_contain(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_contain</programlisting>
      </para>
    </section>

<!-- Function geometry_contained(public.geometry, public.geometry) -->
    <section id="public.function.geometry-contained-public.geometry-public.geometry"
             xreflabel="publicgeometry_contained(public.geometry, public.geometry)">
      <title id="public.function.geometry-contained-public.geometry-public.geometry-title">
       geometry_contained(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-contained-public.geometry-public.geometry-titleabbrev">
       geometry_contained(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_contained</programlisting>
      </para>
    </section>

<!-- Function geometry_eq(public.geometry, public.geometry) -->
    <section id="public.function.geometry-eq-public.geometry-public.geometry"
             xreflabel="publicgeometry_eq(public.geometry, public.geometry)">
      <title id="public.function.geometry-eq-public.geometry-public.geometry-title">
       geometry_eq(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-eq-public.geometry-public.geometry-titleabbrev">
       geometry_eq(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_eq</programlisting>
      </para>
    </section>

<!-- Function geometry_ge(public.geometry, public.geometry) -->
    <section id="public.function.geometry-ge-public.geometry-public.geometry"
             xreflabel="publicgeometry_ge(public.geometry, public.geometry)">
      <title id="public.function.geometry-ge-public.geometry-public.geometry-title">
       geometry_ge(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-ge-public.geometry-public.geometry-titleabbrev">
       geometry_ge(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_ge</programlisting>
      </para>
    </section>

<!-- Function geometry_gt(public.geometry, public.geometry) -->
    <section id="public.function.geometry-gt-public.geometry-public.geometry"
             xreflabel="publicgeometry_gt(public.geometry, public.geometry)">
      <title id="public.function.geometry-gt-public.geometry-public.geometry-title">
       geometry_gt(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-gt-public.geometry-public.geometry-titleabbrev">
       geometry_gt(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_gt</programlisting>
      </para>
    </section>

<!-- Function geometry_in(cstring) -->
    <section id="public.function.geometry-in-cstring"
             xreflabel="publicgeometry_in(cstring)">
      <title id="public.function.geometry-in-cstring-title">
       geometry_in(cstring)
      </title>
      <titleabbrev id="public.function.geometry-in-cstring-titleabbrev">
       geometry_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_in</programlisting>
      </para>
    </section>

<!-- Function geometry_le(public.geometry, public.geometry) -->
    <section id="public.function.geometry-le-public.geometry-public.geometry"
             xreflabel="publicgeometry_le(public.geometry, public.geometry)">
      <title id="public.function.geometry-le-public.geometry-public.geometry-title">
       geometry_le(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-le-public.geometry-public.geometry-titleabbrev">
       geometry_le(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_le</programlisting>
      </para>
    </section>

<!-- Function geometry_left(public.geometry, public.geometry) -->
    <section id="public.function.geometry-left-public.geometry-public.geometry"
             xreflabel="publicgeometry_left(public.geometry, public.geometry)">
      <title id="public.function.geometry-left-public.geometry-public.geometry-title">
       geometry_left(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-left-public.geometry-public.geometry-titleabbrev">
       geometry_left(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_left</programlisting>
      </para>
    </section>

<!-- Function geometry_lt(public.geometry, public.geometry) -->
    <section id="public.function.geometry-lt-public.geometry-public.geometry"
             xreflabel="publicgeometry_lt(public.geometry, public.geometry)">
      <title id="public.function.geometry-lt-public.geometry-public.geometry-title">
       geometry_lt(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-lt-public.geometry-public.geometry-titleabbrev">
       geometry_lt(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_lt</programlisting>
      </para>
    </section>

<!-- Function geometry_out(public.geometry) -->
    <section id="public.function.geometry-out-public.geometry"
             xreflabel="publicgeometry_out(public.geometry)">
      <title id="public.function.geometry-out-public.geometry-title">
       geometry_out(public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-out-public.geometry-titleabbrev">
       geometry_out(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_out</programlisting>
      </para>
    </section>

<!-- Function geometry_overabove(public.geometry, public.geometry) -->
    <section id="public.function.geometry-overabove-public.geometry-public.geometry"
             xreflabel="publicgeometry_overabove(public.geometry, public.geometry)">
      <title id="public.function.geometry-overabove-public.geometry-public.geometry-title">
       geometry_overabove(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-overabove-public.geometry-public.geometry-titleabbrev">
       geometry_overabove(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overabove</programlisting>
      </para>
    </section>

<!-- Function geometry_overbelow(public.geometry, public.geometry) -->
    <section id="public.function.geometry-overbelow-public.geometry-public.geometry"
             xreflabel="publicgeometry_overbelow(public.geometry, public.geometry)">
      <title id="public.function.geometry-overbelow-public.geometry-public.geometry-title">
       geometry_overbelow(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-overbelow-public.geometry-public.geometry-titleabbrev">
       geometry_overbelow(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overbelow</programlisting>
      </para>
    </section>

<!-- Function geometry_overlap(public.geometry, public.geometry) -->
    <section id="public.function.geometry-overlap-public.geometry-public.geometry"
             xreflabel="publicgeometry_overlap(public.geometry, public.geometry)">
      <title id="public.function.geometry-overlap-public.geometry-public.geometry-title">
       geometry_overlap(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-overlap-public.geometry-public.geometry-titleabbrev">
       geometry_overlap(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overlap</programlisting>
      </para>
    </section>

<!-- Function geometry_overleft(public.geometry, public.geometry) -->
    <section id="public.function.geometry-overleft-public.geometry-public.geometry"
             xreflabel="publicgeometry_overleft(public.geometry, public.geometry)">
      <title id="public.function.geometry-overleft-public.geometry-public.geometry-title">
       geometry_overleft(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-overleft-public.geometry-public.geometry-titleabbrev">
       geometry_overleft(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overleft</programlisting>
      </para>
    </section>

<!-- Function geometry_overright(public.geometry, public.geometry) -->
    <section id="public.function.geometry-overright-public.geometry-public.geometry"
             xreflabel="publicgeometry_overright(public.geometry, public.geometry)">
      <title id="public.function.geometry-overright-public.geometry-public.geometry-title">
       geometry_overright(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-overright-public.geometry-public.geometry-titleabbrev">
       geometry_overright(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overright</programlisting>
      </para>
    </section>

<!-- Function geometry_recv(internal) -->
    <section id="public.function.geometry-recv-internal"
             xreflabel="publicgeometry_recv(internal)">
      <title id="public.function.geometry-recv-internal-title">
       geometry_recv(internal)
      </title>
      <titleabbrev id="public.function.geometry-recv-internal-titleabbrev">
       geometry_recv(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_recv</programlisting>
      </para>
    </section>

<!-- Function geometry_right(public.geometry, public.geometry) -->
    <section id="public.function.geometry-right-public.geometry-public.geometry"
             xreflabel="publicgeometry_right(public.geometry, public.geometry)">
      <title id="public.function.geometry-right-public.geometry-public.geometry-title">
       geometry_right(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-right-public.geometry-public.geometry-titleabbrev">
       geometry_right(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_right</programlisting>
      </para>
    </section>

<!-- Function geometry_same(public.geometry, public.geometry) -->
    <section id="public.function.geometry-same-public.geometry-public.geometry"
             xreflabel="publicgeometry_same(public.geometry, public.geometry)">
      <title id="public.function.geometry-same-public.geometry-public.geometry-title">
       geometry_same(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-same-public.geometry-public.geometry-titleabbrev">
       geometry_same(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_same</programlisting>
      </para>
    </section>

<!-- Function geometry_send(public.geometry) -->
    <section id="public.function.geometry-send-public.geometry"
             xreflabel="publicgeometry_send(public.geometry)">
      <title id="public.function.geometry-send-public.geometry-title">
       geometry_send(public.geometry)
      </title>
      <titleabbrev id="public.function.geometry-send-public.geometry-titleabbrev">
       geometry_send(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_send</programlisting>
      </para>
    </section>

<!-- Function geometryfromtext(text) -->
    <section id="public.function.geometryfromtext-text"
             xreflabel="publicgeometryfromtext(text)">
      <title id="public.function.geometryfromtext-text-title">
       geometryfromtext(text)
      </title>
      <titleabbrev id="public.function.geometryfromtext-text-titleabbrev">
       geometryfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_from_text</programlisting>
      </para>
    </section>

<!-- Function geometryfromtext(text, integer) -->
    <section id="public.function.geometryfromtext-text-integer"
             xreflabel="publicgeometryfromtext(text, integer)">
      <title id="public.function.geometryfromtext-text-integer-title">
       geometryfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.geometryfromtext-text-integer-titleabbrev">
       geometryfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_from_text</programlisting>
      </para>
    </section>

<!-- Function geometryn(public.geometry, integer) -->
    <section id="public.function.geometryn-public.geometry-integer"
             xreflabel="publicgeometryn(public.geometry, integer)">
      <title id="public.function.geometryn-public.geometry-integer-title">
       geometryn(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.geometryn-public.geometry-integer-titleabbrev">
       geometryn(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_geometryn_collection</programlisting>
      </para>
    </section>

<!-- Function geometrytype(public.geometry) -->
    <section id="public.function.geometrytype-public.geometry"
             xreflabel="publicgeometrytype(public.geometry)">
      <title id="public.function.geometrytype-public.geometry-title">
       geometrytype(public.geometry)
      </title>
      <titleabbrev id="public.function.geometrytype-public.geometry-titleabbrev">
       geometrytype(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_getTYPE</programlisting>
      </para>
    </section>

<!-- Function geomfromewkb(bytea) -->
    <section id="public.function.geomfromewkb-bytea"
             xreflabel="publicgeomfromewkb(bytea)">
      <title id="public.function.geomfromewkb-bytea-title">
       geomfromewkb(bytea)
      </title>
      <titleabbrev id="public.function.geomfromewkb-bytea-titleabbrev">
       geomfromewkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOMFromWKB</programlisting>
      </para>
    </section>

<!-- Function geomfromewkt(text) -->
    <section id="public.function.geomfromewkt-text"
             xreflabel="publicgeomfromewkt(text)">
      <title id="public.function.geomfromewkt-text-title">
       geomfromewkt(text)
      </title>
      <titleabbrev id="public.function.geomfromewkt-text-titleabbrev">
       geomfromewkt(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>parse_WKT_lwgeom</programlisting>
      </para>
    </section>

<!-- Function geomfromtext(text) -->
    <section id="public.function.geomfromtext-text"
             xreflabel="publicgeomfromtext(text)">
      <title id="public.function.geomfromtext-text-title">
       geomfromtext(text)
      </title>
      <titleabbrev id="public.function.geomfromtext-text-titleabbrev">
       geomfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT geometryfromtext($1)</programlisting>
      </para>
    </section>

<!-- Function geomfromtext(text, integer) -->
    <section id="public.function.geomfromtext-text-integer"
             xreflabel="publicgeomfromtext(text, integer)">
      <title id="public.function.geomfromtext-text-integer-title">
       geomfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.geomfromtext-text-integer-titleabbrev">
       geomfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT geometryfromtext($1, $2)</programlisting>
      </para>
    </section>

<!-- Function geomfromwkb(bytea) -->
    <section id="public.function.geomfromwkb-bytea"
             xreflabel="publicgeomfromwkb(bytea)">
      <title id="public.function.geomfromwkb-bytea-title">
       geomfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.geomfromwkb-bytea-titleabbrev">
       geomfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_from_WKB</programlisting>
      </para>
    </section>

<!-- Function geomfromwkb(bytea, integer) -->
    <section id="public.function.geomfromwkb-bytea-integer"
             xreflabel="publicgeomfromwkb(bytea, integer)">
      <title id="public.function.geomfromwkb-bytea-integer-title">
       geomfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.geomfromwkb-bytea-integer-titleabbrev">
       geomfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT setSRID(GeomFromWKB($1), $2)</programlisting>
      </para>
    </section>

<!-- Function geomunion(public.geometry) -->
    <section id="public.function.geomunion-public.geometry"
             xreflabel="publicgeomunion(public.geometry)">
      <title id="public.function.geomunion-public.geometry-title">
       geomunion(public.geometry)
      </title>
      <titleabbrev id="public.function.geomunion-public.geometry-titleabbrev">
       geomunion(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function geomunion(public.geometry, public.geometry) -->
    <section id="public.function.geomunion-public.geometry-public.geometry"
             xreflabel="publicgeomunion(public.geometry, public.geometry)">
      <title id="public.function.geomunion-public.geometry-public.geometry-title">
       geomunion(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.geomunion-public.geometry-public.geometry-titleabbrev">
       geomunion(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>geomunion</programlisting>
      </para>
    </section>

<!-- Function geosnoop(public.geometry) -->
    <section id="public.function.geosnoop-public.geometry"
             xreflabel="publicgeosnoop(public.geometry)">
      <title id="public.function.geosnoop-public.geometry-title">
       geosnoop(public.geometry)
      </title>
      <titleabbrev id="public.function.geosnoop-public.geometry-titleabbrev">
       geosnoop(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>GEOSnoop</programlisting>
      </para>
    </section>

<!-- Function get_proj4_from_srid(integer) -->
    <section id="public.function.get-proj4-from-srid-integer"
             xreflabel="publicget_proj4_from_srid(integer)">
      <title id="public.function.get-proj4-from-srid-integer-title">
       get_proj4_from_srid(integer)
      </title>
      <titleabbrev id="public.function.get-proj4-from-srid-integer-titleabbrev">
       get_proj4_from_srid(integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	RETURN proj4text::text FROM spatial_ref_sys WHERE srid= $1;
END;
</programlisting>
      </para>
    </section>

<!-- Function getbbox(public.geometry) -->
    <section id="public.function.getbbox-public.geometry"
             xreflabel="publicgetbbox(public.geometry)">
      <title id="public.function.getbbox-public.geometry-title">
       getbbox(public.geometry)
      </title>
      <titleabbrev id="public.function.getbbox-public.geometry-titleabbrev">
       getbbox(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_BOX2DFLOAT4</programlisting>
      </para>
    </section>

<!-- Function getsrid(public.geometry) -->
    <section id="public.function.getsrid-public.geometry"
             xreflabel="publicgetsrid(public.geometry)">
      <title id="public.function.getsrid-public.geometry-title">
       getsrid(public.geometry)
      </title>
      <titleabbrev id="public.function.getsrid-public.geometry-titleabbrev">
       getsrid(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_getSRID</programlisting>
      </para>
    </section>

<!-- Function gettransactionid() -->
    <section id="public.function.gettransactionid"
             xreflabel="publicgettransactionid()">
      <title id="public.function.gettransactionid-title">
       gettransactionid()
      </title>
      <titleabbrev id="public.function.gettransactionid-titleabbrev">
       gettransactionid()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>xid</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>getTransactionID</programlisting>
      </para>
    </section>

<!-- Function hasbbox(public.geometry) -->
    <section id="public.function.hasbbox-public.geometry"
             xreflabel="publichasbbox(public.geometry)">
      <title id="public.function.hasbbox-public.geometry-title">
       hasbbox(public.geometry)
      </title>
      <titleabbrev id="public.function.hasbbox-public.geometry-titleabbrev">
       hasbbox(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_hasBBOX</programlisting>
      </para>
    </section>

<!-- Function height(public.chip) -->
    <section id="public.function.height-public.chip"
             xreflabel="publicheight(public.chip)">
      <title id="public.function.height-public.chip-title">
       height(public.chip)
      </title>
      <titleabbrev id="public.function.height-public.chip-titleabbrev">
       height(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getHeight</programlisting>
      </para>
    </section>

<!-- Function histogram2d_in(cstring) -->
    <section id="public.function.histogram2d-in-cstring"
             xreflabel="publichistogram2d_in(cstring)">
      <title id="public.function.histogram2d-in-cstring-title">
       histogram2d_in(cstring)
      </title>
      <titleabbrev id="public.function.histogram2d-in-cstring-titleabbrev">
       histogram2d_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwhistogram2d_in</programlisting>
      </para>
    </section>

<!-- Function histogram2d_out(public.histogram2d) -->
    <section id="public.function.histogram2d-out-public.histogram2d"
             xreflabel="publichistogram2d_out(public.histogram2d)">
      <title id="public.function.histogram2d-out-public.histogram2d-title">
       histogram2d_out(public.histogram2d)
      </title>
      <titleabbrev id="public.function.histogram2d-out-public.histogram2d-titleabbrev">
       histogram2d_out(public.histogram2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwhistogram2d_out</programlisting>
      </para>
    </section>

<!-- Function insert_vertex(geom_id character varying, vertices_table anyelement) -->
    <section id="public.function.insert-vertex-geom-id-character-varying-vertices-table-anyelement"
             xreflabel="publicinsert_vertex(geom_id character varying, vertices_table anyelement)">
      <title id="public.function.insert-vertex-geom-id-character-varying-vertices-table-anyelement-title">
       insert_vertex(geom_id character varying, vertices_table anyelement)
      </title>
      <titleabbrev id="public.function.insert-vertex-geom-id-character-varying-vertices-table-anyelement-titleabbrev">
       insert_vertex(geom_id character varying, vertices_table anyelement)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
        vertex_id int;
        myrec record;
BEGIN
        LOOP
          FOR myrec IN EXECUTE &#39;SELECT id FROM &#39; || 
                     quote_ident(vertices_table) || 
                     &#39; WHERE geom_id = &#39; || quote_literal(geom_id)  LOOP

                        IF myrec.id IS NOT NULL THEN
                                RETURN myrec.id;
                        END IF;
          END LOOP; 
          EXECUTE &#39;INSERT INTO &#39; || quote_ident(vertices_table) || 
                  &#39; (geom_id) VALUES (&#39; || quote_literal(geom_id) || &#39;)&#39;;
        END LOOP;
END;
</programlisting>
      </para>
    </section>

<!-- Function interiorringn(public.geometry, integer) -->
    <section id="public.function.interiorringn-public.geometry-integer"
             xreflabel="publicinteriorringn(public.geometry, integer)">
      <title id="public.function.interiorringn-public.geometry-integer-title">
       interiorringn(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.interiorringn-public.geometry-integer-titleabbrev">
       interiorringn(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_interiorringn_polygon</programlisting>
      </para>
    </section>

<!-- Function intersection(public.geometry, public.geometry) -->
    <section id="public.function.intersection-public.geometry-public.geometry"
             xreflabel="publicintersection(public.geometry, public.geometry)">
      <title id="public.function.intersection-public.geometry-public.geometry-title">
       intersection(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.intersection-public.geometry-public.geometry-titleabbrev">
       intersection(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>intersection</programlisting>
      </para>
    </section>

<!-- Function intersects(public.geometry, public.geometry) -->
    <section id="public.function.intersects-public.geometry-public.geometry"
             xreflabel="publicintersects(public.geometry, public.geometry)">
      <title id="public.function.intersects-public.geometry-public.geometry-title">
       intersects(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.intersects-public.geometry-public.geometry-titleabbrev">
       intersects(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>intersects</programlisting>
      </para>
    </section>

<!-- Function isclosed(public.geometry) -->
    <section id="public.function.isclosed-public.geometry"
             xreflabel="publicisclosed(public.geometry)">
      <title id="public.function.isclosed-public.geometry-title">
       isclosed(public.geometry)
      </title>
      <titleabbrev id="public.function.isclosed-public.geometry-titleabbrev">
       isclosed(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_isclosed_linestring</programlisting>
      </para>
    </section>

<!-- Function isempty(public.geometry) -->
    <section id="public.function.isempty-public.geometry"
             xreflabel="publicisempty(public.geometry)">
      <title id="public.function.isempty-public.geometry-title">
       isempty(public.geometry)
      </title>
      <titleabbrev id="public.function.isempty-public.geometry-titleabbrev">
       isempty(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_isempty</programlisting>
      </para>
    </section>

<!-- Function isring(public.geometry) -->
    <section id="public.function.isring-public.geometry"
             xreflabel="publicisring(public.geometry)">
      <title id="public.function.isring-public.geometry-title">
       isring(public.geometry)
      </title>
      <titleabbrev id="public.function.isring-public.geometry-titleabbrev">
       isring(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>isring</programlisting>
      </para>
    </section>

<!-- Function issimple(public.geometry) -->
    <section id="public.function.issimple-public.geometry"
             xreflabel="publicissimple(public.geometry)">
      <title id="public.function.issimple-public.geometry-title">
       issimple(public.geometry)
      </title>
      <titleabbrev id="public.function.issimple-public.geometry-titleabbrev">
       issimple(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>issimple</programlisting>
      </para>
    </section>

<!-- Function isvalid(public.geometry) -->
    <section id="public.function.isvalid-public.geometry"
             xreflabel="publicisvalid(public.geometry)">
      <title id="public.function.isvalid-public.geometry-title">
       isvalid(public.geometry)
      </title>
      <titleabbrev id="public.function.isvalid-public.geometry-titleabbrev">
       isvalid(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>isvalid</programlisting>
      </para>
    </section>

<!-- Function jtsnoop(public.geometry) -->
    <section id="public.function.jtsnoop-public.geometry"
             xreflabel="publicjtsnoop(public.geometry)">
      <title id="public.function.jtsnoop-public.geometry-title">
       jtsnoop(public.geometry)
      </title>
      <titleabbrev id="public.function.jtsnoop-public.geometry-titleabbrev">
       jtsnoop(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>JTSnoop</programlisting>
      </para>
    </section>

<!-- Function length(public.geometry) -->
    <section id="public.function.length-public.geometry"
             xreflabel="publiclength(public.geometry)">
      <title id="public.function.length-public.geometry-title">
       length(public.geometry)
      </title>
      <titleabbrev id="public.function.length-public.geometry-titleabbrev">
       length(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length_linestring</programlisting>
      </para>
    </section>

<!-- Function length2d(public.geometry) -->
    <section id="public.function.length2d-public.geometry"
             xreflabel="publiclength2d(public.geometry)">
      <title id="public.function.length2d-public.geometry-title">
       length2d(public.geometry)
      </title>
      <titleabbrev id="public.function.length2d-public.geometry-titleabbrev">
       length2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length2d_linestring</programlisting>
      </para>
    </section>

<!-- Function length2d_spheroid(public.geometry, public.spheroid) -->
    <section id="public.function.length2d-spheroid-public.geometry-public.spheroid"
             xreflabel="publiclength2d_spheroid(public.geometry, public.spheroid)">
      <title id="public.function.length2d-spheroid-public.geometry-public.spheroid-title">
       length2d_spheroid(public.geometry, public.spheroid)
      </title>
      <titleabbrev id="public.function.length2d-spheroid-public.geometry-public.spheroid-titleabbrev">
       length2d_spheroid(public.geometry, public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length2d_ellipsoid_linestring</programlisting>
      </para>
    </section>

<!-- Function length3d(public.geometry) -->
    <section id="public.function.length3d-public.geometry"
             xreflabel="publiclength3d(public.geometry)">
      <title id="public.function.length3d-public.geometry-title">
       length3d(public.geometry)
      </title>
      <titleabbrev id="public.function.length3d-public.geometry-titleabbrev">
       length3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length_linestring</programlisting>
      </para>
    </section>

<!-- Function length3d_spheroid(public.geometry, public.spheroid) -->
    <section id="public.function.length3d-spheroid-public.geometry-public.spheroid"
             xreflabel="publiclength3d_spheroid(public.geometry, public.spheroid)">
      <title id="public.function.length3d-spheroid-public.geometry-public.spheroid-title">
       length3d_spheroid(public.geometry, public.spheroid)
      </title>
      <titleabbrev id="public.function.length3d-spheroid-public.geometry-public.spheroid-titleabbrev">
       length3d_spheroid(public.geometry, public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length_ellipsoid_linestring</programlisting>
      </para>
    </section>

<!-- Function length_spheroid(public.geometry, public.spheroid) -->
    <section id="public.function.length-spheroid-public.geometry-public.spheroid"
             xreflabel="publiclength_spheroid(public.geometry, public.spheroid)">
      <title id="public.function.length-spheroid-public.geometry-public.spheroid-title">
       length_spheroid(public.geometry, public.spheroid)
      </title>
      <titleabbrev id="public.function.length-spheroid-public.geometry-public.spheroid-titleabbrev">
       length_spheroid(public.geometry, public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length_ellipsoid_linestring</programlisting>
      </para>
    </section>

<!-- Function line_interpolate_point(public.geometry, double precision) -->
    <section id="public.function.line-interpolate-point-public.geometry-double-precision"
             xreflabel="publicline_interpolate_point(public.geometry, double precision)">
      <title id="public.function.line-interpolate-point-public.geometry-double-precision-title">
       line_interpolate_point(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.line-interpolate-point-public.geometry-double-precision-titleabbrev">
       line_interpolate_point(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_line_interpolate_point</programlisting>
      </para>
    </section>

<!-- Function line_locate_point(public.geometry, public.geometry) -->
    <section id="public.function.line-locate-point-public.geometry-public.geometry"
             xreflabel="publicline_locate_point(public.geometry, public.geometry)">
      <title id="public.function.line-locate-point-public.geometry-public.geometry-title">
       line_locate_point(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.line-locate-point-public.geometry-public.geometry-titleabbrev">
       line_locate_point(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_line_locate_point</programlisting>
      </para>
    </section>

<!-- Function line_substring(public.geometry, double precision, double precision) -->
    <section id="public.function.line-substring-public.geometry-double-precision-double-precision"
             xreflabel="publicline_substring(public.geometry, double precision, double precision)">
      <title id="public.function.line-substring-public.geometry-double-precision-double-precision-title">
       line_substring(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.line-substring-public.geometry-double-precision-double-precision-titleabbrev">
       line_substring(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_line_substring</programlisting>
      </para>
    </section>

<!-- Function linefrommultipoint(public.geometry) -->
    <section id="public.function.linefrommultipoint-public.geometry"
             xreflabel="publiclinefrommultipoint(public.geometry)">
      <title id="public.function.linefrommultipoint-public.geometry-title">
       linefrommultipoint(public.geometry)
      </title>
      <titleabbrev id="public.function.linefrommultipoint-public.geometry-titleabbrev">
       linefrommultipoint(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_line_from_mpoint</programlisting>
      </para>
    </section>

<!-- Function linefromtext(text) -->
    <section id="public.function.linefromtext-text"
             xreflabel="publiclinefromtext(text)">
      <title id="public.function.linefromtext-text-title">
       linefromtext(text)
      </title>
      <titleabbrev id="public.function.linefromtext-text-titleabbrev">
       linefromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;LINESTRING&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function linefromtext(text, integer) -->
    <section id="public.function.linefromtext-text-integer"
             xreflabel="publiclinefromtext(text, integer)">
      <title id="public.function.linefromtext-text-integer-title">
       linefromtext(text, integer)
      </title>
      <titleabbrev id="public.function.linefromtext-text-integer-titleabbrev">
       linefromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = &#39;LINESTRING&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function linefromwkb(bytea) -->
    <section id="public.function.linefromwkb-bytea"
             xreflabel="publiclinefromwkb(bytea)">
      <title id="public.function.linefromwkb-bytea-title">
       linefromwkb(bytea)
      </title>
      <titleabbrev id="public.function.linefromwkb-bytea-titleabbrev">
       linefromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;LINESTRING&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function linefromwkb(bytea, integer) -->
    <section id="public.function.linefromwkb-bytea-integer"
             xreflabel="publiclinefromwkb(bytea, integer)">
      <title id="public.function.linefromwkb-bytea-integer-title">
       linefromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.linefromwkb-bytea-integer-titleabbrev">
       linefromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;LINESTRING&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function linemerge(public.geometry) -->
    <section id="public.function.linemerge-public.geometry"
             xreflabel="publiclinemerge(public.geometry)">
      <title id="public.function.linemerge-public.geometry-title">
       linemerge(public.geometry)
      </title>
      <titleabbrev id="public.function.linemerge-public.geometry-titleabbrev">
       linemerge(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>linemerge</programlisting>
      </para>
    </section>

<!-- Function linestringfromtext(text) -->
    <section id="public.function.linestringfromtext-text"
             xreflabel="publiclinestringfromtext(text)">
      <title id="public.function.linestringfromtext-text-title">
       linestringfromtext(text)
      </title>
      <titleabbrev id="public.function.linestringfromtext-text-titleabbrev">
       linestringfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT LineFromText($1)</programlisting>
      </para>
    </section>

<!-- Function linestringfromtext(text, integer) -->
    <section id="public.function.linestringfromtext-text-integer"
             xreflabel="publiclinestringfromtext(text, integer)">
      <title id="public.function.linestringfromtext-text-integer-title">
       linestringfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.linestringfromtext-text-integer-titleabbrev">
       linestringfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT LineFromText($1, $2)</programlisting>
      </para>
    </section>

<!-- Function linestringfromwkb(bytea) -->
    <section id="public.function.linestringfromwkb-bytea"
             xreflabel="publiclinestringfromwkb(bytea)">
      <title id="public.function.linestringfromwkb-bytea-title">
       linestringfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.linestringfromwkb-bytea-titleabbrev">
       linestringfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;LINESTRING&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function linestringfromwkb(bytea, integer) -->
    <section id="public.function.linestringfromwkb-bytea-integer"
             xreflabel="publiclinestringfromwkb(bytea, integer)">
      <title id="public.function.linestringfromwkb-bytea-integer-title">
       linestringfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.linestringfromwkb-bytea-integer-titleabbrev">
       linestringfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;LINESTRING&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function locate_along_measure(public.geometry, double precision) -->
    <section id="public.function.locate-along-measure-public.geometry-double-precision"
             xreflabel="publiclocate_along_measure(public.geometry, double precision)">
      <title id="public.function.locate-along-measure-public.geometry-double-precision-title">
       locate_along_measure(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.locate-along-measure-public.geometry-double-precision-titleabbrev">
       locate_along_measure(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT locate_between_measures($1, $2, $2)</programlisting>
      </para>
    </section>

<!-- Function locate_between_measures(public.geometry, double precision, double precision) -->
    <section id="public.function.locate-between-measures-public.geometry-double-precision-double-precision"
             xreflabel="publiclocate_between_measures(public.geometry, double precision, double precision)">
      <title id="public.function.locate-between-measures-public.geometry-double-precision-double-precision-title">
       locate_between_measures(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.locate-between-measures-public.geometry-double-precision-double-precision-titleabbrev">
       locate_between_measures(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_locate_between_m</programlisting>
      </para>
    </section>

<!-- Function lockrow(text, text, text) -->
    <section id="public.function.lockrow-text-text-text"
             xreflabel="publiclockrow(text, text, text)">
      <title id="public.function.lockrow-text-text-text-title">
       lockrow(text, text, text)
      </title>
      <titleabbrev id="public.function.lockrow-text-text-text-titleabbrev">
       lockrow(text, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+&#39;1:00&#39;);</programlisting>
      </para>
    </section>

<!-- Function lockrow(text, text, text, text) -->
    <section id="public.function.lockrow-text-text-text-text"
             xreflabel="publiclockrow(text, text, text, text)">
      <title id="public.function.lockrow-text-text-text-text-title">
       lockrow(text, text, text, text)
      </title>
      <titleabbrev id="public.function.lockrow-text-text-text-text-titleabbrev">
       lockrow(text, text, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT LockRow($1, $2, $3, $4, now()::timestamp+&#39;1:00&#39;);</programlisting>
      </para>
    </section>

<!-- Function lockrow(text, text, text, text, timestamp without time zone) -->
    <section id="public.function.lockrow-text-text-text-text-timestamp-without-time-zone"
             xreflabel="publiclockrow(text, text, text, text, timestamp without time zone)">
      <title id="public.function.lockrow-text-text-text-text-timestamp-without-time-zone-title">
       lockrow(text, text, text, text, timestamp without time zone)
      </title>
      <titleabbrev id="public.function.lockrow-text-text-text-text-timestamp-without-time-zone-titleabbrev">
       lockrow(text, text, text, text, timestamp without time zone)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION &#39;Long transaction support disabled, use EnableLongTransaction() to enable.&#39;;
	END IF;

	EXECUTE &#39;DELETE FROM authorization_table WHERE expires &lt; now()&#39;; 

	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;

	-- RAISE NOTICE &#39;toid: %&#39;, mytoid;

	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;

	EXECUTE &#39;INSERT INTO authorization_table VALUES (&#39;||
		quote_literal(mytoid::text)||&#39;,&#39;||quote_literal(myrid)||
		&#39;,&#39;||quote_literal(expires::text)||
		&#39;,&#39;||quote_literal(authid) ||&#39;)&#39;;

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;</programlisting>
      </para>
    </section>

<!-- Function lockrow(text, text, text, timestamp without time zone) -->
    <section id="public.function.lockrow-text-text-text-timestamp-without-time-zone"
             xreflabel="publiclockrow(text, text, text, timestamp without time zone)">
      <title id="public.function.lockrow-text-text-text-timestamp-without-time-zone-title">
       lockrow(text, text, text, timestamp without time zone)
      </title>
      <titleabbrev id="public.function.lockrow-text-text-text-timestamp-without-time-zone-titleabbrev">
       lockrow(text, text, text, timestamp without time zone)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT LockRow(current_schema(), $1, $2, $3, $4);</programlisting>
      </para>
    </section>

<!-- Function longtransactionsenabled() -->
    <section id="public.function.longtransactionsenabled"
             xreflabel="publiclongtransactionsenabled()">
      <title id="public.function.longtransactionsenabled-title">
       longtransactionsenabled()
      </title>
      <titleabbrev id="public.function.longtransactionsenabled-titleabbrev">
       longtransactionsenabled()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = &#39;authorized_tables&#39;
	LOOP
		return &#39;t&#39;;
	END LOOP;
	return &#39;f&#39;;
END;
</programlisting>
      </para>
    </section>

<!-- Function lwgeom_gist_compress(internal) -->
    <section id="public.function.lwgeom-gist-compress-internal"
             xreflabel="publiclwgeom_gist_compress(internal)">
      <title id="public.function.lwgeom-gist-compress-internal-title">
       lwgeom_gist_compress(internal)
      </title>
      <titleabbrev id="public.function.lwgeom-gist-compress-internal-titleabbrev">
       lwgeom_gist_compress(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_compress</programlisting>
      </para>
    </section>

<!-- Function lwgeom_gist_consistent(internal, public.geometry, integer) -->
    <section id="public.function.lwgeom-gist-consistent-internal-public.geometry-integer"
             xreflabel="publiclwgeom_gist_consistent(internal, public.geometry, integer)">
      <title id="public.function.lwgeom-gist-consistent-internal-public.geometry-integer-title">
       lwgeom_gist_consistent(internal, public.geometry, integer)
      </title>
      <titleabbrev id="public.function.lwgeom-gist-consistent-internal-public.geometry-integer-titleabbrev">
       lwgeom_gist_consistent(internal, public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_consistent</programlisting>
      </para>
    </section>

<!-- Function lwgeom_gist_decompress(internal) -->
    <section id="public.function.lwgeom-gist-decompress-internal"
             xreflabel="publiclwgeom_gist_decompress(internal)">
      <title id="public.function.lwgeom-gist-decompress-internal-title">
       lwgeom_gist_decompress(internal)
      </title>
      <titleabbrev id="public.function.lwgeom-gist-decompress-internal-titleabbrev">
       lwgeom_gist_decompress(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_decompress</programlisting>
      </para>
    </section>

<!-- Function lwgeom_gist_penalty(internal, internal, internal) -->
    <section id="public.function.lwgeom-gist-penalty-internal-internal-internal"
             xreflabel="publiclwgeom_gist_penalty(internal, internal, internal)">
      <title id="public.function.lwgeom-gist-penalty-internal-internal-internal-title">
       lwgeom_gist_penalty(internal, internal, internal)
      </title>
      <titleabbrev id="public.function.lwgeom-gist-penalty-internal-internal-internal-titleabbrev">
       lwgeom_gist_penalty(internal, internal, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_penalty</programlisting>
      </para>
    </section>

<!-- Function lwgeom_gist_picksplit(internal, internal) -->
    <section id="public.function.lwgeom-gist-picksplit-internal-internal"
             xreflabel="publiclwgeom_gist_picksplit(internal, internal)">
      <title id="public.function.lwgeom-gist-picksplit-internal-internal-title">
       lwgeom_gist_picksplit(internal, internal)
      </title>
      <titleabbrev id="public.function.lwgeom-gist-picksplit-internal-internal-titleabbrev">
       lwgeom_gist_picksplit(internal, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_picksplit</programlisting>
      </para>
    </section>

<!-- Function lwgeom_gist_same(public.box2d, public.box2d, internal) -->
    <section id="public.function.lwgeom-gist-same-public.box2d-public.box2d-internal"
             xreflabel="publiclwgeom_gist_same(public.box2d, public.box2d, internal)">
      <title id="public.function.lwgeom-gist-same-public.box2d-public.box2d-internal-title">
       lwgeom_gist_same(public.box2d, public.box2d, internal)
      </title>
      <titleabbrev id="public.function.lwgeom-gist-same-public.box2d-public.box2d-internal-titleabbrev">
       lwgeom_gist_same(public.box2d, public.box2d, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_same</programlisting>
      </para>
    </section>

<!-- Function lwgeom_gist_union(bytea, internal) -->
    <section id="public.function.lwgeom-gist-union-bytea-internal"
             xreflabel="publiclwgeom_gist_union(bytea, internal)">
      <title id="public.function.lwgeom-gist-union-bytea-internal-title">
       lwgeom_gist_union(bytea, internal)
      </title>
      <titleabbrev id="public.function.lwgeom-gist-union-bytea-internal-titleabbrev">
       lwgeom_gist_union(bytea, internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>internal</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_union</programlisting>
      </para>
    </section>

<!-- Function m(public.geometry) -->
    <section id="public.function.m-public.geometry"
             xreflabel="publicm(public.geometry)">
      <title id="public.function.m-public.geometry-title">
       m(public.geometry)
      </title>
      <titleabbrev id="public.function.m-public.geometry-titleabbrev">
       m(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_m_point</programlisting>
      </para>
    </section>

<!-- Function makebox2d(public.geometry, public.geometry) -->
    <section id="public.function.makebox2d-public.geometry-public.geometry"
             xreflabel="publicmakebox2d(public.geometry, public.geometry)">
      <title id="public.function.makebox2d-public.geometry-public.geometry-title">
       makebox2d(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.makebox2d-public.geometry-public.geometry-titleabbrev">
       makebox2d(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_construct</programlisting>
      </para>
    </section>

<!-- Function makebox3d(public.geometry, public.geometry) -->
    <section id="public.function.makebox3d-public.geometry-public.geometry"
             xreflabel="publicmakebox3d(public.geometry, public.geometry)">
      <title id="public.function.makebox3d-public.geometry-public.geometry-title">
       makebox3d(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.makebox3d-public.geometry-public.geometry-titleabbrev">
       makebox3d(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_construct</programlisting>
      </para>
    </section>

<!-- Function makeline(public.geometry) -->
    <section id="public.function.makeline-public.geometry"
             xreflabel="publicmakeline(public.geometry)">
      <title id="public.function.makeline-public.geometry-title">
       makeline(public.geometry)
      </title>
      <titleabbrev id="public.function.makeline-public.geometry-titleabbrev">
       makeline(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function makeline(public.geometry, public.geometry) -->
    <section id="public.function.makeline-public.geometry-public.geometry"
             xreflabel="publicmakeline(public.geometry, public.geometry)">
      <title id="public.function.makeline-public.geometry-public.geometry-title">
       makeline(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.makeline-public.geometry-public.geometry-titleabbrev">
       makeline(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makeline</programlisting>
      </para>
    </section>

<!-- Function makeline_garray(public.geometry[]) -->
    <section id="public.function.makeline-garray-public.geometryARRAY"
             xreflabel="publicmakeline_garray(public.geometry[])">
      <title id="public.function.makeline-garray-public.geometryARRAY-title">
       makeline_garray(public.geometry[])
      </title>
      <titleabbrev id="public.function.makeline-garray-public.geometryARRAY-titleabbrev">
       makeline_garray(public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makeline_garray</programlisting>
      </para>
    </section>

<!-- Function makepoint(double precision, double precision) -->
    <section id="public.function.makepoint-double-precision-double-precision"
             xreflabel="publicmakepoint(double precision, double precision)">
      <title id="public.function.makepoint-double-precision-double-precision-title">
       makepoint(double precision, double precision)
      </title>
      <titleabbrev id="public.function.makepoint-double-precision-double-precision-titleabbrev">
       makepoint(double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoint</programlisting>
      </para>
    </section>

<!-- Function makepoint(double precision, double precision, double precision) -->
    <section id="public.function.makepoint-double-precision-double-precision-double-precision"
             xreflabel="publicmakepoint(double precision, double precision, double precision)">
      <title id="public.function.makepoint-double-precision-double-precision-double-precision-title">
       makepoint(double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.makepoint-double-precision-double-precision-double-precision-titleabbrev">
       makepoint(double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoint</programlisting>
      </para>
    </section>

<!-- Function makepoint(double precision, double precision, double precision, double precision) -->
    <section id="public.function.makepoint-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicmakepoint(double precision, double precision, double precision, double precision)">
      <title id="public.function.makepoint-double-precision-double-precision-double-precision-double-precision-title">
       makepoint(double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.makepoint-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       makepoint(double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoint</programlisting>
      </para>
    </section>

<!-- Function makepointm(double precision, double precision, double precision) -->
    <section id="public.function.makepointm-double-precision-double-precision-double-precision"
             xreflabel="publicmakepointm(double precision, double precision, double precision)">
      <title id="public.function.makepointm-double-precision-double-precision-double-precision-title">
       makepointm(double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.makepointm-double-precision-double-precision-double-precision-titleabbrev">
       makepointm(double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoint3dm</programlisting>
      </para>
    </section>

<!-- Function makepolygon(public.geometry) -->
    <section id="public.function.makepolygon-public.geometry"
             xreflabel="publicmakepolygon(public.geometry)">
      <title id="public.function.makepolygon-public.geometry-title">
       makepolygon(public.geometry)
      </title>
      <titleabbrev id="public.function.makepolygon-public.geometry-titleabbrev">
       makepolygon(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoly</programlisting>
      </para>
    </section>

<!-- Function makepolygon(public.geometry, public.geometry[]) -->
    <section id="public.function.makepolygon-public.geometry-public.geometryARRAY"
             xreflabel="publicmakepolygon(public.geometry, public.geometry[])">
      <title id="public.function.makepolygon-public.geometry-public.geometryARRAY-title">
       makepolygon(public.geometry, public.geometry[])
      </title>
      <titleabbrev id="public.function.makepolygon-public.geometry-public.geometryARRAY-titleabbrev">
       makepolygon(public.geometry, public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoly</programlisting>
      </para>
    </section>

<!-- Function max_distance(public.geometry, public.geometry) -->
    <section id="public.function.max-distance-public.geometry-public.geometry"
             xreflabel="publicmax_distance(public.geometry, public.geometry)">
      <title id="public.function.max-distance-public.geometry-public.geometry-title">
       max_distance(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.max-distance-public.geometry-public.geometry-titleabbrev">
       max_distance(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_maxdistance2d_linestring</programlisting>
      </para>
    </section>

<!-- Function mem_size(public.geometry) -->
    <section id="public.function.mem-size-public.geometry"
             xreflabel="publicmem_size(public.geometry)">
      <title id="public.function.mem-size-public.geometry-title">
       mem_size(public.geometry)
      </title>
      <titleabbrev id="public.function.mem-size-public.geometry-titleabbrev">
       mem_size(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_mem_size</programlisting>
      </para>
    </section>

<!-- Function memcollect(public.geometry) -->
    <section id="public.function.memcollect-public.geometry"
             xreflabel="publicmemcollect(public.geometry)">
      <title id="public.function.memcollect-public.geometry-title">
       memcollect(public.geometry)
      </title>
      <titleabbrev id="public.function.memcollect-public.geometry-titleabbrev">
       memcollect(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function memgeomunion(public.geometry) -->
    <section id="public.function.memgeomunion-public.geometry"
             xreflabel="publicmemgeomunion(public.geometry)">
      <title id="public.function.memgeomunion-public.geometry-title">
       memgeomunion(public.geometry)
      </title>
      <titleabbrev id="public.function.memgeomunion-public.geometry-titleabbrev">
       memgeomunion(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function mlinefromtext(text) -->
    <section id="public.function.mlinefromtext-text"
             xreflabel="publicmlinefromtext(text)">
      <title id="public.function.mlinefromtext-text-title">
       mlinefromtext(text)
      </title>
      <titleabbrev id="public.function.mlinefromtext-text-titleabbrev">
       mlinefromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mlinefromtext(text, integer) -->
    <section id="public.function.mlinefromtext-text-integer"
             xreflabel="publicmlinefromtext(text, integer)">
      <title id="public.function.mlinefromtext-text-integer-title">
       mlinefromtext(text, integer)
      </title>
      <titleabbrev id="public.function.mlinefromtext-text-integer-titleabbrev">
       mlinefromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mlinefromwkb(bytea) -->
    <section id="public.function.mlinefromwkb-bytea"
             xreflabel="publicmlinefromwkb(bytea)">
      <title id="public.function.mlinefromwkb-bytea-title">
       mlinefromwkb(bytea)
      </title>
      <titleabbrev id="public.function.mlinefromwkb-bytea-titleabbrev">
       mlinefromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mlinefromwkb(bytea, integer) -->
    <section id="public.function.mlinefromwkb-bytea-integer"
             xreflabel="publicmlinefromwkb(bytea, integer)">
      <title id="public.function.mlinefromwkb-bytea-integer-title">
       mlinefromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.mlinefromwkb-bytea-integer-titleabbrev">
       mlinefromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mpointfromtext(text) -->
    <section id="public.function.mpointfromtext-text"
             xreflabel="publicmpointfromtext(text)">
      <title id="public.function.mpointfromtext-text-title">
       mpointfromtext(text)
      </title>
      <titleabbrev id="public.function.mpointfromtext-text-titleabbrev">
       mpointfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;MULTIPOINT&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mpointfromtext(text, integer) -->
    <section id="public.function.mpointfromtext-text-integer"
             xreflabel="publicmpointfromtext(text, integer)">
      <title id="public.function.mpointfromtext-text-integer-title">
       mpointfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.mpointfromtext-text-integer-titleabbrev">
       mpointfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1,$2)) = &#39;MULTIPOINT&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mpointfromwkb(bytea) -->
    <section id="public.function.mpointfromwkb-bytea"
             xreflabel="publicmpointfromwkb(bytea)">
      <title id="public.function.mpointfromwkb-bytea-title">
       mpointfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.mpointfromwkb-bytea-titleabbrev">
       mpointfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTIPOINT&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mpointfromwkb(bytea, integer) -->
    <section id="public.function.mpointfromwkb-bytea-integer"
             xreflabel="publicmpointfromwkb(bytea, integer)">
      <title id="public.function.mpointfromwkb-bytea-integer-title">
       mpointfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.mpointfromwkb-bytea-integer-titleabbrev">
       mpointfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = &#39;MULTIPOINT&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mpolyfromtext(text) -->
    <section id="public.function.mpolyfromtext-text"
             xreflabel="publicmpolyfromtext(text)">
      <title id="public.function.mpolyfromtext-text-title">
       mpolyfromtext(text)
      </title>
      <titleabbrev id="public.function.mpolyfromtext-text-titleabbrev">
       mpolyfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mpolyfromtext(text, integer) -->
    <section id="public.function.mpolyfromtext-text-integer"
             xreflabel="publicmpolyfromtext(text, integer)">
      <title id="public.function.mpolyfromtext-text-integer-title">
       mpolyfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.mpolyfromtext-text-integer-titleabbrev">
       mpolyfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mpolyfromwkb(bytea) -->
    <section id="public.function.mpolyfromwkb-bytea"
             xreflabel="publicmpolyfromwkb(bytea)">
      <title id="public.function.mpolyfromwkb-bytea-title">
       mpolyfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.mpolyfromwkb-bytea-titleabbrev">
       mpolyfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function mpolyfromwkb(bytea, integer) -->
    <section id="public.function.mpolyfromwkb-bytea-integer"
             xreflabel="publicmpolyfromwkb(bytea, integer)">
      <title id="public.function.mpolyfromwkb-bytea-integer-title">
       mpolyfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.mpolyfromwkb-bytea-integer-titleabbrev">
       mpolyfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function multi(public.geometry) -->
    <section id="public.function.multi-public.geometry"
             xreflabel="publicmulti(public.geometry)">
      <title id="public.function.multi-public.geometry-title">
       multi(public.geometry)
      </title>
      <titleabbrev id="public.function.multi-public.geometry-titleabbrev">
       multi(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_multi</programlisting>
      </para>
    </section>

<!-- Function multilinefromwkb(bytea) -->
    <section id="public.function.multilinefromwkb-bytea"
             xreflabel="publicmultilinefromwkb(bytea)">
      <title id="public.function.multilinefromwkb-bytea-title">
       multilinefromwkb(bytea)
      </title>
      <titleabbrev id="public.function.multilinefromwkb-bytea-titleabbrev">
       multilinefromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function multilinefromwkb(bytea, integer) -->
    <section id="public.function.multilinefromwkb-bytea-integer"
             xreflabel="publicmultilinefromwkb(bytea, integer)">
      <title id="public.function.multilinefromwkb-bytea-integer-title">
       multilinefromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.multilinefromwkb-bytea-integer-titleabbrev">
       multilinefromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function multilinestringfromtext(text) -->
    <section id="public.function.multilinestringfromtext-text"
             xreflabel="publicmultilinestringfromtext(text)">
      <title id="public.function.multilinestringfromtext-text-title">
       multilinestringfromtext(text)
      </title>
      <titleabbrev id="public.function.multilinestringfromtext-text-titleabbrev">
       multilinestringfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MLineFromText($1)</programlisting>
      </para>
    </section>

<!-- Function multilinestringfromtext(text, integer) -->
    <section id="public.function.multilinestringfromtext-text-integer"
             xreflabel="publicmultilinestringfromtext(text, integer)">
      <title id="public.function.multilinestringfromtext-text-integer-title">
       multilinestringfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.multilinestringfromtext-text-integer-titleabbrev">
       multilinestringfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MLineFromText($1, $2)</programlisting>
      </para>
    </section>

<!-- Function multipointfromtext(text) -->
    <section id="public.function.multipointfromtext-text"
             xreflabel="publicmultipointfromtext(text)">
      <title id="public.function.multipointfromtext-text-title">
       multipointfromtext(text)
      </title>
      <titleabbrev id="public.function.multipointfromtext-text-titleabbrev">
       multipointfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MPointFromText($1)</programlisting>
      </para>
    </section>

<!-- Function multipointfromtext(text, integer) -->
    <section id="public.function.multipointfromtext-text-integer"
             xreflabel="publicmultipointfromtext(text, integer)">
      <title id="public.function.multipointfromtext-text-integer-title">
       multipointfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.multipointfromtext-text-integer-titleabbrev">
       multipointfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MPointFromText($1, $2)</programlisting>
      </para>
    </section>

<!-- Function multipointfromwkb(bytea) -->
    <section id="public.function.multipointfromwkb-bytea"
             xreflabel="publicmultipointfromwkb(bytea)">
      <title id="public.function.multipointfromwkb-bytea-title">
       multipointfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.multipointfromwkb-bytea-titleabbrev">
       multipointfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTIPOINT&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function multipointfromwkb(bytea, integer) -->
    <section id="public.function.multipointfromwkb-bytea-integer"
             xreflabel="publicmultipointfromwkb(bytea, integer)">
      <title id="public.function.multipointfromwkb-bytea-integer-title">
       multipointfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.multipointfromwkb-bytea-integer-titleabbrev">
       multipointfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = &#39;MULTIPOINT&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function multipolyfromwkb(bytea) -->
    <section id="public.function.multipolyfromwkb-bytea"
             xreflabel="publicmultipolyfromwkb(bytea)">
      <title id="public.function.multipolyfromwkb-bytea-title">
       multipolyfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.multipolyfromwkb-bytea-titleabbrev">
       multipolyfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function multipolyfromwkb(bytea, integer) -->
    <section id="public.function.multipolyfromwkb-bytea-integer"
             xreflabel="publicmultipolyfromwkb(bytea, integer)">
      <title id="public.function.multipolyfromwkb-bytea-integer-title">
       multipolyfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.multipolyfromwkb-bytea-integer-titleabbrev">
       multipolyfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function multipolygonfromtext(text) -->
    <section id="public.function.multipolygonfromtext-text"
             xreflabel="publicmultipolygonfromtext(text)">
      <title id="public.function.multipolygonfromtext-text-title">
       multipolygonfromtext(text)
      </title>
      <titleabbrev id="public.function.multipolygonfromtext-text-titleabbrev">
       multipolygonfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MPolyFromText($1)</programlisting>
      </para>
    </section>

<!-- Function multipolygonfromtext(text, integer) -->
    <section id="public.function.multipolygonfromtext-text-integer"
             xreflabel="publicmultipolygonfromtext(text, integer)">
      <title id="public.function.multipolygonfromtext-text-integer-title">
       multipolygonfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.multipolygonfromtext-text-integer-titleabbrev">
       multipolygonfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MPolyFromText($1, $2)</programlisting>
      </para>
    </section>

<!-- Function ndims(public.geometry) -->
    <section id="public.function.ndims-public.geometry"
             xreflabel="publicndims(public.geometry)">
      <title id="public.function.ndims-public.geometry-title">
       ndims(public.geometry)
      </title>
      <titleabbrev id="public.function.ndims-public.geometry-titleabbrev">
       ndims(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>smallint</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_ndims</programlisting>
      </para>
    </section>

<!-- Function noop(public.geometry) -->
    <section id="public.function.noop-public.geometry"
             xreflabel="publicnoop(public.geometry)">
      <title id="public.function.noop-public.geometry-title">
       noop(public.geometry)
      </title>
      <titleabbrev id="public.function.noop-public.geometry-titleabbrev">
       noop(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_noop</programlisting>
      </para>
    </section>

<!-- Function npoints(public.geometry) -->
    <section id="public.function.npoints-public.geometry"
             xreflabel="publicnpoints(public.geometry)">
      <title id="public.function.npoints-public.geometry-title">
       npoints(public.geometry)
      </title>
      <titleabbrev id="public.function.npoints-public.geometry-titleabbrev">
       npoints(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_npoints</programlisting>
      </para>
    </section>

<!-- Function nrings(public.geometry) -->
    <section id="public.function.nrings-public.geometry"
             xreflabel="publicnrings(public.geometry)">
      <title id="public.function.nrings-public.geometry-title">
       nrings(public.geometry)
      </title>
      <titleabbrev id="public.function.nrings-public.geometry-titleabbrev">
       nrings(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_nrings</programlisting>
      </para>
    </section>

<!-- Function numgeometries(public.geometry) -->
    <section id="public.function.numgeometries-public.geometry"
             xreflabel="publicnumgeometries(public.geometry)">
      <title id="public.function.numgeometries-public.geometry-title">
       numgeometries(public.geometry)
      </title>
      <titleabbrev id="public.function.numgeometries-public.geometry-titleabbrev">
       numgeometries(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_numgeometries_collection</programlisting>
      </para>
    </section>

<!-- Function numinteriorring(public.geometry) -->
    <section id="public.function.numinteriorring-public.geometry"
             xreflabel="publicnuminteriorring(public.geometry)">
      <title id="public.function.numinteriorring-public.geometry-title">
       numinteriorring(public.geometry)
      </title>
      <titleabbrev id="public.function.numinteriorring-public.geometry-titleabbrev">
       numinteriorring(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_numinteriorrings_polygon</programlisting>
      </para>
    </section>

<!-- Function numinteriorrings(public.geometry) -->
    <section id="public.function.numinteriorrings-public.geometry"
             xreflabel="publicnuminteriorrings(public.geometry)">
      <title id="public.function.numinteriorrings-public.geometry-title">
       numinteriorrings(public.geometry)
      </title>
      <titleabbrev id="public.function.numinteriorrings-public.geometry-titleabbrev">
       numinteriorrings(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_numinteriorrings_polygon</programlisting>
      </para>
    </section>

<!-- Function numpoints(public.geometry) -->
    <section id="public.function.numpoints-public.geometry"
             xreflabel="publicnumpoints(public.geometry)">
      <title id="public.function.numpoints-public.geometry-title">
       numpoints(public.geometry)
      </title>
      <titleabbrev id="public.function.numpoints-public.geometry-titleabbrev">
       numpoints(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_numpoints_linestring</programlisting>
      </para>
    </section>

<!-- Function overlaps(public.geometry, public.geometry) -->
    <section id="public.function.overlaps-public.geometry-public.geometry"
             xreflabel="publicoverlaps(public.geometry, public.geometry)">
      <title id="public.function.overlaps-public.geometry-public.geometry-title">
       overlaps(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.overlaps-public.geometry-public.geometry-titleabbrev">
       overlaps(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>overlaps</programlisting>
      </para>
    </section>

<!-- Function perimeter(public.geometry) -->
    <section id="public.function.perimeter-public.geometry"
             xreflabel="publicperimeter(public.geometry)">
      <title id="public.function.perimeter-public.geometry-title">
       perimeter(public.geometry)
      </title>
      <titleabbrev id="public.function.perimeter-public.geometry-titleabbrev">
       perimeter(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_perimeter_poly</programlisting>
      </para>
    </section>

<!-- Function perimeter2d(public.geometry) -->
    <section id="public.function.perimeter2d-public.geometry"
             xreflabel="publicperimeter2d(public.geometry)">
      <title id="public.function.perimeter2d-public.geometry-title">
       perimeter2d(public.geometry)
      </title>
      <titleabbrev id="public.function.perimeter2d-public.geometry-titleabbrev">
       perimeter2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_perimeter2d_poly</programlisting>
      </para>
    </section>

<!-- Function perimeter3d(public.geometry) -->
    <section id="public.function.perimeter3d-public.geometry"
             xreflabel="publicperimeter3d(public.geometry)">
      <title id="public.function.perimeter3d-public.geometry-title">
       perimeter3d(public.geometry)
      </title>
      <titleabbrev id="public.function.perimeter3d-public.geometry-titleabbrev">
       perimeter3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_perimeter_poly</programlisting>
      </para>
    </section>

<!-- Function point_inside_circle(public.geometry, double precision, double precision, double precision) -->
    <section id="public.function.point-inside-circle-public.geometry-double-precision-double-precision-double-precision"
             xreflabel="publicpoint_inside_circle(public.geometry, double precision, double precision, double precision)">
      <title id="public.function.point-inside-circle-public.geometry-double-precision-double-precision-double-precision-title">
       point_inside_circle(public.geometry, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.point-inside-circle-public.geometry-double-precision-double-precision-double-precision-titleabbrev">
       point_inside_circle(public.geometry, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_inside_circle_point</programlisting>
      </para>
    </section>

<!-- Function point_to_id(tolerance public.geometry, p double precision) -->
    <section id="public.function.point-to-id-tolerance-public.geometry-p-double-precision"
             xreflabel="publicpoint_to_id(tolerance public.geometry, p double precision)">
      <title id="public.function.point-to-id-tolerance-public.geometry-p-double-precision-title">
       point_to_id(tolerance public.geometry, p double precision)
      </title>
      <titleabbrev id="public.function.point-to-id-tolerance-public.geometry-p-double-precision-titleabbrev">
       point_to_id(tolerance public.geometry, p double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>bigint</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting> 

DECLARE
    _r record; 
    _id bigint; 
    _srid integer;
    _search_path varchar(256);
    _schema varchar(64);

BEGIN

    _search_path := setting FROM pg_settings WHERE name = &#39;search_path&#39;;
    -- assume schema to use is first in search_path (highest priority)
    _schema := split_part (_search_path, &#39;,&#39;, 1);
    _srid := Find_SRID(_schema,&#39;nodes&#39;,&#39;the_geom&#39;);

    SELECT

        Distance(the_geom,GeometryFromText( AsText(p), _srid)) AS d, id, the_geom

    INTO _r FROM nodes WHERE

        the_geom &amp;&amp; Expand(GeometryFromText(AsText(p), _srid), tolerance ) AND Distance(the_geom, GeometryFromText(AsText(p), _srid)) &lt; tolerance

    ORDER BY d LIMIT 1; IF FOUND THEN

        _id:= _r.id;

    ELSE

        INSERT INTO nodes(the_geom) VALUES (SetSRID(p,_srid)); _id:=lastval();

    END IF;

    RETURN _id;

END; </programlisting>
      </para>
    </section>

<!-- Function pointfromtext(text) -->
    <section id="public.function.pointfromtext-text"
             xreflabel="publicpointfromtext(text)">
      <title id="public.function.pointfromtext-text-title">
       pointfromtext(text)
      </title>
      <titleabbrev id="public.function.pointfromtext-text-titleabbrev">
       pointfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;POINT&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function pointfromtext(text, integer) -->
    <section id="public.function.pointfromtext-text-integer"
             xreflabel="publicpointfromtext(text, integer)">
      <title id="public.function.pointfromtext-text-integer-title">
       pointfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.pointfromtext-text-integer-titleabbrev">
       pointfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = &#39;POINT&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function pointfromwkb(bytea) -->
    <section id="public.function.pointfromwkb-bytea"
             xreflabel="publicpointfromwkb(bytea)">
      <title id="public.function.pointfromwkb-bytea-title">
       pointfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.pointfromwkb-bytea-titleabbrev">
       pointfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;POINT&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function pointfromwkb(bytea, integer) -->
    <section id="public.function.pointfromwkb-bytea-integer"
             xreflabel="publicpointfromwkb(bytea, integer)">
      <title id="public.function.pointfromwkb-bytea-integer-title">
       pointfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.pointfromwkb-bytea-integer-titleabbrev">
       pointfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;POINT&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function pointn(public.geometry, integer) -->
    <section id="public.function.pointn-public.geometry-integer"
             xreflabel="publicpointn(public.geometry, integer)">
      <title id="public.function.pointn-public.geometry-integer-title">
       pointn(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.pointn-public.geometry-integer-titleabbrev">
       pointn(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_pointn_linestring</programlisting>
      </para>
    </section>

<!-- Function pointonsurface(public.geometry) -->
    <section id="public.function.pointonsurface-public.geometry"
             xreflabel="publicpointonsurface(public.geometry)">
      <title id="public.function.pointonsurface-public.geometry-title">
       pointonsurface(public.geometry)
      </title>
      <titleabbrev id="public.function.pointonsurface-public.geometry-titleabbrev">
       pointonsurface(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>pointonsurface</programlisting>
      </para>
    </section>

<!-- Function polyfromtext(text) -->
    <section id="public.function.polyfromtext-text"
             xreflabel="publicpolyfromtext(text)">
      <title id="public.function.polyfromtext-text-title">
       polyfromtext(text)
      </title>
      <titleabbrev id="public.function.polyfromtext-text-titleabbrev">
       polyfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;POLYGON&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function polyfromtext(text, integer) -->
    <section id="public.function.polyfromtext-text-integer"
             xreflabel="publicpolyfromtext(text, integer)">
      <title id="public.function.polyfromtext-text-integer-title">
       polyfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.polyfromtext-text-integer-titleabbrev">
       polyfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = &#39;POLYGON&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function polyfromwkb(bytea) -->
    <section id="public.function.polyfromwkb-bytea"
             xreflabel="publicpolyfromwkb(bytea)">
      <title id="public.function.polyfromwkb-bytea-title">
       polyfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.polyfromwkb-bytea-titleabbrev">
       polyfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;POLYGON&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function polyfromwkb(bytea, integer) -->
    <section id="public.function.polyfromwkb-bytea-integer"
             xreflabel="publicpolyfromwkb(bytea, integer)">
      <title id="public.function.polyfromwkb-bytea-integer-title">
       polyfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.polyfromwkb-bytea-integer-titleabbrev">
       polyfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;POLYGON&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function polygonfromtext(text) -->
    <section id="public.function.polygonfromtext-text"
             xreflabel="publicpolygonfromtext(text)">
      <title id="public.function.polygonfromtext-text-title">
       polygonfromtext(text)
      </title>
      <titleabbrev id="public.function.polygonfromtext-text-titleabbrev">
       polygonfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT PolyFromText($1)</programlisting>
      </para>
    </section>

<!-- Function polygonfromtext(text, integer) -->
    <section id="public.function.polygonfromtext-text-integer"
             xreflabel="publicpolygonfromtext(text, integer)">
      <title id="public.function.polygonfromtext-text-integer-title">
       polygonfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.polygonfromtext-text-integer-titleabbrev">
       polygonfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT PolyFromText($1, $2)</programlisting>
      </para>
    </section>

<!-- Function polygonfromwkb(bytea) -->
    <section id="public.function.polygonfromwkb-bytea"
             xreflabel="publicpolygonfromwkb(bytea)">
      <title id="public.function.polygonfromwkb-bytea-title">
       polygonfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.polygonfromwkb-bytea-titleabbrev">
       polygonfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;POLYGON&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function polygonfromwkb(bytea, integer) -->
    <section id="public.function.polygonfromwkb-bytea-integer"
             xreflabel="publicpolygonfromwkb(bytea, integer)">
      <title id="public.function.polygonfromwkb-bytea-integer-title">
       polygonfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.polygonfromwkb-bytea-integer-titleabbrev">
       polygonfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = &#39;POLYGON&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function polygonize(public.geometry) -->
    <section id="public.function.polygonize-public.geometry"
             xreflabel="publicpolygonize(public.geometry)">
      <title id="public.function.polygonize-public.geometry-title">
       polygonize(public.geometry)
      </title>
      <titleabbrev id="public.function.polygonize-public.geometry-titleabbrev">
       polygonize(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function polygonize_garray(public.geometry[]) -->
    <section id="public.function.polygonize-garray-public.geometryARRAY"
             xreflabel="publicpolygonize_garray(public.geometry[])">
      <title id="public.function.polygonize-garray-public.geometryARRAY-title">
       polygonize_garray(public.geometry[])
      </title>
      <titleabbrev id="public.function.polygonize-garray-public.geometryARRAY-titleabbrev">
       polygonize_garray(public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>polygonize_garray</programlisting>
      </para>
    </section>

<!-- Function postgis_full_version() -->
    <section id="public.function.postgis-full-version"
             xreflabel="publicpostgis_full_version()">
      <title id="public.function.postgis-full-version-title">
       postgis_full_version()
      </title>
      <titleabbrev id="public.function.postgis-full-version-titleabbrev">
       postgis_full_version()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	libver text;
	projver text;
	geosver text;
	jtsver text;
	usestats bool;
	dbproc text;
	relproc text;
	fullver text;
BEGIN
	SELECT postgis_lib_version() INTO libver;
	SELECT postgis_proj_version() INTO projver;
	SELECT postgis_geos_version() INTO geosver;
	SELECT postgis_jts_version() INTO jtsver;
	SELECT postgis_uses_stats() INTO usestats;
	SELECT postgis_scripts_installed() INTO dbproc;
	SELECT postgis_scripts_released() INTO relproc;

	fullver = &#39;POSTGIS=&quot;&#39; || libver || &#39;&quot;&#39;;

	IF  geosver IS NOT NULL THEN
		fullver = fullver || &#39; GEOS=&quot;&#39; || geosver || &#39;&quot;&#39;;
	END IF;

	IF  jtsver IS NOT NULL THEN
		fullver = fullver || &#39; JTS=&quot;&#39; || jtsver || &#39;&quot;&#39;;
	END IF;

	IF  projver IS NOT NULL THEN
		fullver = fullver || &#39; PROJ=&quot;&#39; || projver || &#39;&quot;&#39;;
	END IF;

	IF usestats THEN
		fullver = fullver || &#39; USE_STATS&#39;;
	END IF;

	-- fullver = fullver || &#39; DBPROC=&quot;&#39; || dbproc || &#39;&quot;&#39;;
	-- fullver = fullver || &#39; RELPROC=&quot;&#39; || relproc || &#39;&quot;&#39;;

	IF dbproc != relproc THEN
		fullver = fullver || &#39; (procs from &#39; || dbproc || &#39; need upgrade)&#39;;
	END IF;

	RETURN fullver;
END
</programlisting>
      </para>
    </section>

<!-- Function postgis_geos_version() -->
    <section id="public.function.postgis-geos-version"
             xreflabel="publicpostgis_geos_version()">
      <title id="public.function.postgis-geos-version-title">
       postgis_geos_version()
      </title>
      <titleabbrev id="public.function.postgis-geos-version-titleabbrev">
       postgis_geos_version()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>postgis_geos_version</programlisting>
      </para>
    </section>

<!-- Function postgis_gist_joinsel(internal, oid, internal, smallint) -->
    <section id="public.function.postgis-gist-joinsel-internal-oid-internal-smallint"
             xreflabel="publicpostgis_gist_joinsel(internal, oid, internal, smallint)">
      <title id="public.function.postgis-gist-joinsel-internal-oid-internal-smallint-title">
       postgis_gist_joinsel(internal, oid, internal, smallint)
      </title>
      <titleabbrev id="public.function.postgis-gist-joinsel-internal-oid-internal-smallint-titleabbrev">
       postgis_gist_joinsel(internal, oid, internal, smallint)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_joinsel</programlisting>
      </para>
    </section>

<!-- Function postgis_gist_sel(internal, oid, internal, integer) -->
    <section id="public.function.postgis-gist-sel-internal-oid-internal-integer"
             xreflabel="publicpostgis_gist_sel(internal, oid, internal, integer)">
      <title id="public.function.postgis-gist-sel-internal-oid-internal-integer-title">
       postgis_gist_sel(internal, oid, internal, integer)
      </title>
      <titleabbrev id="public.function.postgis-gist-sel-internal-oid-internal-integer-titleabbrev">
       postgis_gist_sel(internal, oid, internal, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_sel</programlisting>
      </para>
    </section>

<!-- Function postgis_jts_version() -->
    <section id="public.function.postgis-jts-version"
             xreflabel="publicpostgis_jts_version()">
      <title id="public.function.postgis-jts-version-title">
       postgis_jts_version()
      </title>
      <titleabbrev id="public.function.postgis-jts-version-titleabbrev">
       postgis_jts_version()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>postgis_jts_version</programlisting>
      </para>
    </section>

<!-- Function postgis_lib_build_date() -->
    <section id="public.function.postgis-lib-build-date"
             xreflabel="publicpostgis_lib_build_date()">
      <title id="public.function.postgis-lib-build-date-title">
       postgis_lib_build_date()
      </title>
      <titleabbrev id="public.function.postgis-lib-build-date-titleabbrev">
       postgis_lib_build_date()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>postgis_lib_build_date</programlisting>
      </para>
    </section>

<!-- Function postgis_lib_version() -->
    <section id="public.function.postgis-lib-version"
             xreflabel="publicpostgis_lib_version()">
      <title id="public.function.postgis-lib-version-title">
       postgis_lib_version()
      </title>
      <titleabbrev id="public.function.postgis-lib-version-titleabbrev">
       postgis_lib_version()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>postgis_lib_version</programlisting>
      </para>
    </section>

<!-- Function postgis_proj_version() -->
    <section id="public.function.postgis-proj-version"
             xreflabel="publicpostgis_proj_version()">
      <title id="public.function.postgis-proj-version-title">
       postgis_proj_version()
      </title>
      <titleabbrev id="public.function.postgis-proj-version-titleabbrev">
       postgis_proj_version()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>postgis_proj_version</programlisting>
      </para>
    </section>

<!-- Function postgis_scripts_build_date() -->
    <section id="public.function.postgis-scripts-build-date"
             xreflabel="publicpostgis_scripts_build_date()">
      <title id="public.function.postgis-scripts-build-date-title">
       postgis_scripts_build_date()
      </title>
      <titleabbrev id="public.function.postgis-scripts-build-date-titleabbrev">
       postgis_scripts_build_date()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT &#39;2009-05-26 10:42:08&#39;::text AS version</programlisting>
      </para>
    </section>

<!-- Function postgis_scripts_installed() -->
    <section id="public.function.postgis-scripts-installed"
             xreflabel="publicpostgis_scripts_installed()">
      <title id="public.function.postgis-scripts-installed-title">
       postgis_scripts_installed()
      </title>
      <titleabbrev id="public.function.postgis-scripts-installed-titleabbrev">
       postgis_scripts_installed()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT &#39;1.3.6&#39;::text AS version</programlisting>
      </para>
    </section>

<!-- Function postgis_scripts_released() -->
    <section id="public.function.postgis-scripts-released"
             xreflabel="publicpostgis_scripts_released()">
      <title id="public.function.postgis-scripts-released-title">
       postgis_scripts_released()
      </title>
      <titleabbrev id="public.function.postgis-scripts-released-titleabbrev">
       postgis_scripts_released()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>postgis_scripts_released</programlisting>
      </para>
    </section>

<!-- Function postgis_uses_stats() -->
    <section id="public.function.postgis-uses-stats"
             xreflabel="publicpostgis_uses_stats()">
      <title id="public.function.postgis-uses-stats-title">
       postgis_uses_stats()
      </title>
      <titleabbrev id="public.function.postgis-uses-stats-titleabbrev">
       postgis_uses_stats()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>postgis_uses_stats</programlisting>
      </para>
    </section>

<!-- Function postgis_version() -->
    <section id="public.function.postgis-version"
             xreflabel="publicpostgis_version()">
      <title id="public.function.postgis-version-title">
       postgis_version()
      </title>
      <titleabbrev id="public.function.postgis-version-titleabbrev">
       postgis_version()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>postgis_version</programlisting>
      </para>
    </section>

<!-- Function probe_geometry_columns() -->
    <section id="public.function.probe-geometry-columns"
             xreflabel="publicprobe_geometry_columns()">
      <title id="public.function.probe-geometry-columns-title">
       probe_geometry_columns()
      </title>
      <titleabbrev id="public.function.probe-geometry-columns-titleabbrev">
       probe_geometry_columns()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	inserted integer;
	oldcount integer;
	probed integer;
	stale integer;
BEGIN

	SELECT count(*) INTO oldcount FROM geometry_columns;

	SELECT count(*) INTO probed
		FROM pg_class c, pg_attribute a, pg_type t, 
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck

		WHERE t.typname = &#39;geometry&#39;
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid

		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE &#39;(srid(&#39;||a.attname||&#39;) = %)&#39;
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
	&#39;((geometrytype(&#39;||a.attname||&#39;) = &#39;&#39;%&#39;&#39;::text) OR (% IS NULL))&#39;
		;

	INSERT INTO geometry_columns SELECT
		&#39;&#39;::varchar as f_table_catalogue,
		n.nspname::varchar as f_table_schema,
		c.relname::varchar as f_table_name,
		a.attname::varchar as f_geometry_column,
		2 as coord_dimension,
		trim(both  &#39; =)&#39; from 
			replace(replace(split_part(
				sridcheck.consrc, &#39; = &#39;, 2), &#39;)&#39;, &#39;&#39;), &#39;(&#39;, &#39;&#39;))::integer AS srid,
		trim(both &#39; =)&#39;&#39;&#39; from substr(typecheck.consrc, 
			strpos(typecheck.consrc, &#39;=&#39;),
			strpos(typecheck.consrc, &#39;::&#39;)-
			strpos(typecheck.consrc, &#39;=&#39;)
			))::varchar as type

		FROM pg_class c, pg_attribute a, pg_type t, 
			pg_namespace n,
			pg_constraint sridcheck, pg_constraint typecheck
		WHERE t.typname = &#39;geometry&#39;
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND sridcheck.connamespace = n.oid
		AND typecheck.connamespace = n.oid
		AND sridcheck.conrelid = c.oid
		AND sridcheck.consrc LIKE &#39;(srid(&#39;||a.attname||&#39;) = %)&#39;
		AND typecheck.conrelid = c.oid
		AND typecheck.consrc LIKE
	&#39;((geometrytype(&#39;||a.attname||&#39;) = &#39;&#39;%&#39;&#39;::text) OR (% IS NULL))&#39;

                AND NOT EXISTS (
                        SELECT oid FROM geometry_columns gc
                        WHERE c.relname::varchar = gc.f_table_name
                        AND n.nspname::varchar = gc.f_table_schema
                        AND a.attname::varchar = gc.f_geometry_column
                );

	GET DIAGNOSTICS inserted = ROW_COUNT;

	IF oldcount &gt; probed THEN
		stale = oldcount-probed;
	ELSE
		stale = 0;
	END IF;

        RETURN &#39;probed:&#39;||probed::text||
		&#39; inserted:&#39;||inserted::text||
		&#39; conflicts:&#39;||(probed-inserted)::text||
		&#39; stale:&#39;||stale::text;
END

</programlisting>
      </para>
    </section>

<!-- Function relate(public.geometry, public.geometry) -->
    <section id="public.function.relate-public.geometry-public.geometry"
             xreflabel="publicrelate(public.geometry, public.geometry)">
      <title id="public.function.relate-public.geometry-public.geometry-title">
       relate(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.relate-public.geometry-public.geometry-titleabbrev">
       relate(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>relate_full</programlisting>
      </para>
    </section>

<!-- Function relate(public.geometry, public.geometry, text) -->
    <section id="public.function.relate-public.geometry-public.geometry-text"
             xreflabel="publicrelate(public.geometry, public.geometry, text)">
      <title id="public.function.relate-public.geometry-public.geometry-text-title">
       relate(public.geometry, public.geometry, text)
      </title>
      <titleabbrev id="public.function.relate-public.geometry-public.geometry-text-titleabbrev">
       relate(public.geometry, public.geometry, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>relate_pattern</programlisting>
      </para>
    </section>

<!-- Function removepoint(public.geometry, integer) -->
    <section id="public.function.removepoint-public.geometry-integer"
             xreflabel="publicremovepoint(public.geometry, integer)">
      <title id="public.function.removepoint-public.geometry-integer-title">
       removepoint(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.removepoint-public.geometry-integer-titleabbrev">
       removepoint(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_removepoint</programlisting>
      </para>
    </section>

<!-- Function rename_geometry_table_constraints() -->
    <section id="public.function.rename-geometry-table-constraints"
             xreflabel="publicrename_geometry_table_constraints()">
      <title id="public.function.rename-geometry-table-constraints-title">
       rename_geometry_table_constraints()
      </title>
      <titleabbrev id="public.function.rename-geometry-table-constraints-titleabbrev">
       rename_geometry_table_constraints()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT &#39;rename_geometry_table_constraint() is obsoleted&#39;::text
</programlisting>
      </para>
    </section>

<!-- Function reverse(public.geometry) -->
    <section id="public.function.reverse-public.geometry"
             xreflabel="publicreverse(public.geometry)">
      <title id="public.function.reverse-public.geometry-title">
       reverse(public.geometry)
      </title>
      <titleabbrev id="public.function.reverse-public.geometry-titleabbrev">
       reverse(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_reverse</programlisting>
      </para>
    </section>

<!-- Function rotate(public.geometry, double precision) -->
    <section id="public.function.rotate-public.geometry-double-precision"
             xreflabel="publicrotate(public.geometry, double precision)">
      <title id="public.function.rotate-public.geometry-double-precision-title">
       rotate(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.rotate-public.geometry-double-precision-titleabbrev">
       rotate(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT rotateZ($1, $2)</programlisting>
      </para>
    </section>

<!-- Function rotatex(public.geometry, double precision) -->
    <section id="public.function.rotatex-public.geometry-double-precision"
             xreflabel="publicrotatex(public.geometry, double precision)">
      <title id="public.function.rotatex-public.geometry-double-precision-title">
       rotatex(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.rotatex-public.geometry-double-precision-titleabbrev">
       rotatex(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)</programlisting>
      </para>
    </section>

<!-- Function rotatey(public.geometry, double precision) -->
    <section id="public.function.rotatey-public.geometry-double-precision"
             xreflabel="publicrotatey(public.geometry, double precision)">
      <title id="public.function.rotatey-public.geometry-double-precision-title">
       rotatey(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.rotatey-public.geometry-double-precision-titleabbrev">
       rotatey(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)</programlisting>
      </para>
    </section>

<!-- Function rotatez(public.geometry, double precision) -->
    <section id="public.function.rotatez-public.geometry-double-precision"
             xreflabel="publicrotatez(public.geometry, double precision)">
      <title id="public.function.rotatez-public.geometry-double-precision-title">
       rotatez(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.rotatez-public.geometry-double-precision-titleabbrev">
       rotatez(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)</programlisting>
      </para>
    </section>

<!-- Function scale(public.geometry, double precision, double precision) -->
    <section id="public.function.scale-public.geometry-double-precision-double-precision"
             xreflabel="publicscale(public.geometry, double precision, double precision)">
      <title id="public.function.scale-public.geometry-double-precision-double-precision-title">
       scale(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.scale-public.geometry-double-precision-double-precision-titleabbrev">
       scale(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT scale($1, $2, $3, 1)</programlisting>
      </para>
    </section>

<!-- Function scale(public.geometry, double precision, double precision, double precision) -->
    <section id="public.function.scale-public.geometry-double-precision-double-precision-double-precision"
             xreflabel="publicscale(public.geometry, double precision, double precision, double precision)">
      <title id="public.function.scale-public.geometry-double-precision-double-precision-double-precision-title">
       scale(public.geometry, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.scale-public.geometry-double-precision-double-precision-double-precision-titleabbrev">
       scale(public.geometry, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)</programlisting>
      </para>
    </section>

<!-- Function se_envelopesintersect(public.geometry, public.geometry) -->
    <section id="public.function.se-envelopesintersect-public.geometry-public.geometry"
             xreflabel="publicse_envelopesintersect(public.geometry, public.geometry)">
      <title id="public.function.se-envelopesintersect-public.geometry-public.geometry-title">
       se_envelopesintersect(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.se-envelopesintersect-public.geometry-public.geometry-titleabbrev">
       se_envelopesintersect(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT $1 &amp;&amp; $2
	</programlisting>
      </para>
    </section>

<!-- Function se_is3d(public.geometry) -->
    <section id="public.function.se-is3d-public.geometry"
             xreflabel="publicse_is3d(public.geometry)">
      <title id="public.function.se-is3d-public.geometry-title">
       se_is3d(public.geometry)
      </title>
      <titleabbrev id="public.function.se-is3d-public.geometry-titleabbrev">
       se_is3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    SELECT CASE ST_zmflag($1)
               WHEN 0 THEN false
               WHEN 1 THEN false
               WHEN 2 THEN true
               WHEN 3 THEN true
               ELSE false
           END
	</programlisting>
      </para>
    </section>

<!-- Function se_ismeasured(public.geometry) -->
    <section id="public.function.se-ismeasured-public.geometry"
             xreflabel="publicse_ismeasured(public.geometry)">
      <title id="public.function.se-ismeasured-public.geometry-title">
       se_ismeasured(public.geometry)
      </title>
      <titleabbrev id="public.function.se-ismeasured-public.geometry-titleabbrev">
       se_ismeasured(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    SELECT CASE ST_zmflag($1)
               WHEN 0 THEN false
               WHEN 1 THEN true
               WHEN 2 THEN false
               WHEN 3 THEN true
               ELSE false
           END
	</programlisting>
      </para>
    </section>

<!-- Function se_locatealong(public.geometry, double precision) -->
    <section id="public.function.se-locatealong-public.geometry-double-precision"
             xreflabel="publicse_locatealong(public.geometry, double precision)">
      <title id="public.function.se-locatealong-public.geometry-double-precision-title">
       se_locatealong(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.se-locatealong-public.geometry-double-precision-titleabbrev">
       se_locatealong(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT locate_between_measures($1, $2, $2)</programlisting>
      </para>
    </section>

<!-- Function se_locatebetween(public.geometry, double precision, double precision) -->
    <section id="public.function.se-locatebetween-public.geometry-double-precision-double-precision"
             xreflabel="publicse_locatebetween(public.geometry, double precision, double precision)">
      <title id="public.function.se-locatebetween-public.geometry-double-precision-double-precision-title">
       se_locatebetween(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.se-locatebetween-public.geometry-double-precision-double-precision-titleabbrev">
       se_locatebetween(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_locate_between_m</programlisting>
      </para>
    </section>

<!-- Function se_m(public.geometry) -->
    <section id="public.function.se-m-public.geometry"
             xreflabel="publicse_m(public.geometry)">
      <title id="public.function.se-m-public.geometry-title">
       se_m(public.geometry)
      </title>
      <titleabbrev id="public.function.se-m-public.geometry-titleabbrev">
       se_m(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_m_point</programlisting>
      </para>
    </section>

<!-- Function se_z(public.geometry) -->
    <section id="public.function.se-z-public.geometry"
             xreflabel="publicse_z(public.geometry)">
      <title id="public.function.se-z-public.geometry-title">
       se_z(public.geometry)
      </title>
      <titleabbrev id="public.function.se-z-public.geometry-titleabbrev">
       se_z(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_z_point</programlisting>
      </para>
    </section>

<!-- Function segmentize(public.geometry, double precision) -->
    <section id="public.function.segmentize-public.geometry-double-precision"
             xreflabel="publicsegmentize(public.geometry, double precision)">
      <title id="public.function.segmentize-public.geometry-double-precision-title">
       segmentize(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.segmentize-public.geometry-double-precision-titleabbrev">
       segmentize(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_segmentize2d</programlisting>
      </para>
    </section>

<!-- Function setfactor(public.chip, real) -->
    <section id="public.function.setfactor-public.chip-real"
             xreflabel="publicsetfactor(public.chip, real)">
      <title id="public.function.setfactor-public.chip-real-title">
       setfactor(public.chip, real)
      </title>
      <titleabbrev id="public.function.setfactor-public.chip-real-titleabbrev">
       setfactor(public.chip, real)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>chip</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_setFactor</programlisting>
      </para>
    </section>

<!-- Function setpoint(public.geometry, integer, public.geometry) -->
    <section id="public.function.setpoint-public.geometry-integer-public.geometry"
             xreflabel="publicsetpoint(public.geometry, integer, public.geometry)">
      <title id="public.function.setpoint-public.geometry-integer-public.geometry-title">
       setpoint(public.geometry, integer, public.geometry)
      </title>
      <titleabbrev id="public.function.setpoint-public.geometry-integer-public.geometry-titleabbrev">
       setpoint(public.geometry, integer, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_setpoint_linestring</programlisting>
      </para>
    </section>

<!-- Function setsrid(public.chip, integer) -->
    <section id="public.function.setsrid-public.chip-integer"
             xreflabel="publicsetsrid(public.chip, integer)">
      <title id="public.function.setsrid-public.chip-integer-title">
       setsrid(public.chip, integer)
      </title>
      <titleabbrev id="public.function.setsrid-public.chip-integer-titleabbrev">
       setsrid(public.chip, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>chip</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_setSRID</programlisting>
      </para>
    </section>

<!-- Function setsrid(public.geometry, integer) -->
    <section id="public.function.setsrid-public.geometry-integer"
             xreflabel="publicsetsrid(public.geometry, integer)">
      <title id="public.function.setsrid-public.geometry-integer-title">
       setsrid(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.setsrid-public.geometry-integer-titleabbrev">
       setsrid(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_setSRID</programlisting>
      </para>
    </section>

<!-- Function shift_longitude(public.geometry) -->
    <section id="public.function.shift-longitude-public.geometry"
             xreflabel="publicshift_longitude(public.geometry)">
      <title id="public.function.shift-longitude-public.geometry-title">
       shift_longitude(public.geometry)
      </title>
      <titleabbrev id="public.function.shift-longitude-public.geometry-titleabbrev">
       shift_longitude(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_longitude_shift</programlisting>
      </para>
    </section>

<!-- Function shootingstar_sp(character varying, integer, integer, double precision, character varying, boolean, boolean) -->
    <section id="public.function.shootingstar-sp-character-varying-integer-integer-double-precision-character-varying-boolean-boolean"
             xreflabel="publicshootingstar_sp(character varying, integer, integer, double precision, character varying, boolean, boolean)">
      <title id="public.function.shootingstar-sp-character-varying-integer-integer-double-precision-character-varying-boolean-boolean-title">
       shootingstar_sp(character varying, integer, integer, double precision, character varying, boolean, boolean)
      </title>
      <titleabbrev id="public.function.shootingstar-sp-character-varying-integer-integer-double-precision-character-varying-boolean-boolean-titleabbrev">
       shootingstar_sp(character varying, integer, integer, double precision, character varying, boolean, boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>SET OF geoms</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
        geom_table ALIAS FOR $1;
	sourceid ALIAS FOR $2;
	targetid ALIAS FOR $3;
	delta ALIAS FOR $4;
        cost_column ALIAS FOR $5;
	dir ALIAS FOR $6;
	rc ALIAS FOR $7;

	rec record;
	r record;
        path_result record;
        v_id integer;
        e_id integer;
        geom geoms;
	
	srid integer;

	source_x float8;
	source_y float8;
	target_x float8;
	target_y float8;
	
	ll_x float8;
	ll_y float8;
	ur_x float8;
	ur_y float8;
	
	query text;

	id integer;
BEGIN
	
	id :=0;
	FOR rec IN EXECUTE
	    &#39;select srid(the_geom) from &#39; ||
	    quote_ident(geom_table) || &#39; limit 1&#39;
	LOOP
	END LOOP;
	srid := rec.srid;
	
	FOR rec IN EXECUTE 
            &#39;select x(startpoint(the_geom)) as source_x from &#39; || 
            quote_ident(geom_table) || &#39; where gid = &#39;||sourceid
        LOOP
	END LOOP;
	source_x := rec.source_x;
	
	FOR rec IN EXECUTE 
            &#39;select y(startpoint(the_geom)) as source_y from &#39; || 
            quote_ident(geom_table) || &#39; where gid = &#39; ||sourceid
        LOOP
	END LOOP;

	source_y := rec.source_y;

	FOR rec IN EXECUTE 
            &#39;select x(startpoint(the_geom)) as target_x from &#39; ||
            quote_ident(geom_table) || &#39; where gid = &#39; ||targetid
        LOOP
	END LOOP;

	target_x := rec.target_x;
	
	FOR rec IN EXECUTE 
            &#39;select y(startpoint(the_geom)) as target_y from &#39; || 
            quote_ident(geom_table) || &#39; where gid = &#39; ||targetid
        LOOP
	END LOOP;
	target_y := rec.target_y;

	FOR rec IN EXECUTE &#39;SELECT CASE WHEN &#39;||source_x||&#39;&lt;&#39;||target_x||
           &#39; THEN &#39;||source_x||&#39; ELSE &#39;||target_x||
           &#39; END as ll_x, CASE WHEN &#39;||source_x||&#39;&gt;&#39;||target_x||
           &#39; THEN &#39;||source_x||&#39; ELSE &#39;||target_x||&#39; END as ur_x&#39;
        LOOP
	END LOOP;

	ll_x := rec.ll_x;
	ur_x := rec.ur_x;

	FOR rec IN EXECUTE &#39;SELECT CASE WHEN &#39;||source_y||&#39;&lt;&#39;||
            target_y||&#39; THEN &#39;||source_y||&#39; ELSE &#39;||
            target_y||&#39; END as ll_y, CASE WHEN &#39;||
            source_y||&#39;&gt;&#39;||target_y||&#39; THEN &#39;||
            source_y||&#39; ELSE &#39;||target_y||&#39; END as ur_y&#39;
        LOOP
	END LOOP;

	ll_y := rec.ll_y;
	ur_y := rec.ur_y;

	query := &#39;SELECT gid,the_geom FROM &#39; || 
          &#39;shortest_path_shooting_star(&#39;&#39;SELECT gid as id, source::integer, &#39; || 
          &#39;target::integer, &#39;||cost_column||&#39;::double precision as cost, &#39; || 
          &#39;x1::double precision, y1::double precision, x2::double &#39; ||
          &#39;precision, y2::double precision, rule::varchar, &#39; ||
	  &#39;to_cost::double precision &#39;;
	  
	IF rc THEN query := query || &#39; , reverse_cost &#39;;  
	END IF;
	  
	query := query || &#39;FROM &#39; || quote_ident(geom_table) || &#39; where setSRID(&#39;&#39;&#39;&#39;BOX3D(&#39;||
          ll_x-delta||&#39; &#39;||ll_y-delta||&#39;,&#39;||ur_x+delta||&#39; &#39;||
          ur_y+delta||&#39;)&#39;&#39;&#39;&#39;::BOX3D, &#39; || srid || &#39;) &amp;&amp; the_geom&#39;&#39;, &#39; || 
          quote_literal(sourceid) || &#39; , &#39; || 
          quote_literal(targetid) || &#39; , &#39;&#39;&#39;||text(dir)||&#39;&#39;&#39;, &#39;&#39;&#39;||text(rc)||&#39;&#39;&#39; ),&#39; || 
          quote_ident(geom_table) || &#39; where edge_id = gid &#39;;
	  
	FOR path_result IN EXECUTE query
        LOOP
                 geom.gid      := path_result.gid;
                 geom.the_geom := path_result.the_geom;
		 id := id+1;
		 geom.id       := id;
                 
                 RETURN NEXT geom;

        END LOOP;
        RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function shortest_path(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean) -->
    <section id="public.function.shortest-path-has-reverse-cost-text-directed-integer-target-id-integer-source-id-boolean-sql-boolean"
             xreflabel="publicshortest_path(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean)">
      <title id="public.function.shortest-path-has-reverse-cost-text-directed-integer-target-id-integer-source-id-boolean-sql-boolean-title">
       shortest_path(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean)
      </title>
      <titleabbrev id="public.function.shortest-path-has-reverse-cost-text-directed-integer-target-id-integer-source-id-boolean-sql-boolean-titleabbrev">
       shortest_path(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF path_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>shortest_path</programlisting>
      </para>
    </section>

<!-- Function shortest_path_astar(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean) -->
    <section id="public.function.shortest-path-astar-has-reverse-cost-text-directed-integer-target-id-integer-source-id-boolean-sql-boolean"
             xreflabel="publicshortest_path_astar(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean)">
      <title id="public.function.shortest-path-astar-has-reverse-cost-text-directed-integer-target-id-integer-source-id-boolean-sql-boolean-title">
       shortest_path_astar(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean)
      </title>
      <titleabbrev id="public.function.shortest-path-astar-has-reverse-cost-text-directed-integer-target-id-integer-source-id-boolean-sql-boolean-titleabbrev">
       shortest_path_astar(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF path_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>shortest_path_astar</programlisting>
      </para>
    </section>

<!-- Function shortest_path_shooting_star(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean) -->
    <section id="public.function.shortest-path-shooting-star-has-reverse-cost-text-directed-integer-target-id-integer-source-id-boolean-sql-boolean"
             xreflabel="publicshortest_path_shooting_star(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean)">
      <title id="public.function.shortest-path-shooting-star-has-reverse-cost-text-directed-integer-target-id-integer-source-id-boolean-sql-boolean-title">
       shortest_path_shooting_star(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean)
      </title>
      <titleabbrev id="public.function.shortest-path-shooting-star-has-reverse-cost-text-directed-integer-target-id-integer-source-id-boolean-sql-boolean-titleabbrev">
       shortest_path_shooting_star(has_reverse_cost text, directed integer, target_id integer, source_id boolean, sql boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF path_result</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>shortest_path_shooting_star</programlisting>
      </para>
    </section>

<!-- Function simplify(public.geometry, double precision) -->
    <section id="public.function.simplify-public.geometry-double-precision"
             xreflabel="publicsimplify(public.geometry, double precision)">
      <title id="public.function.simplify-public.geometry-double-precision-title">
       simplify(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.simplify-public.geometry-double-precision-titleabbrev">
       simplify(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_simplify2d</programlisting>
      </para>
    </section>

<!-- Function snaptogrid(public.geometry, double precision) -->
    <section id="public.function.snaptogrid-public.geometry-double-precision"
             xreflabel="publicsnaptogrid(public.geometry, double precision)">
      <title id="public.function.snaptogrid-public.geometry-double-precision-title">
       snaptogrid(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.snaptogrid-public.geometry-double-precision-titleabbrev">
       snaptogrid(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT SnapToGrid($1, 0, 0, $2, $2)</programlisting>
      </para>
    </section>

<!-- Function snaptogrid(public.geometry, double precision, double precision) -->
    <section id="public.function.snaptogrid-public.geometry-double-precision-double-precision"
             xreflabel="publicsnaptogrid(public.geometry, double precision, double precision)">
      <title id="public.function.snaptogrid-public.geometry-double-precision-double-precision-title">
       snaptogrid(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.snaptogrid-public.geometry-double-precision-double-precision-titleabbrev">
       snaptogrid(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT SnapToGrid($1, 0, 0, $2, $3)</programlisting>
      </para>
    </section>

<!-- Function snaptogrid(public.geometry, double precision, double precision, double precision, double precision) -->
    <section id="public.function.snaptogrid-public.geometry-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicsnaptogrid(public.geometry, double precision, double precision, double precision, double precision)">
      <title id="public.function.snaptogrid-public.geometry-double-precision-double-precision-double-precision-double-precision-title">
       snaptogrid(public.geometry, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.snaptogrid-public.geometry-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       snaptogrid(public.geometry, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_snaptogrid</programlisting>
      </para>
    </section>

<!-- Function snaptogrid(public.geometry, public.geometry, double precision, double precision, double precision, double precision) -->
    <section id="public.function.snaptogrid-public.geometry-public.geometry-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicsnaptogrid(public.geometry, public.geometry, double precision, double precision, double precision, double precision)">
      <title id="public.function.snaptogrid-public.geometry-public.geometry-double-precision-double-precision-double-precision-double-precision-title">
       snaptogrid(public.geometry, public.geometry, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.snaptogrid-public.geometry-public.geometry-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       snaptogrid(public.geometry, public.geometry, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_snaptogrid_pointoff</programlisting>
      </para>
    </section>

<!-- Function spheroid_in(cstring) -->
    <section id="public.function.spheroid-in-cstring"
             xreflabel="publicspheroid_in(cstring)">
      <title id="public.function.spheroid-in-cstring-title">
       spheroid_in(cstring)
      </title>
      <titleabbrev id="public.function.spheroid-in-cstring-titleabbrev">
       spheroid_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>spheroid</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ellipsoid_in</programlisting>
      </para>
    </section>

<!-- Function spheroid_out(public.spheroid) -->
    <section id="public.function.spheroid-out-public.spheroid"
             xreflabel="publicspheroid_out(public.spheroid)">
      <title id="public.function.spheroid-out-public.spheroid-title">
       spheroid_out(public.spheroid)
      </title>
      <titleabbrev id="public.function.spheroid-out-public.spheroid-titleabbrev">
       spheroid_out(public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ellipsoid_out</programlisting>
      </para>
    </section>

<!-- Function srid(public.chip) -->
    <section id="public.function.srid-public.chip"
             xreflabel="publicsrid(public.chip)">
      <title id="public.function.srid-public.chip-title">
       srid(public.chip)
      </title>
      <titleabbrev id="public.function.srid-public.chip-titleabbrev">
       srid(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getSRID</programlisting>
      </para>
    </section>

<!-- Function srid(public.geometry) -->
    <section id="public.function.srid-public.geometry"
             xreflabel="publicsrid(public.geometry)">
      <title id="public.function.srid-public.geometry-title">
       srid(public.geometry)
      </title>
      <titleabbrev id="public.function.srid-public.geometry-titleabbrev">
       srid(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_getSRID</programlisting>
      </para>
    </section>

<!-- Function st_accum(public.geometry) -->
    <section id="public.function.st-accum-public.geometry"
             xreflabel="publicst_accum(public.geometry)">
      <title id="public.function.st-accum-public.geometry-title">
       st_accum(public.geometry)
      </title>
      <titleabbrev id="public.function.st-accum-public.geometry-titleabbrev">
       st_accum(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function st_addbbox(public.geometry) -->
    <section id="public.function.st-addbbox-public.geometry"
             xreflabel="publicst_addbbox(public.geometry)">
      <title id="public.function.st-addbbox-public.geometry-title">
       st_addbbox(public.geometry)
      </title>
      <titleabbrev id="public.function.st-addbbox-public.geometry-titleabbrev">
       st_addbbox(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_addBBOX</programlisting>
      </para>
    </section>

<!-- Function st_addpoint(public.geometry, public.geometry) -->
    <section id="public.function.st-addpoint-public.geometry-public.geometry"
             xreflabel="publicst_addpoint(public.geometry, public.geometry)">
      <title id="public.function.st-addpoint-public.geometry-public.geometry-title">
       st_addpoint(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-addpoint-public.geometry-public.geometry-titleabbrev">
       st_addpoint(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_addpoint</programlisting>
      </para>
    </section>

<!-- Function st_addpoint(public.geometry, public.geometry, integer) -->
    <section id="public.function.st-addpoint-public.geometry-public.geometry-integer"
             xreflabel="publicst_addpoint(public.geometry, public.geometry, integer)">
      <title id="public.function.st-addpoint-public.geometry-public.geometry-integer-title">
       st_addpoint(public.geometry, public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-addpoint-public.geometry-public.geometry-integer-titleabbrev">
       st_addpoint(public.geometry, public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_addpoint</programlisting>
      </para>
    </section>

<!-- Function st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision) -->
    <section id="public.function.st-affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicst_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision)">
      <title id="public.function.st-affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-title">
       st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)</programlisting>
      </para>
    </section>

<!-- Function st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) -->
    <section id="public.function.st-affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicst_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)">
      <title id="public.function.st-affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-title">
       st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-affine-public.geometry-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       st_affine(public.geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_affine</programlisting>
      </para>
    </section>

<!-- Function st_area(public.geometry) -->
    <section id="public.function.st-area-public.geometry"
             xreflabel="publicst_area(public.geometry)">
      <title id="public.function.st-area-public.geometry-title">
       st_area(public.geometry)
      </title>
      <titleabbrev id="public.function.st-area-public.geometry-titleabbrev">
       st_area(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_area_polygon</programlisting>
      </para>
    </section>

<!-- Function st_area2d(public.geometry) -->
    <section id="public.function.st-area2d-public.geometry"
             xreflabel="publicst_area2d(public.geometry)">
      <title id="public.function.st-area2d-public.geometry-title">
       st_area2d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-area2d-public.geometry-titleabbrev">
       st_area2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_area_polygon</programlisting>
      </para>
    </section>

<!-- Function st_asbinary(public.geometry) -->
    <section id="public.function.st-asbinary-public.geometry"
             xreflabel="publicst_asbinary(public.geometry)">
      <title id="public.function.st-asbinary-public.geometry-title">
       st_asbinary(public.geometry)
      </title>
      <titleabbrev id="public.function.st-asbinary-public.geometry-titleabbrev">
       st_asbinary(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asBinary</programlisting>
      </para>
    </section>

<!-- Function st_asbinary(public.geometry, text) -->
    <section id="public.function.st-asbinary-public.geometry-text"
             xreflabel="publicst_asbinary(public.geometry, text)">
      <title id="public.function.st-asbinary-public.geometry-text-title">
       st_asbinary(public.geometry, text)
      </title>
      <titleabbrev id="public.function.st-asbinary-public.geometry-text-titleabbrev">
       st_asbinary(public.geometry, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asBinary</programlisting>
      </para>
    </section>

<!-- Function st_asewkb(public.geometry) -->
    <section id="public.function.st-asewkb-public.geometry"
             xreflabel="publicst_asewkb(public.geometry)">
      <title id="public.function.st-asewkb-public.geometry-title">
       st_asewkb(public.geometry)
      </title>
      <titleabbrev id="public.function.st-asewkb-public.geometry-titleabbrev">
       st_asewkb(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>WKBFromLWGEOM</programlisting>
      </para>
    </section>

<!-- Function st_asewkb(public.geometry, text) -->
    <section id="public.function.st-asewkb-public.geometry-text"
             xreflabel="publicst_asewkb(public.geometry, text)">
      <title id="public.function.st-asewkb-public.geometry-text-title">
       st_asewkb(public.geometry, text)
      </title>
      <titleabbrev id="public.function.st-asewkb-public.geometry-text-titleabbrev">
       st_asewkb(public.geometry, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>WKBFromLWGEOM</programlisting>
      </para>
    </section>

<!-- Function st_asewkt(public.geometry) -->
    <section id="public.function.st-asewkt-public.geometry"
             xreflabel="publicst_asewkt(public.geometry)">
      <title id="public.function.st-asewkt-public.geometry-title">
       st_asewkt(public.geometry)
      </title>
      <titleabbrev id="public.function.st-asewkt-public.geometry-titleabbrev">
       st_asewkt(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asEWKT</programlisting>
      </para>
    </section>

<!-- Function st_asgeojson(integer, public.geometry) -->
    <section id="public.function.st-asgeojson-integer-public.geometry"
             xreflabel="publicst_asgeojson(integer, public.geometry)">
      <title id="public.function.st-asgeojson-integer-public.geometry-title">
       st_asgeojson(integer, public.geometry)
      </title>
      <titleabbrev id="public.function.st-asgeojson-integer-public.geometry-titleabbrev">
       st_asgeojson(integer, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGeoJson($1, $2, 15, 0)</programlisting>
      </para>
    </section>

<!-- Function st_asgeojson(integer, public.geometry, integer) -->
    <section id="public.function.st-asgeojson-integer-public.geometry-integer"
             xreflabel="publicst_asgeojson(integer, public.geometry, integer)">
      <title id="public.function.st-asgeojson-integer-public.geometry-integer-title">
       st_asgeojson(integer, public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-asgeojson-integer-public.geometry-integer-titleabbrev">
       st_asgeojson(integer, public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGeoJson($1, $2, $3, 0)</programlisting>
      </para>
    </section>

<!-- Function st_asgeojson(integer, public.geometry, integer, integer) -->
    <section id="public.function.st-asgeojson-integer-public.geometry-integer-integer"
             xreflabel="publicst_asgeojson(integer, public.geometry, integer, integer)">
      <title id="public.function.st-asgeojson-integer-public.geometry-integer-integer-title">
       st_asgeojson(integer, public.geometry, integer, integer)
      </title>
      <titleabbrev id="public.function.st-asgeojson-integer-public.geometry-integer-integer-titleabbrev">
       st_asgeojson(integer, public.geometry, integer, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGeoJson($1, $2, $3, $4)</programlisting>
      </para>
    </section>

<!-- Function st_asgeojson(public.geometry) -->
    <section id="public.function.st-asgeojson-public.geometry"
             xreflabel="publicst_asgeojson(public.geometry)">
      <title id="public.function.st-asgeojson-public.geometry-title">
       st_asgeojson(public.geometry)
      </title>
      <titleabbrev id="public.function.st-asgeojson-public.geometry-titleabbrev">
       st_asgeojson(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGeoJson(1, $1, 15, 0)</programlisting>
      </para>
    </section>

<!-- Function st_asgeojson(public.geometry, integer) -->
    <section id="public.function.st-asgeojson-public.geometry-integer"
             xreflabel="publicst_asgeojson(public.geometry, integer)">
      <title id="public.function.st-asgeojson-public.geometry-integer-title">
       st_asgeojson(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-asgeojson-public.geometry-integer-titleabbrev">
       st_asgeojson(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGeoJson(1, $1, $2, 0)</programlisting>
      </para>
    </section>

<!-- Function st_asgeojson(public.geometry, integer, integer) -->
    <section id="public.function.st-asgeojson-public.geometry-integer-integer"
             xreflabel="publicst_asgeojson(public.geometry, integer, integer)">
      <title id="public.function.st-asgeojson-public.geometry-integer-integer-title">
       st_asgeojson(public.geometry, integer, integer)
      </title>
      <titleabbrev id="public.function.st-asgeojson-public.geometry-integer-integer-titleabbrev">
       st_asgeojson(public.geometry, integer, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGeoJson(1, $1, $2, $3)</programlisting>
      </para>
    </section>

<!-- Function st_asgml(integer, public.geometry) -->
    <section id="public.function.st-asgml-integer-public.geometry"
             xreflabel="publicst_asgml(integer, public.geometry)">
      <title id="public.function.st-asgml-integer-public.geometry-title">
       st_asgml(integer, public.geometry)
      </title>
      <titleabbrev id="public.function.st-asgml-integer-public.geometry-titleabbrev">
       st_asgml(integer, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGML($1, $2, 15)</programlisting>
      </para>
    </section>

<!-- Function st_asgml(integer, public.geometry, integer) -->
    <section id="public.function.st-asgml-integer-public.geometry-integer"
             xreflabel="publicst_asgml(integer, public.geometry, integer)">
      <title id="public.function.st-asgml-integer-public.geometry-integer-title">
       st_asgml(integer, public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-asgml-integer-public.geometry-integer-titleabbrev">
       st_asgml(integer, public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGML($1, $2, $3)</programlisting>
      </para>
    </section>

<!-- Function st_asgml(public.geometry) -->
    <section id="public.function.st-asgml-public.geometry"
             xreflabel="publicst_asgml(public.geometry)">
      <title id="public.function.st-asgml-public.geometry-title">
       st_asgml(public.geometry)
      </title>
      <titleabbrev id="public.function.st-asgml-public.geometry-titleabbrev">
       st_asgml(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGML(2, $1, 15)</programlisting>
      </para>
    </section>

<!-- Function st_asgml(public.geometry, integer) -->
    <section id="public.function.st-asgml-public.geometry-integer"
             xreflabel="publicst_asgml(public.geometry, integer)">
      <title id="public.function.st-asgml-public.geometry-integer-title">
       st_asgml(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-asgml-public.geometry-integer-titleabbrev">
       st_asgml(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsGML(2, $1, $2)</programlisting>
      </para>
    </section>

<!-- Function st_ashexewkb(public.geometry) -->
    <section id="public.function.st-ashexewkb-public.geometry"
             xreflabel="publicst_ashexewkb(public.geometry)">
      <title id="public.function.st-ashexewkb-public.geometry-title">
       st_ashexewkb(public.geometry)
      </title>
      <titleabbrev id="public.function.st-ashexewkb-public.geometry-titleabbrev">
       st_ashexewkb(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asHEXEWKB</programlisting>
      </para>
    </section>

<!-- Function st_ashexewkb(public.geometry, text) -->
    <section id="public.function.st-ashexewkb-public.geometry-text"
             xreflabel="publicst_ashexewkb(public.geometry, text)">
      <title id="public.function.st-ashexewkb-public.geometry-text-title">
       st_ashexewkb(public.geometry, text)
      </title>
      <titleabbrev id="public.function.st-ashexewkb-public.geometry-text-titleabbrev">
       st_ashexewkb(public.geometry, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asHEXEWKB</programlisting>
      </para>
    </section>

<!-- Function st_askml(integer, public.geometry) -->
    <section id="public.function.st-askml-integer-public.geometry"
             xreflabel="publicst_askml(integer, public.geometry)">
      <title id="public.function.st-askml-integer-public.geometry-title">
       st_askml(integer, public.geometry)
      </title>
      <titleabbrev id="public.function.st-askml-integer-public.geometry-titleabbrev">
       st_askml(integer, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsKML($1, ST_Transform($2,4326), 15)</programlisting>
      </para>
    </section>

<!-- Function st_askml(integer, public.geometry, integer) -->
    <section id="public.function.st-askml-integer-public.geometry-integer"
             xreflabel="publicst_askml(integer, public.geometry, integer)">
      <title id="public.function.st-askml-integer-public.geometry-integer-title">
       st_askml(integer, public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-askml-integer-public.geometry-integer-titleabbrev">
       st_askml(integer, public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsKML($1, ST_Transform($2,4326), $3)</programlisting>
      </para>
    </section>

<!-- Function st_askml(public.geometry) -->
    <section id="public.function.st-askml-public.geometry"
             xreflabel="publicst_askml(public.geometry)">
      <title id="public.function.st-askml-public.geometry-title">
       st_askml(public.geometry)
      </title>
      <titleabbrev id="public.function.st-askml-public.geometry-titleabbrev">
       st_askml(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsKML(2, ST_Transform($1,4326), 15)</programlisting>
      </para>
    </section>

<!-- Function st_askml(public.geometry, integer) -->
    <section id="public.function.st-askml-public.geometry-integer"
             xreflabel="publicst_askml(public.geometry, integer)">
      <title id="public.function.st-askml-public.geometry-integer-title">
       st_askml(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-askml-public.geometry-integer-titleabbrev">
       st_askml(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT _ST_AsKML(2, ST_Transform($1,4326), $2)</programlisting>
      </para>
    </section>

<!-- Function st_assvg(public.geometry) -->
    <section id="public.function.st-assvg-public.geometry"
             xreflabel="publicst_assvg(public.geometry)">
      <title id="public.function.st-assvg-public.geometry-title">
       st_assvg(public.geometry)
      </title>
      <titleabbrev id="public.function.st-assvg-public.geometry-titleabbrev">
       st_assvg(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>assvg_geometry</programlisting>
      </para>
    </section>

<!-- Function st_assvg(public.geometry, integer) -->
    <section id="public.function.st-assvg-public.geometry-integer"
             xreflabel="publicst_assvg(public.geometry, integer)">
      <title id="public.function.st-assvg-public.geometry-integer-title">
       st_assvg(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-assvg-public.geometry-integer-titleabbrev">
       st_assvg(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>assvg_geometry</programlisting>
      </para>
    </section>

<!-- Function st_assvg(public.geometry, integer, integer) -->
    <section id="public.function.st-assvg-public.geometry-integer-integer"
             xreflabel="publicst_assvg(public.geometry, integer, integer)">
      <title id="public.function.st-assvg-public.geometry-integer-integer-title">
       st_assvg(public.geometry, integer, integer)
      </title>
      <titleabbrev id="public.function.st-assvg-public.geometry-integer-integer-titleabbrev">
       st_assvg(public.geometry, integer, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>assvg_geometry</programlisting>
      </para>
    </section>

<!-- Function st_astext(public.geometry) -->
    <section id="public.function.st-astext-public.geometry"
             xreflabel="publicst_astext(public.geometry)">
      <title id="public.function.st-astext-public.geometry-title">
       st_astext(public.geometry)
      </title>
      <titleabbrev id="public.function.st-astext-public.geometry-titleabbrev">
       st_astext(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_asText</programlisting>
      </para>
    </section>

<!-- Function st_azimuth(public.geometry, public.geometry) -->
    <section id="public.function.st-azimuth-public.geometry-public.geometry"
             xreflabel="publicst_azimuth(public.geometry, public.geometry)">
      <title id="public.function.st-azimuth-public.geometry-public.geometry-title">
       st_azimuth(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-azimuth-public.geometry-public.geometry-titleabbrev">
       st_azimuth(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_azimuth</programlisting>
      </para>
    </section>

<!-- Function st_bdmpolyfromtext(text, integer) -->
    <section id="public.function.st-bdmpolyfromtext-text-integer"
             xreflabel="publicst_bdmpolyfromtext(text, integer)">
      <title id="public.function.st-bdmpolyfromtext-text-integer-title">
       st_bdmpolyfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-bdmpolyfromtext-text-integer-titleabbrev">
       st_bdmpolyfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION &#39;Input is not a MultiLinestring&#39;;
	END IF;

	geom := multi(BuildArea(mline));

	RETURN geom;
END;
</programlisting>
      </para>
    </section>

<!-- Function st_bdpolyfromtext(text, integer) -->
    <section id="public.function.st-bdpolyfromtext-text-integer"
             xreflabel="publicst_bdpolyfromtext(text, integer)">
      <title id="public.function.st-bdpolyfromtext-text-integer-title">
       st_bdpolyfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-bdpolyfromtext-text-integer-titleabbrev">
       st_bdpolyfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := MultiLineStringFromText(geomtext, srid);

	IF mline IS NULL
	THEN
		RAISE EXCEPTION &#39;Input is not a MultiLinestring&#39;;
	END IF;

	geom := BuildArea(mline);

	IF GeometryType(geom) != &#39;POLYGON&#39;
	THEN
		RAISE EXCEPTION &#39;Input returns more then a single polygon, try using BdMPolyFromText instead&#39;;
	END IF;

	RETURN geom;
END;
</programlisting>
      </para>
    </section>

<!-- Function st_boundary(public.geometry) -->
    <section id="public.function.st-boundary-public.geometry"
             xreflabel="publicst_boundary(public.geometry)">
      <title id="public.function.st-boundary-public.geometry-title">
       st_boundary(public.geometry)
      </title>
      <titleabbrev id="public.function.st-boundary-public.geometry-titleabbrev">
       st_boundary(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>boundary</programlisting>
      </para>
    </section>

<!-- Function st_box(public.box3d) -->
    <section id="public.function.st-box-public.box3d"
             xreflabel="publicst_box(public.box3d)">
      <title id="public.function.st-box-public.box3d-title">
       st_box(public.box3d)
      </title>
      <titleabbrev id="public.function.st-box-public.box3d-titleabbrev">
       st_box(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_to_BOX</programlisting>
      </para>
    </section>

<!-- Function st_box(public.geometry) -->
    <section id="public.function.st-box-public.geometry"
             xreflabel="publicst_box(public.geometry)">
      <title id="public.function.st-box-public.geometry-title">
       st_box(public.geometry)
      </title>
      <titleabbrev id="public.function.st-box-public.geometry-titleabbrev">
       st_box(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_BOX</programlisting>
      </para>
    </section>

<!-- Function st_box2d(public.box3d) -->
    <section id="public.function.st-box2d-public.box3d"
             xreflabel="publicst_box2d(public.box3d)">
      <title id="public.function.st-box2d-public.box3d-title">
       st_box2d(public.box3d)
      </title>
      <titleabbrev id="public.function.st-box2d-public.box3d-titleabbrev">
       st_box2d(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_to_BOX2DFLOAT4</programlisting>
      </para>
    </section>

<!-- Function st_box2d(public.geometry) -->
    <section id="public.function.st-box2d-public.geometry"
             xreflabel="publicst_box2d(public.geometry)">
      <title id="public.function.st-box2d-public.geometry-title">
       st_box2d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-box2d-public.geometry-titleabbrev">
       st_box2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_BOX2DFLOAT4</programlisting>
      </para>
    </section>

<!-- Function st_box2d_contain(public.box2d, public.box2d) -->
    <section id="public.function.st-box2d-contain-public.box2d-public.box2d"
             xreflabel="publicst_box2d_contain(public.box2d, public.box2d)">
      <title id="public.function.st-box2d-contain-public.box2d-public.box2d-title">
       st_box2d_contain(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-contain-public.box2d-public.box2d-titleabbrev">
       st_box2d_contain(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_contain</programlisting>
      </para>
    </section>

<!-- Function st_box2d_contained(public.box2d, public.box2d) -->
    <section id="public.function.st-box2d-contained-public.box2d-public.box2d"
             xreflabel="publicst_box2d_contained(public.box2d, public.box2d)">
      <title id="public.function.st-box2d-contained-public.box2d-public.box2d-title">
       st_box2d_contained(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-contained-public.box2d-public.box2d-titleabbrev">
       st_box2d_contained(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_contained</programlisting>
      </para>
    </section>

<!-- Function st_box2d_in(cstring) -->
    <section id="public.function.st-box2d-in-cstring"
             xreflabel="publicst_box2d_in(cstring)">
      <title id="public.function.st-box2d-in-cstring-title">
       st_box2d_in(cstring)
      </title>
      <titleabbrev id="public.function.st-box2d-in-cstring-titleabbrev">
       st_box2d_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_in</programlisting>
      </para>
    </section>

<!-- Function st_box2d_intersects(public.box2d, public.box2d) -->
    <section id="public.function.st-box2d-intersects-public.box2d-public.box2d"
             xreflabel="publicst_box2d_intersects(public.box2d, public.box2d)">
      <title id="public.function.st-box2d-intersects-public.box2d-public.box2d-title">
       st_box2d_intersects(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-intersects-public.box2d-public.box2d-titleabbrev">
       st_box2d_intersects(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_intersects</programlisting>
      </para>
    </section>

<!-- Function st_box2d_left(public.box2d, public.box2d) -->
    <section id="public.function.st-box2d-left-public.box2d-public.box2d"
             xreflabel="publicst_box2d_left(public.box2d, public.box2d)">
      <title id="public.function.st-box2d-left-public.box2d-public.box2d-title">
       st_box2d_left(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-left-public.box2d-public.box2d-titleabbrev">
       st_box2d_left(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_left</programlisting>
      </para>
    </section>

<!-- Function st_box2d_out(public.box2d) -->
    <section id="public.function.st-box2d-out-public.box2d"
             xreflabel="publicst_box2d_out(public.box2d)">
      <title id="public.function.st-box2d-out-public.box2d-title">
       st_box2d_out(public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-out-public.box2d-titleabbrev">
       st_box2d_out(public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_out</programlisting>
      </para>
    </section>

<!-- Function st_box2d_overlap(public.box2d, public.box2d) -->
    <section id="public.function.st-box2d-overlap-public.box2d-public.box2d"
             xreflabel="publicst_box2d_overlap(public.box2d, public.box2d)">
      <title id="public.function.st-box2d-overlap-public.box2d-public.box2d-title">
       st_box2d_overlap(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-overlap-public.box2d-public.box2d-titleabbrev">
       st_box2d_overlap(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_overlap</programlisting>
      </para>
    </section>

<!-- Function st_box2d_overleft(public.box2d, public.box2d) -->
    <section id="public.function.st-box2d-overleft-public.box2d-public.box2d"
             xreflabel="publicst_box2d_overleft(public.box2d, public.box2d)">
      <title id="public.function.st-box2d-overleft-public.box2d-public.box2d-title">
       st_box2d_overleft(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-overleft-public.box2d-public.box2d-titleabbrev">
       st_box2d_overleft(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_overleft</programlisting>
      </para>
    </section>

<!-- Function st_box2d_overright(public.box2d, public.box2d) -->
    <section id="public.function.st-box2d-overright-public.box2d-public.box2d"
             xreflabel="publicst_box2d_overright(public.box2d, public.box2d)">
      <title id="public.function.st-box2d-overright-public.box2d-public.box2d-title">
       st_box2d_overright(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-overright-public.box2d-public.box2d-titleabbrev">
       st_box2d_overright(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_overright</programlisting>
      </para>
    </section>

<!-- Function st_box2d_right(public.box2d, public.box2d) -->
    <section id="public.function.st-box2d-right-public.box2d-public.box2d"
             xreflabel="publicst_box2d_right(public.box2d, public.box2d)">
      <title id="public.function.st-box2d-right-public.box2d-public.box2d-title">
       st_box2d_right(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-right-public.box2d-public.box2d-titleabbrev">
       st_box2d_right(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_right</programlisting>
      </para>
    </section>

<!-- Function st_box2d_same(public.box2d, public.box2d) -->
    <section id="public.function.st-box2d-same-public.box2d-public.box2d"
             xreflabel="publicst_box2d_same(public.box2d, public.box2d)">
      <title id="public.function.st-box2d-same-public.box2d-public.box2d-title">
       st_box2d_same(public.box2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-box2d-same-public.box2d-public.box2d-titleabbrev">
       st_box2d_same(public.box2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2D_same</programlisting>
      </para>
    </section>

<!-- Function st_box3d(public.box2d) -->
    <section id="public.function.st-box3d-public.box2d"
             xreflabel="publicst_box3d(public.box2d)">
      <title id="public.function.st-box3d-public.box2d-title">
       st_box3d(public.box2d)
      </title>
      <titleabbrev id="public.function.st-box3d-public.box2d-titleabbrev">
       st_box3d(public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_to_BOX3D</programlisting>
      </para>
    </section>

<!-- Function st_box3d(public.geometry) -->
    <section id="public.function.st-box3d-public.geometry"
             xreflabel="publicst_box3d(public.geometry)">
      <title id="public.function.st-box3d-public.geometry-title">
       st_box3d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-box3d-public.geometry-titleabbrev">
       st_box3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_BOX3D</programlisting>
      </para>
    </section>

<!-- Function st_box3d_in(cstring) -->
    <section id="public.function.st-box3d-in-cstring"
             xreflabel="publicst_box3d_in(cstring)">
      <title id="public.function.st-box3d-in-cstring-title">
       st_box3d_in(cstring)
      </title>
      <titleabbrev id="public.function.st-box3d-in-cstring-titleabbrev">
       st_box3d_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_in</programlisting>
      </para>
    </section>

<!-- Function st_box3d_out(public.box3d) -->
    <section id="public.function.st-box3d-out-public.box3d"
             xreflabel="publicst_box3d_out(public.box3d)">
      <title id="public.function.st-box3d-out-public.box3d-title">
       st_box3d_out(public.box3d)
      </title>
      <titleabbrev id="public.function.st-box3d-out-public.box3d-titleabbrev">
       st_box3d_out(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_out</programlisting>
      </para>
    </section>

<!-- Function st_buffer(public.geometry, double precision) -->
    <section id="public.function.st-buffer-public.geometry-double-precision"
             xreflabel="publicst_buffer(public.geometry, double precision)">
      <title id="public.function.st-buffer-public.geometry-double-precision-title">
       st_buffer(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-buffer-public.geometry-double-precision-titleabbrev">
       st_buffer(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>buffer</programlisting>
      </para>
    </section>

<!-- Function st_buffer(public.geometry, double precision, integer) -->
    <section id="public.function.st-buffer-public.geometry-double-precision-integer"
             xreflabel="publicst_buffer(public.geometry, double precision, integer)">
      <title id="public.function.st-buffer-public.geometry-double-precision-integer-title">
       st_buffer(public.geometry, double precision, integer)
      </title>
      <titleabbrev id="public.function.st-buffer-public.geometry-double-precision-integer-titleabbrev">
       st_buffer(public.geometry, double precision, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>buffer</programlisting>
      </para>
    </section>

<!-- Function st_build_histogram2d(public.histogram2d, text, text) -->
    <section id="public.function.st-build-histogram2d-public.histogram2d-text-text"
             xreflabel="publicst_build_histogram2d(public.histogram2d, text, text)">
      <title id="public.function.st-build-histogram2d-public.histogram2d-text-text-title">
       st_build_histogram2d(public.histogram2d, text, text)
      </title>
      <titleabbrev id="public.function.st-build-histogram2d-public.histogram2d-text-text-titleabbrev">
       st_build_histogram2d(public.histogram2d, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>build_lwhistogram2d</programlisting>
      </para>
    </section>

<!-- Function st_build_histogram2d(public.histogram2d, text, text, text) -->
    <section id="public.function.st-build-histogram2d-public.histogram2d-text-text-text"
             xreflabel="publicst_build_histogram2d(public.histogram2d, text, text, text)">
      <title id="public.function.st-build-histogram2d-public.histogram2d-text-text-text-title">
       st_build_histogram2d(public.histogram2d, text, text, text)
      </title>
      <titleabbrev id="public.function.st-build-histogram2d-public.histogram2d-text-text-text-titleabbrev">
       st_build_histogram2d(public.histogram2d, text, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
BEGIN
	EXECUTE &#39;SET local search_path = &#39;||$2||&#39;,public&#39;;
	RETURN public.build_histogram2d($1,$3,$4);
END
</programlisting>
      </para>
    </section>

<!-- Function st_buildarea(public.geometry) -->
    <section id="public.function.st-buildarea-public.geometry"
             xreflabel="publicst_buildarea(public.geometry)">
      <title id="public.function.st-buildarea-public.geometry-title">
       st_buildarea(public.geometry)
      </title>
      <titleabbrev id="public.function.st-buildarea-public.geometry-titleabbrev">
       st_buildarea(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_buildarea</programlisting>
      </para>
    </section>

<!-- Function st_bytea(public.geometry) -->
    <section id="public.function.st-bytea-public.geometry"
             xreflabel="publicst_bytea(public.geometry)">
      <title id="public.function.st-bytea-public.geometry-title">
       st_bytea(public.geometry)
      </title>
      <titleabbrev id="public.function.st-bytea-public.geometry-titleabbrev">
       st_bytea(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_bytea</programlisting>
      </para>
    </section>

<!-- Function st_cache_bbox() -->
    <section id="public.function.st-cache-bbox"
             xreflabel="publicst_cache_bbox()">
      <title id="public.function.st-cache-bbox-title">
       st_cache_bbox()
      </title>
      <titleabbrev id="public.function.st-cache-bbox-titleabbrev">
       st_cache_bbox()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>trigger</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>cache_bbox</programlisting>
      </para>
    </section>

<!-- Function st_centroid(public.geometry) -->
    <section id="public.function.st-centroid-public.geometry"
             xreflabel="publicst_centroid(public.geometry)">
      <title id="public.function.st-centroid-public.geometry-title">
       st_centroid(public.geometry)
      </title>
      <titleabbrev id="public.function.st-centroid-public.geometry-titleabbrev">
       st_centroid(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>centroid</programlisting>
      </para>
    </section>

<!-- Function st_chip_in(cstring) -->
    <section id="public.function.st-chip-in-cstring"
             xreflabel="publicst_chip_in(cstring)">
      <title id="public.function.st-chip-in-cstring-title">
       st_chip_in(cstring)
      </title>
      <titleabbrev id="public.function.st-chip-in-cstring-titleabbrev">
       st_chip_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>chip</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_in</programlisting>
      </para>
    </section>

<!-- Function st_chip_out(public.chip) -->
    <section id="public.function.st-chip-out-public.chip"
             xreflabel="publicst_chip_out(public.chip)">
      <title id="public.function.st-chip-out-public.chip-title">
       st_chip_out(public.chip)
      </title>
      <titleabbrev id="public.function.st-chip-out-public.chip-titleabbrev">
       st_chip_out(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_out</programlisting>
      </para>
    </section>

<!-- Function st_collect(public.geometry) -->
    <section id="public.function.st-collect-public.geometry"
             xreflabel="publicst_collect(public.geometry)">
      <title id="public.function.st-collect-public.geometry-title">
       st_collect(public.geometry)
      </title>
      <titleabbrev id="public.function.st-collect-public.geometry-titleabbrev">
       st_collect(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function st_collect(public.geometry, public.geometry) -->
    <section id="public.function.st-collect-public.geometry-public.geometry"
             xreflabel="publicst_collect(public.geometry, public.geometry)">
      <title id="public.function.st-collect-public.geometry-public.geometry-title">
       st_collect(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-collect-public.geometry-public.geometry-titleabbrev">
       st_collect(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_collect</programlisting>
      </para>
    </section>

<!-- Function st_collect_garray(public.geometry[]) -->
    <section id="public.function.st-collect-garray-public.geometryARRAY"
             xreflabel="publicst_collect_garray(public.geometry[])">
      <title id="public.function.st-collect-garray-public.geometryARRAY-title">
       st_collect_garray(public.geometry[])
      </title>
      <titleabbrev id="public.function.st-collect-garray-public.geometryARRAY-titleabbrev">
       st_collect_garray(public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_collect_garray</programlisting>
      </para>
    </section>

<!-- Function st_collector(public.geometry, public.geometry) -->
    <section id="public.function.st-collector-public.geometry-public.geometry"
             xreflabel="publicst_collector(public.geometry, public.geometry)">
      <title id="public.function.st-collector-public.geometry-public.geometry-title">
       st_collector(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-collector-public.geometry-public.geometry-titleabbrev">
       st_collector(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_collect</programlisting>
      </para>
    </section>

<!-- Function st_combine_bbox(public.box2d, public.geometry) -->
    <section id="public.function.st-combine-bbox-public.box2d-public.geometry"
             xreflabel="publicst_combine_bbox(public.box2d, public.geometry)">
      <title id="public.function.st-combine-bbox-public.box2d-public.geometry-title">
       st_combine_bbox(public.box2d, public.geometry)
      </title>
      <titleabbrev id="public.function.st-combine-bbox-public.box2d-public.geometry-titleabbrev">
       st_combine_bbox(public.box2d, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_combine</programlisting>
      </para>
    </section>

<!-- Function st_combine_bbox(public.box3d, public.geometry) -->
    <section id="public.function.st-combine-bbox-public.box3d-public.geometry"
             xreflabel="publicst_combine_bbox(public.box3d, public.geometry)">
      <title id="public.function.st-combine-bbox-public.box3d-public.geometry-title">
       st_combine_bbox(public.box3d, public.geometry)
      </title>
      <titleabbrev id="public.function.st-combine-bbox-public.box3d-public.geometry-titleabbrev">
       st_combine_bbox(public.box3d, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_combine</programlisting>
      </para>
    </section>

<!-- Function st_compression(public.chip) -->
    <section id="public.function.st-compression-public.chip"
             xreflabel="publicst_compression(public.chip)">
      <title id="public.function.st-compression-public.chip-title">
       st_compression(public.chip)
      </title>
      <titleabbrev id="public.function.st-compression-public.chip-titleabbrev">
       st_compression(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getCompression</programlisting>
      </para>
    </section>

<!-- Function st_contains(public.geometry, public.geometry) -->
    <section id="public.function.st-contains-public.geometry-public.geometry"
             xreflabel="publicst_contains(public.geometry, public.geometry)">
      <title id="public.function.st-contains-public.geometry-public.geometry-title">
       st_contains(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-contains-public.geometry-public.geometry-titleabbrev">
       st_contains(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT $1 &amp;&amp; $2 AND _ST_Contains($1,$2)</programlisting>
      </para>
    </section>

<!-- Function st_convexhull(public.geometry) -->
    <section id="public.function.st-convexhull-public.geometry"
             xreflabel="publicst_convexhull(public.geometry)">
      <title id="public.function.st-convexhull-public.geometry-title">
       st_convexhull(public.geometry)
      </title>
      <titleabbrev id="public.function.st-convexhull-public.geometry-titleabbrev">
       st_convexhull(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>convexhull</programlisting>
      </para>
    </section>

<!-- Function st_coorddim(public.geometry) -->
    <section id="public.function.st-coorddim-public.geometry"
             xreflabel="publicst_coorddim(public.geometry)">
      <title id="public.function.st-coorddim-public.geometry-title">
       st_coorddim(public.geometry)
      </title>
      <titleabbrev id="public.function.st-coorddim-public.geometry-titleabbrev">
       st_coorddim(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>smallint</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_ndims</programlisting>
      </para>
    </section>

<!-- Function st_create_histogram2d(public.box2d, integer) -->
    <section id="public.function.st-create-histogram2d-public.box2d-integer"
             xreflabel="publicst_create_histogram2d(public.box2d, integer)">
      <title id="public.function.st-create-histogram2d-public.box2d-integer-title">
       st_create_histogram2d(public.box2d, integer)
      </title>
      <titleabbrev id="public.function.st-create-histogram2d-public.box2d-integer-titleabbrev">
       st_create_histogram2d(public.box2d, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>create_lwhistogram2d</programlisting>
      </para>
    </section>

<!-- Function st_crosses(public.geometry, public.geometry) -->
    <section id="public.function.st-crosses-public.geometry-public.geometry"
             xreflabel="publicst_crosses(public.geometry, public.geometry)">
      <title id="public.function.st-crosses-public.geometry-public.geometry-title">
       st_crosses(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-crosses-public.geometry-public.geometry-titleabbrev">
       st_crosses(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT $1 &amp;&amp; $2 AND _ST_Crosses($1,$2)</programlisting>
      </para>
    </section>

<!-- Function st_curvetoline(public.geometry) -->
    <section id="public.function.st-curvetoline-public.geometry"
             xreflabel="publicst_curvetoline(public.geometry)">
      <title id="public.function.st-curvetoline-public.geometry-title">
       st_curvetoline(public.geometry)
      </title>
      <titleabbrev id="public.function.st-curvetoline-public.geometry-titleabbrev">
       st_curvetoline(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT ST_CurveToLine($1, 32)</programlisting>
      </para>
    </section>

<!-- Function st_curvetoline(public.geometry, integer) -->
    <section id="public.function.st-curvetoline-public.geometry-integer"
             xreflabel="publicst_curvetoline(public.geometry, integer)">
      <title id="public.function.st-curvetoline-public.geometry-integer-title">
       st_curvetoline(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-curvetoline-public.geometry-integer-titleabbrev">
       st_curvetoline(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_curve_segmentize</programlisting>
      </para>
    </section>

<!-- Function st_datatype(public.chip) -->
    <section id="public.function.st-datatype-public.chip"
             xreflabel="publicst_datatype(public.chip)">
      <title id="public.function.st-datatype-public.chip-title">
       st_datatype(public.chip)
      </title>
      <titleabbrev id="public.function.st-datatype-public.chip-titleabbrev">
       st_datatype(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getDatatype</programlisting>
      </para>
    </section>

<!-- Function st_difference(public.geometry, public.geometry) -->
    <section id="public.function.st-difference-public.geometry-public.geometry"
             xreflabel="publicst_difference(public.geometry, public.geometry)">
      <title id="public.function.st-difference-public.geometry-public.geometry-title">
       st_difference(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-difference-public.geometry-public.geometry-titleabbrev">
       st_difference(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>difference</programlisting>
      </para>
    </section>

<!-- Function st_dimension(public.geometry) -->
    <section id="public.function.st-dimension-public.geometry"
             xreflabel="publicst_dimension(public.geometry)">
      <title id="public.function.st-dimension-public.geometry-title">
       st_dimension(public.geometry)
      </title>
      <titleabbrev id="public.function.st-dimension-public.geometry-titleabbrev">
       st_dimension(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_dimension</programlisting>
      </para>
    </section>

<!-- Function st_disjoint(public.geometry, public.geometry) -->
    <section id="public.function.st-disjoint-public.geometry-public.geometry"
             xreflabel="publicst_disjoint(public.geometry, public.geometry)">
      <title id="public.function.st-disjoint-public.geometry-public.geometry-title">
       st_disjoint(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-disjoint-public.geometry-public.geometry-titleabbrev">
       st_disjoint(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>disjoint</programlisting>
      </para>
    </section>

<!-- Function st_distance(public.geometry, public.geometry) -->
    <section id="public.function.st-distance-public.geometry-public.geometry"
             xreflabel="publicst_distance(public.geometry, public.geometry)">
      <title id="public.function.st-distance-public.geometry-public.geometry-title">
       st_distance(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-distance-public.geometry-public.geometry-titleabbrev">
       st_distance(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_mindistance2d</programlisting>
      </para>
    </section>

<!-- Function st_distance_sphere(public.geometry, public.geometry) -->
    <section id="public.function.st-distance-sphere-public.geometry-public.geometry"
             xreflabel="publicst_distance_sphere(public.geometry, public.geometry)">
      <title id="public.function.st-distance-sphere-public.geometry-public.geometry-title">
       st_distance_sphere(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-distance-sphere-public.geometry-public.geometry-titleabbrev">
       st_distance_sphere(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_distance_sphere</programlisting>
      </para>
    </section>

<!-- Function st_distance_spheroid(public.geometry, public.geometry, public.spheroid) -->
    <section id="public.function.st-distance-spheroid-public.geometry-public.geometry-public.spheroid"
             xreflabel="publicst_distance_spheroid(public.geometry, public.geometry, public.spheroid)">
      <title id="public.function.st-distance-spheroid-public.geometry-public.geometry-public.spheroid-title">
       st_distance_spheroid(public.geometry, public.geometry, public.spheroid)
      </title>
      <titleabbrev id="public.function.st-distance-spheroid-public.geometry-public.geometry-public.spheroid-titleabbrev">
       st_distance_spheroid(public.geometry, public.geometry, public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_distance_ellipsoid_point</programlisting>
      </para>
    </section>

<!-- Function st_dropbbox(public.geometry) -->
    <section id="public.function.st-dropbbox-public.geometry"
             xreflabel="publicst_dropbbox(public.geometry)">
      <title id="public.function.st-dropbbox-public.geometry-title">
       st_dropbbox(public.geometry)
      </title>
      <titleabbrev id="public.function.st-dropbbox-public.geometry-titleabbrev">
       st_dropbbox(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_dropBBOX</programlisting>
      </para>
    </section>

<!-- Function st_dump(public.geometry) -->
    <section id="public.function.st-dump-public.geometry"
             xreflabel="publicst_dump(public.geometry)">
      <title id="public.function.st-dump-public.geometry-title">
       st_dump(public.geometry)
      </title>
      <titleabbrev id="public.function.st-dump-public.geometry-titleabbrev">
       st_dump(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF geometry_dump</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_dump</programlisting>
      </para>
    </section>

<!-- Function st_dumprings(public.geometry) -->
    <section id="public.function.st-dumprings-public.geometry"
             xreflabel="publicst_dumprings(public.geometry)">
      <title id="public.function.st-dumprings-public.geometry-title">
       st_dumprings(public.geometry)
      </title>
      <titleabbrev id="public.function.st-dumprings-public.geometry-titleabbrev">
       st_dumprings(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>SET OF geometry_dump</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_dump_rings</programlisting>
      </para>
    </section>

<!-- Function st_dwithin(public.geometry, public.geometry, double precision) -->
    <section id="public.function.st-dwithin-public.geometry-public.geometry-double-precision"
             xreflabel="publicst_dwithin(public.geometry, public.geometry, double precision)">
      <title id="public.function.st-dwithin-public.geometry-public.geometry-double-precision-title">
       st_dwithin(public.geometry, public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-dwithin-public.geometry-public.geometry-double-precision-titleabbrev">
       st_dwithin(public.geometry, public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT $1 &amp;&amp; ST_Expand($2,$3) AND $2 &amp;&amp; ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3)</programlisting>
      </para>
    </section>

<!-- Function st_endpoint(public.geometry) -->
    <section id="public.function.st-endpoint-public.geometry"
             xreflabel="publicst_endpoint(public.geometry)">
      <title id="public.function.st-endpoint-public.geometry-title">
       st_endpoint(public.geometry)
      </title>
      <titleabbrev id="public.function.st-endpoint-public.geometry-titleabbrev">
       st_endpoint(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_endpoint_linestring</programlisting>
      </para>
    </section>

<!-- Function st_envelope(public.geometry) -->
    <section id="public.function.st-envelope-public.geometry"
             xreflabel="publicst_envelope(public.geometry)">
      <title id="public.function.st-envelope-public.geometry-title">
       st_envelope(public.geometry)
      </title>
      <titleabbrev id="public.function.st-envelope-public.geometry-titleabbrev">
       st_envelope(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_envelope</programlisting>
      </para>
    </section>

<!-- Function st_equals(public.geometry, public.geometry) -->
    <section id="public.function.st-equals-public.geometry-public.geometry"
             xreflabel="publicst_equals(public.geometry, public.geometry)">
      <title id="public.function.st-equals-public.geometry-public.geometry-title">
       st_equals(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-equals-public.geometry-public.geometry-titleabbrev">
       st_equals(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>geomequals</programlisting>
      </para>
    </section>

<!-- Function st_estimate_histogram2d(public.histogram2d, public.box2d) -->
    <section id="public.function.st-estimate-histogram2d-public.histogram2d-public.box2d"
             xreflabel="publicst_estimate_histogram2d(public.histogram2d, public.box2d)">
      <title id="public.function.st-estimate-histogram2d-public.histogram2d-public.box2d-title">
       st_estimate_histogram2d(public.histogram2d, public.box2d)
      </title>
      <titleabbrev id="public.function.st-estimate-histogram2d-public.histogram2d-public.box2d-titleabbrev">
       st_estimate_histogram2d(public.histogram2d, public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>estimate_lwhistogram2d</programlisting>
      </para>
    </section>

<!-- Function st_estimated_extent(text, text) -->
    <section id="public.function.st-estimated-extent-text-text"
             xreflabel="publicst_estimated_extent(text, text)">
      <title id="public.function.st-estimated-extent-text-text-title">
       st_estimated_extent(text, text)
      </title>
      <titleabbrev id="public.function.st-estimated-extent-text-text-titleabbrev">
       st_estimated_extent(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_estimated_extent</programlisting>
      </para>
    </section>

<!-- Function st_estimated_extent(text, text, text) -->
    <section id="public.function.st-estimated-extent-text-text-text"
             xreflabel="publicst_estimated_extent(text, text, text)">
      <title id="public.function.st-estimated-extent-text-text-text-title">
       st_estimated_extent(text, text, text)
      </title>
      <titleabbrev id="public.function.st-estimated-extent-text-text-text-titleabbrev">
       st_estimated_extent(text, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_estimated_extent</programlisting>
      </para>
    </section>

<!-- Function st_expand(public.box2d, double precision) -->
    <section id="public.function.st-expand-public.box2d-double-precision"
             xreflabel="publicst_expand(public.box2d, double precision)">
      <title id="public.function.st-expand-public.box2d-double-precision-title">
       st_expand(public.box2d, double precision)
      </title>
      <titleabbrev id="public.function.st-expand-public.box2d-double-precision-titleabbrev">
       st_expand(public.box2d, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_expand</programlisting>
      </para>
    </section>

<!-- Function st_expand(public.box3d, double precision) -->
    <section id="public.function.st-expand-public.box3d-double-precision"
             xreflabel="publicst_expand(public.box3d, double precision)">
      <title id="public.function.st-expand-public.box3d-double-precision-title">
       st_expand(public.box3d, double precision)
      </title>
      <titleabbrev id="public.function.st-expand-public.box3d-double-precision-titleabbrev">
       st_expand(public.box3d, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_expand</programlisting>
      </para>
    </section>

<!-- Function st_expand(public.geometry, double precision) -->
    <section id="public.function.st-expand-public.geometry-double-precision"
             xreflabel="publicst_expand(public.geometry, double precision)">
      <title id="public.function.st-expand-public.geometry-double-precision-title">
       st_expand(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-expand-public.geometry-double-precision-titleabbrev">
       st_expand(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_expand</programlisting>
      </para>
    </section>

<!-- Function st_explode_histogram2d(public.histogram2d, text) -->
    <section id="public.function.st-explode-histogram2d-public.histogram2d-text"
             xreflabel="publicst_explode_histogram2d(public.histogram2d, text)">
      <title id="public.function.st-explode-histogram2d-public.histogram2d-text-title">
       st_explode_histogram2d(public.histogram2d, text)
      </title>
      <titleabbrev id="public.function.st-explode-histogram2d-public.histogram2d-text-titleabbrev">
       st_explode_histogram2d(public.histogram2d, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>explode_lwhistogram2d</programlisting>
      </para>
    </section>

<!-- Function st_extent(public.geometry) -->
    <section id="public.function.st-extent-public.geometry"
             xreflabel="publicst_extent(public.geometry)">
      <title id="public.function.st-extent-public.geometry-title">
       st_extent(public.geometry)
      </title>
      <titleabbrev id="public.function.st-extent-public.geometry-titleabbrev">
       st_extent(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function st_extent3d(public.geometry) -->
    <section id="public.function.st-extent3d-public.geometry"
             xreflabel="publicst_extent3d(public.geometry)">
      <title id="public.function.st-extent3d-public.geometry-title">
       st_extent3d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-extent3d-public.geometry-titleabbrev">
       st_extent3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function st_exteriorring(public.geometry) -->
    <section id="public.function.st-exteriorring-public.geometry"
             xreflabel="publicst_exteriorring(public.geometry)">
      <title id="public.function.st-exteriorring-public.geometry-title">
       st_exteriorring(public.geometry)
      </title>
      <titleabbrev id="public.function.st-exteriorring-public.geometry-titleabbrev">
       st_exteriorring(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_exteriorring_polygon</programlisting>
      </para>
    </section>

<!-- Function st_factor(public.chip) -->
    <section id="public.function.st-factor-public.chip"
             xreflabel="publicst_factor(public.chip)">
      <title id="public.function.st-factor-public.chip-title">
       st_factor(public.chip)
      </title>
      <titleabbrev id="public.function.st-factor-public.chip-titleabbrev">
       st_factor(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>real</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getFactor</programlisting>
      </para>
    </section>

<!-- Function st_find_extent(text, text) -->
    <section id="public.function.st-find-extent-text-text"
             xreflabel="publicst_find_extent(text, text)">
      <title id="public.function.st-find-extent-text-text-title">
       st_find_extent(text, text)
      </title>
      <titleabbrev id="public.function.st-find-extent-text-text-titleabbrev">
       st_find_extent(text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE &#39;SELECT extent(&quot;&#39;||columnname||&#39;&quot;) FROM &quot;&#39;||tablename||&#39;&quot;&#39; LOOP
		return myrec.extent;
	END LOOP; 
END;
</programlisting>
      </para>
    </section>

<!-- Function st_find_extent(text, text, text) -->
    <section id="public.function.st-find-extent-text-text-text"
             xreflabel="publicst_find_extent(text, text, text)">
      <title id="public.function.st-find-extent-text-text-text-title">
       st_find_extent(text, text, text)
      </title>
      <titleabbrev id="public.function.st-find-extent-text-text-text-titleabbrev">
       st_find_extent(text, text, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;

BEGIN
	FOR myrec IN EXECUTE &#39;SELECT extent(&quot;&#39;||columnname||&#39;&quot;) FROM &quot;&#39;||schemaname||&#39;&quot;.&quot;&#39;||tablename||&#39;&quot;&#39; LOOP
		return myrec.extent;
	END LOOP; 
END;
</programlisting>
      </para>
    </section>

<!-- Function st_force_2d(public.geometry) -->
    <section id="public.function.st-force-2d-public.geometry"
             xreflabel="publicst_force_2d(public.geometry)">
      <title id="public.function.st-force-2d-public.geometry-title">
       st_force_2d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-force-2d-public.geometry-titleabbrev">
       st_force_2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_2d</programlisting>
      </para>
    </section>

<!-- Function st_force_3d(public.geometry) -->
    <section id="public.function.st-force-3d-public.geometry"
             xreflabel="publicst_force_3d(public.geometry)">
      <title id="public.function.st-force-3d-public.geometry-title">
       st_force_3d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-force-3d-public.geometry-titleabbrev">
       st_force_3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_3dz</programlisting>
      </para>
    </section>

<!-- Function st_force_3dm(public.geometry) -->
    <section id="public.function.st-force-3dm-public.geometry"
             xreflabel="publicst_force_3dm(public.geometry)">
      <title id="public.function.st-force-3dm-public.geometry-title">
       st_force_3dm(public.geometry)
      </title>
      <titleabbrev id="public.function.st-force-3dm-public.geometry-titleabbrev">
       st_force_3dm(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_3dm</programlisting>
      </para>
    </section>

<!-- Function st_force_3dz(public.geometry) -->
    <section id="public.function.st-force-3dz-public.geometry"
             xreflabel="publicst_force_3dz(public.geometry)">
      <title id="public.function.st-force-3dz-public.geometry-title">
       st_force_3dz(public.geometry)
      </title>
      <titleabbrev id="public.function.st-force-3dz-public.geometry-titleabbrev">
       st_force_3dz(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_3dz</programlisting>
      </para>
    </section>

<!-- Function st_force_4d(public.geometry) -->
    <section id="public.function.st-force-4d-public.geometry"
             xreflabel="publicst_force_4d(public.geometry)">
      <title id="public.function.st-force-4d-public.geometry-title">
       st_force_4d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-force-4d-public.geometry-titleabbrev">
       st_force_4d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_4d</programlisting>
      </para>
    </section>

<!-- Function st_force_collection(public.geometry) -->
    <section id="public.function.st-force-collection-public.geometry"
             xreflabel="publicst_force_collection(public.geometry)">
      <title id="public.function.st-force-collection-public.geometry-title">
       st_force_collection(public.geometry)
      </title>
      <titleabbrev id="public.function.st-force-collection-public.geometry-titleabbrev">
       st_force_collection(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_collection</programlisting>
      </para>
    </section>

<!-- Function st_forcerhr(public.geometry) -->
    <section id="public.function.st-forcerhr-public.geometry"
             xreflabel="publicst_forcerhr(public.geometry)">
      <title id="public.function.st-forcerhr-public.geometry-title">
       st_forcerhr(public.geometry)
      </title>
      <titleabbrev id="public.function.st-forcerhr-public.geometry-titleabbrev">
       st_forcerhr(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_forceRHR_poly</programlisting>
      </para>
    </section>

<!-- Function st_geom_accum(public.geometry[], public.geometry) -->
    <section id="public.function.st-geom-accum-public.geometryARRAY-public.geometry"
             xreflabel="publicst_geom_accum(public.geometry[], public.geometry)">
      <title id="public.function.st-geom-accum-public.geometryARRAY-public.geometry-title">
       st_geom_accum(public.geometry[], public.geometry)
      </title>
      <titleabbrev id="public.function.st-geom-accum-public.geometryARRAY-public.geometry-titleabbrev">
       st_geom_accum(public.geometry[], public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry[]</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_accum</programlisting>
      </para>
    </section>

<!-- Function st_geomcollfromtext(text) -->
    <section id="public.function.st-geomcollfromtext-text"
             xreflabel="publicst_geomcollfromtext(text)">
      <title id="public.function.st-geomcollfromtext-text-title">
       st_geomcollfromtext(text)
      </title>
      <titleabbrev id="public.function.st-geomcollfromtext-text-titleabbrev">
       st_geomcollfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromText($1)) = &#39;GEOMETRYCOLLECTION&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_geomcollfromtext(text, integer) -->
    <section id="public.function.st-geomcollfromtext-text-integer"
             xreflabel="publicst_geomcollfromtext(text, integer)">
      <title id="public.function.st-geomcollfromtext-text-integer-title">
       st_geomcollfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-geomcollfromtext-text-integer-titleabbrev">
       st_geomcollfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = &#39;GEOMETRYCOLLECTION&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_geomcollfromwkb(bytea) -->
    <section id="public.function.st-geomcollfromwkb-bytea"
             xreflabel="publicst_geomcollfromwkb(bytea)">
      <title id="public.function.st-geomcollfromwkb-bytea-title">
       st_geomcollfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-geomcollfromwkb-bytea-titleabbrev">
       st_geomcollfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1)) = &#39;GEOMETRYCOLLECTION&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_geomcollfromwkb(bytea, integer) -->
    <section id="public.function.st-geomcollfromwkb-bytea-integer"
             xreflabel="publicst_geomcollfromwkb(bytea, integer)">
      <title id="public.function.st-geomcollfromwkb-bytea-integer-title">
       st_geomcollfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-geomcollfromwkb-bytea-integer-titleabbrev">
       st_geomcollfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;GEOMETRYCOLLECTION&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_geometry(bytea) -->
    <section id="public.function.st-geometry-bytea"
             xreflabel="publicst_geometry(bytea)">
      <title id="public.function.st-geometry-bytea-title">
       st_geometry(bytea)
      </title>
      <titleabbrev id="public.function.st-geometry-bytea-titleabbrev">
       st_geometry(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_from_bytea</programlisting>
      </para>
    </section>

<!-- Function st_geometry(public.box2d) -->
    <section id="public.function.st-geometry-public.box2d"
             xreflabel="publicst_geometry(public.box2d)">
      <title id="public.function.st-geometry-public.box2d-title">
       st_geometry(public.box2d)
      </title>
      <titleabbrev id="public.function.st-geometry-public.box2d-titleabbrev">
       st_geometry(public.box2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_to_LWGEOM</programlisting>
      </para>
    </section>

<!-- Function st_geometry(public.box3d) -->
    <section id="public.function.st-geometry-public.box3d"
             xreflabel="publicst_geometry(public.box3d)">
      <title id="public.function.st-geometry-public.box3d-title">
       st_geometry(public.box3d)
      </title>
      <titleabbrev id="public.function.st-geometry-public.box3d-titleabbrev">
       st_geometry(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_to_LWGEOM</programlisting>
      </para>
    </section>

<!-- Function st_geometry(public.chip) -->
    <section id="public.function.st-geometry-public.chip"
             xreflabel="publicst_geometry(public.chip)">
      <title id="public.function.st-geometry-public.chip-title">
       st_geometry(public.chip)
      </title>
      <titleabbrev id="public.function.st-geometry-public.chip-titleabbrev">
       st_geometry(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_to_LWGEOM</programlisting>
      </para>
    </section>

<!-- Function st_geometry(text) -->
    <section id="public.function.st-geometry-text"
             xreflabel="publicst_geometry(text)">
      <title id="public.function.st-geometry-text-title">
       st_geometry(text)
      </title>
      <titleabbrev id="public.function.st-geometry-text-titleabbrev">
       st_geometry(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>parse_WKT_lwgeom</programlisting>
      </para>
    </section>

<!-- Function st_geometry_above(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-above-public.geometry-public.geometry"
             xreflabel="publicst_geometry_above(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-above-public.geometry-public.geometry-title">
       st_geometry_above(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-above-public.geometry-public.geometry-titleabbrev">
       st_geometry_above(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_above</programlisting>
      </para>
    </section>

<!-- Function st_geometry_analyze(internal) -->
    <section id="public.function.st-geometry-analyze-internal"
             xreflabel="publicst_geometry_analyze(internal)">
      <title id="public.function.st-geometry-analyze-internal-title">
       st_geometry_analyze(internal)
      </title>
      <titleabbrev id="public.function.st-geometry-analyze-internal-titleabbrev">
       st_geometry_analyze(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_analyze</programlisting>
      </para>
    </section>

<!-- Function st_geometry_below(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-below-public.geometry-public.geometry"
             xreflabel="publicst_geometry_below(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-below-public.geometry-public.geometry-title">
       st_geometry_below(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-below-public.geometry-public.geometry-titleabbrev">
       st_geometry_below(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_below</programlisting>
      </para>
    </section>

<!-- Function st_geometry_cmp(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-cmp-public.geometry-public.geometry"
             xreflabel="publicst_geometry_cmp(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-cmp-public.geometry-public.geometry-title">
       st_geometry_cmp(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-cmp-public.geometry-public.geometry-titleabbrev">
       st_geometry_cmp(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_cmp</programlisting>
      </para>
    </section>

<!-- Function st_geometry_contain(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-contain-public.geometry-public.geometry"
             xreflabel="publicst_geometry_contain(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-contain-public.geometry-public.geometry-title">
       st_geometry_contain(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-contain-public.geometry-public.geometry-titleabbrev">
       st_geometry_contain(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_contain</programlisting>
      </para>
    </section>

<!-- Function st_geometry_contained(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-contained-public.geometry-public.geometry"
             xreflabel="publicst_geometry_contained(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-contained-public.geometry-public.geometry-title">
       st_geometry_contained(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-contained-public.geometry-public.geometry-titleabbrev">
       st_geometry_contained(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_contained</programlisting>
      </para>
    </section>

<!-- Function st_geometry_eq(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-eq-public.geometry-public.geometry"
             xreflabel="publicst_geometry_eq(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-eq-public.geometry-public.geometry-title">
       st_geometry_eq(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-eq-public.geometry-public.geometry-titleabbrev">
       st_geometry_eq(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_eq</programlisting>
      </para>
    </section>

<!-- Function st_geometry_ge(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-ge-public.geometry-public.geometry"
             xreflabel="publicst_geometry_ge(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-ge-public.geometry-public.geometry-title">
       st_geometry_ge(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-ge-public.geometry-public.geometry-titleabbrev">
       st_geometry_ge(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_ge</programlisting>
      </para>
    </section>

<!-- Function st_geometry_gt(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-gt-public.geometry-public.geometry"
             xreflabel="publicst_geometry_gt(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-gt-public.geometry-public.geometry-title">
       st_geometry_gt(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-gt-public.geometry-public.geometry-titleabbrev">
       st_geometry_gt(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_gt</programlisting>
      </para>
    </section>

<!-- Function st_geometry_in(cstring) -->
    <section id="public.function.st-geometry-in-cstring"
             xreflabel="publicst_geometry_in(cstring)">
      <title id="public.function.st-geometry-in-cstring-title">
       st_geometry_in(cstring)
      </title>
      <titleabbrev id="public.function.st-geometry-in-cstring-titleabbrev">
       st_geometry_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_in</programlisting>
      </para>
    </section>

<!-- Function st_geometry_le(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-le-public.geometry-public.geometry"
             xreflabel="publicst_geometry_le(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-le-public.geometry-public.geometry-title">
       st_geometry_le(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-le-public.geometry-public.geometry-titleabbrev">
       st_geometry_le(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_le</programlisting>
      </para>
    </section>

<!-- Function st_geometry_left(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-left-public.geometry-public.geometry"
             xreflabel="publicst_geometry_left(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-left-public.geometry-public.geometry-title">
       st_geometry_left(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-left-public.geometry-public.geometry-titleabbrev">
       st_geometry_left(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_left</programlisting>
      </para>
    </section>

<!-- Function st_geometry_lt(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-lt-public.geometry-public.geometry"
             xreflabel="publicst_geometry_lt(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-lt-public.geometry-public.geometry-title">
       st_geometry_lt(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-lt-public.geometry-public.geometry-titleabbrev">
       st_geometry_lt(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwgeom_lt</programlisting>
      </para>
    </section>

<!-- Function st_geometry_out(public.geometry) -->
    <section id="public.function.st-geometry-out-public.geometry"
             xreflabel="publicst_geometry_out(public.geometry)">
      <title id="public.function.st-geometry-out-public.geometry-title">
       st_geometry_out(public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-out-public.geometry-titleabbrev">
       st_geometry_out(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_out</programlisting>
      </para>
    </section>

<!-- Function st_geometry_overabove(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-overabove-public.geometry-public.geometry"
             xreflabel="publicst_geometry_overabove(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-overabove-public.geometry-public.geometry-title">
       st_geometry_overabove(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-overabove-public.geometry-public.geometry-titleabbrev">
       st_geometry_overabove(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overabove</programlisting>
      </para>
    </section>

<!-- Function st_geometry_overbelow(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-overbelow-public.geometry-public.geometry"
             xreflabel="publicst_geometry_overbelow(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-overbelow-public.geometry-public.geometry-title">
       st_geometry_overbelow(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-overbelow-public.geometry-public.geometry-titleabbrev">
       st_geometry_overbelow(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overbelow</programlisting>
      </para>
    </section>

<!-- Function st_geometry_overlap(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-overlap-public.geometry-public.geometry"
             xreflabel="publicst_geometry_overlap(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-overlap-public.geometry-public.geometry-title">
       st_geometry_overlap(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-overlap-public.geometry-public.geometry-titleabbrev">
       st_geometry_overlap(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overlap</programlisting>
      </para>
    </section>

<!-- Function st_geometry_overleft(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-overleft-public.geometry-public.geometry"
             xreflabel="publicst_geometry_overleft(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-overleft-public.geometry-public.geometry-title">
       st_geometry_overleft(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-overleft-public.geometry-public.geometry-titleabbrev">
       st_geometry_overleft(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overleft</programlisting>
      </para>
    </section>

<!-- Function st_geometry_overright(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-overright-public.geometry-public.geometry"
             xreflabel="publicst_geometry_overright(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-overright-public.geometry-public.geometry-title">
       st_geometry_overright(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-overright-public.geometry-public.geometry-titleabbrev">
       st_geometry_overright(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_overright</programlisting>
      </para>
    </section>

<!-- Function st_geometry_recv(internal) -->
    <section id="public.function.st-geometry-recv-internal"
             xreflabel="publicst_geometry_recv(internal)">
      <title id="public.function.st-geometry-recv-internal-title">
       st_geometry_recv(internal)
      </title>
      <titleabbrev id="public.function.st-geometry-recv-internal-titleabbrev">
       st_geometry_recv(internal)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_recv</programlisting>
      </para>
    </section>

<!-- Function st_geometry_right(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-right-public.geometry-public.geometry"
             xreflabel="publicst_geometry_right(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-right-public.geometry-public.geometry-title">
       st_geometry_right(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-right-public.geometry-public.geometry-titleabbrev">
       st_geometry_right(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_right</programlisting>
      </para>
    </section>

<!-- Function st_geometry_same(public.geometry, public.geometry) -->
    <section id="public.function.st-geometry-same-public.geometry-public.geometry"
             xreflabel="publicst_geometry_same(public.geometry, public.geometry)">
      <title id="public.function.st-geometry-same-public.geometry-public.geometry-title">
       st_geometry_same(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-same-public.geometry-public.geometry-titleabbrev">
       st_geometry_same(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_same</programlisting>
      </para>
    </section>

<!-- Function st_geometry_send(public.geometry) -->
    <section id="public.function.st-geometry-send-public.geometry"
             xreflabel="publicst_geometry_send(public.geometry)">
      <title id="public.function.st-geometry-send-public.geometry-title">
       st_geometry_send(public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometry-send-public.geometry-titleabbrev">
       st_geometry_send(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>bytea</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_send</programlisting>
      </para>
    </section>

<!-- Function st_geometryfromtext(text) -->
    <section id="public.function.st-geometryfromtext-text"
             xreflabel="publicst_geometryfromtext(text)">
      <title id="public.function.st-geometryfromtext-text-title">
       st_geometryfromtext(text)
      </title>
      <titleabbrev id="public.function.st-geometryfromtext-text-titleabbrev">
       st_geometryfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_from_text</programlisting>
      </para>
    </section>

<!-- Function st_geometryfromtext(text, integer) -->
    <section id="public.function.st-geometryfromtext-text-integer"
             xreflabel="publicst_geometryfromtext(text, integer)">
      <title id="public.function.st-geometryfromtext-text-integer-title">
       st_geometryfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-geometryfromtext-text-integer-titleabbrev">
       st_geometryfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_from_text</programlisting>
      </para>
    </section>

<!-- Function st_geometryn(public.geometry, integer) -->
    <section id="public.function.st-geometryn-public.geometry-integer"
             xreflabel="publicst_geometryn(public.geometry, integer)">
      <title id="public.function.st-geometryn-public.geometry-integer-title">
       st_geometryn(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-geometryn-public.geometry-integer-titleabbrev">
       st_geometryn(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_geometryn_collection</programlisting>
      </para>
    </section>

<!-- Function st_geometrytype(public.geometry) -->
    <section id="public.function.st-geometrytype-public.geometry"
             xreflabel="publicst_geometrytype(public.geometry)">
      <title id="public.function.st-geometrytype-public.geometry-title">
       st_geometrytype(public.geometry)
      </title>
      <titleabbrev id="public.function.st-geometrytype-public.geometry-titleabbrev">
       st_geometrytype(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    DECLARE
        gtype text := geometrytype($1);
    BEGIN
        IF (gtype IN (&#39;POINT&#39;, &#39;POINTM&#39;)) THEN
            gtype := &#39;Point&#39;;
        ELSIF (gtype IN (&#39;LINESTRING&#39;, &#39;LINESTRINGM&#39;)) THEN
            gtype := &#39;LineString&#39;;
        ELSIF (gtype IN (&#39;POLYGON&#39;, &#39;POLYGONM&#39;)) THEN
            gtype := &#39;Polygon&#39;;
        ELSIF (gtype IN (&#39;MULTIPOINT&#39;, &#39;MULTIPOINTM&#39;)) THEN
            gtype := &#39;MultiPoint&#39;;
        ELSIF (gtype IN (&#39;MULTILINESTRING&#39;, &#39;MULTILINESTRINGM&#39;)) THEN
            gtype := &#39;MultiLineString&#39;;
        ELSIF (gtype IN (&#39;MULTIPOLYGON&#39;, &#39;MULTIPOLYGONM&#39;)) THEN
            gtype := &#39;MultiPolygon&#39;;
        ELSE
            gtype := &#39;Geometry&#39;;
        END IF;
        RETURN &#39;ST_&#39; || gtype;
    END
	</programlisting>
      </para>
    </section>

<!-- Function st_geomfromewkb(bytea) -->
    <section id="public.function.st-geomfromewkb-bytea"
             xreflabel="publicst_geomfromewkb(bytea)">
      <title id="public.function.st-geomfromewkb-bytea-title">
       st_geomfromewkb(bytea)
      </title>
      <titleabbrev id="public.function.st-geomfromewkb-bytea-titleabbrev">
       st_geomfromewkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOMFromWKB</programlisting>
      </para>
    </section>

<!-- Function st_geomfromewkt(text) -->
    <section id="public.function.st-geomfromewkt-text"
             xreflabel="publicst_geomfromewkt(text)">
      <title id="public.function.st-geomfromewkt-text-title">
       st_geomfromewkt(text)
      </title>
      <titleabbrev id="public.function.st-geomfromewkt-text-titleabbrev">
       st_geomfromewkt(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>parse_WKT_lwgeom</programlisting>
      </para>
    </section>

<!-- Function st_geomfromtext(text) -->
    <section id="public.function.st-geomfromtext-text"
             xreflabel="publicst_geomfromtext(text)">
      <title id="public.function.st-geomfromtext-text-title">
       st_geomfromtext(text)
      </title>
      <titleabbrev id="public.function.st-geomfromtext-text-titleabbrev">
       st_geomfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT geometryfromtext($1)</programlisting>
      </para>
    </section>

<!-- Function st_geomfromtext(text, integer) -->
    <section id="public.function.st-geomfromtext-text-integer"
             xreflabel="publicst_geomfromtext(text, integer)">
      <title id="public.function.st-geomfromtext-text-integer-title">
       st_geomfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-geomfromtext-text-integer-titleabbrev">
       st_geomfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT geometryfromtext($1, $2)</programlisting>
      </para>
    </section>

<!-- Function st_geomfromwkb(bytea) -->
    <section id="public.function.st-geomfromwkb-bytea"
             xreflabel="publicst_geomfromwkb(bytea)">
      <title id="public.function.st-geomfromwkb-bytea-title">
       st_geomfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-geomfromwkb-bytea-titleabbrev">
       st_geomfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_from_WKB</programlisting>
      </para>
    </section>

<!-- Function st_geomfromwkb(bytea, integer) -->
    <section id="public.function.st-geomfromwkb-bytea-integer"
             xreflabel="publicst_geomfromwkb(bytea, integer)">
      <title id="public.function.st-geomfromwkb-bytea-integer-title">
       st_geomfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-geomfromwkb-bytea-integer-titleabbrev">
       st_geomfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT setSRID(GeomFromWKB($1), $2)</programlisting>
      </para>
    </section>

<!-- Function st_hasarc(public.geometry) -->
    <section id="public.function.st-hasarc-public.geometry"
             xreflabel="publicst_hasarc(public.geometry)">
      <title id="public.function.st-hasarc-public.geometry-title">
       st_hasarc(public.geometry)
      </title>
      <titleabbrev id="public.function.st-hasarc-public.geometry-titleabbrev">
       st_hasarc(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_has_arc</programlisting>
      </para>
    </section>

<!-- Function st_hasbbox(public.geometry) -->
    <section id="public.function.st-hasbbox-public.geometry"
             xreflabel="publicst_hasbbox(public.geometry)">
      <title id="public.function.st-hasbbox-public.geometry-title">
       st_hasbbox(public.geometry)
      </title>
      <titleabbrev id="public.function.st-hasbbox-public.geometry-titleabbrev">
       st_hasbbox(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_hasBBOX</programlisting>
      </para>
    </section>

<!-- Function st_height(public.chip) -->
    <section id="public.function.st-height-public.chip"
             xreflabel="publicst_height(public.chip)">
      <title id="public.function.st-height-public.chip-title">
       st_height(public.chip)
      </title>
      <titleabbrev id="public.function.st-height-public.chip-titleabbrev">
       st_height(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getHeight</programlisting>
      </para>
    </section>

<!-- Function st_histogram2d_in(cstring) -->
    <section id="public.function.st-histogram2d-in-cstring"
             xreflabel="publicst_histogram2d_in(cstring)">
      <title id="public.function.st-histogram2d-in-cstring-title">
       st_histogram2d_in(cstring)
      </title>
      <titleabbrev id="public.function.st-histogram2d-in-cstring-titleabbrev">
       st_histogram2d_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>histogram2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwhistogram2d_in</programlisting>
      </para>
    </section>

<!-- Function st_histogram2d_out(public.histogram2d) -->
    <section id="public.function.st-histogram2d-out-public.histogram2d"
             xreflabel="publicst_histogram2d_out(public.histogram2d)">
      <title id="public.function.st-histogram2d-out-public.histogram2d-title">
       st_histogram2d_out(public.histogram2d)
      </title>
      <titleabbrev id="public.function.st-histogram2d-out-public.histogram2d-titleabbrev">
       st_histogram2d_out(public.histogram2d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>lwhistogram2d_out</programlisting>
      </para>
    </section>

<!-- Function st_interiorringn(public.geometry, integer) -->
    <section id="public.function.st-interiorringn-public.geometry-integer"
             xreflabel="publicst_interiorringn(public.geometry, integer)">
      <title id="public.function.st-interiorringn-public.geometry-integer-title">
       st_interiorringn(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-interiorringn-public.geometry-integer-titleabbrev">
       st_interiorringn(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_interiorringn_polygon</programlisting>
      </para>
    </section>

<!-- Function st_intersection(public.geometry, public.geometry) -->
    <section id="public.function.st-intersection-public.geometry-public.geometry"
             xreflabel="publicst_intersection(public.geometry, public.geometry)">
      <title id="public.function.st-intersection-public.geometry-public.geometry-title">
       st_intersection(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-intersection-public.geometry-public.geometry-titleabbrev">
       st_intersection(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>intersection</programlisting>
      </para>
    </section>

<!-- Function st_intersects(public.geometry, public.geometry) -->
    <section id="public.function.st-intersects-public.geometry-public.geometry"
             xreflabel="publicst_intersects(public.geometry, public.geometry)">
      <title id="public.function.st-intersects-public.geometry-public.geometry-title">
       st_intersects(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-intersects-public.geometry-public.geometry-titleabbrev">
       st_intersects(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT $1 &amp;&amp; $2 AND _ST_Intersects($1,$2)</programlisting>
      </para>
    </section>

<!-- Function st_isclosed(public.geometry) -->
    <section id="public.function.st-isclosed-public.geometry"
             xreflabel="publicst_isclosed(public.geometry)">
      <title id="public.function.st-isclosed-public.geometry-title">
       st_isclosed(public.geometry)
      </title>
      <titleabbrev id="public.function.st-isclosed-public.geometry-titleabbrev">
       st_isclosed(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_isclosed_linestring</programlisting>
      </para>
    </section>

<!-- Function st_isempty(public.geometry) -->
    <section id="public.function.st-isempty-public.geometry"
             xreflabel="publicst_isempty(public.geometry)">
      <title id="public.function.st-isempty-public.geometry-title">
       st_isempty(public.geometry)
      </title>
      <titleabbrev id="public.function.st-isempty-public.geometry-titleabbrev">
       st_isempty(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_isempty</programlisting>
      </para>
    </section>

<!-- Function st_isring(public.geometry) -->
    <section id="public.function.st-isring-public.geometry"
             xreflabel="publicst_isring(public.geometry)">
      <title id="public.function.st-isring-public.geometry-title">
       st_isring(public.geometry)
      </title>
      <titleabbrev id="public.function.st-isring-public.geometry-titleabbrev">
       st_isring(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>isring</programlisting>
      </para>
    </section>

<!-- Function st_issimple(public.geometry) -->
    <section id="public.function.st-issimple-public.geometry"
             xreflabel="publicst_issimple(public.geometry)">
      <title id="public.function.st-issimple-public.geometry-title">
       st_issimple(public.geometry)
      </title>
      <titleabbrev id="public.function.st-issimple-public.geometry-titleabbrev">
       st_issimple(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>issimple</programlisting>
      </para>
    </section>

<!-- Function st_isvalid(public.geometry) -->
    <section id="public.function.st-isvalid-public.geometry"
             xreflabel="publicst_isvalid(public.geometry)">
      <title id="public.function.st-isvalid-public.geometry-title">
       st_isvalid(public.geometry)
      </title>
      <titleabbrev id="public.function.st-isvalid-public.geometry-titleabbrev">
       st_isvalid(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>isvalid</programlisting>
      </para>
    </section>

<!-- Function st_length(public.geometry) -->
    <section id="public.function.st-length-public.geometry"
             xreflabel="publicst_length(public.geometry)">
      <title id="public.function.st-length-public.geometry-title">
       st_length(public.geometry)
      </title>
      <titleabbrev id="public.function.st-length-public.geometry-titleabbrev">
       st_length(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length2d_linestring</programlisting>
      </para>
    </section>

<!-- Function st_length2d(public.geometry) -->
    <section id="public.function.st-length2d-public.geometry"
             xreflabel="publicst_length2d(public.geometry)">
      <title id="public.function.st-length2d-public.geometry-title">
       st_length2d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-length2d-public.geometry-titleabbrev">
       st_length2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length2d_linestring</programlisting>
      </para>
    </section>

<!-- Function st_length2d_spheroid(public.geometry, public.spheroid) -->
    <section id="public.function.st-length2d-spheroid-public.geometry-public.spheroid"
             xreflabel="publicst_length2d_spheroid(public.geometry, public.spheroid)">
      <title id="public.function.st-length2d-spheroid-public.geometry-public.spheroid-title">
       st_length2d_spheroid(public.geometry, public.spheroid)
      </title>
      <titleabbrev id="public.function.st-length2d-spheroid-public.geometry-public.spheroid-titleabbrev">
       st_length2d_spheroid(public.geometry, public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length2d_ellipsoid_linestring</programlisting>
      </para>
    </section>

<!-- Function st_length3d(public.geometry) -->
    <section id="public.function.st-length3d-public.geometry"
             xreflabel="publicst_length3d(public.geometry)">
      <title id="public.function.st-length3d-public.geometry-title">
       st_length3d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-length3d-public.geometry-titleabbrev">
       st_length3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length_linestring</programlisting>
      </para>
    </section>

<!-- Function st_length3d_spheroid(public.geometry, public.spheroid) -->
    <section id="public.function.st-length3d-spheroid-public.geometry-public.spheroid"
             xreflabel="publicst_length3d_spheroid(public.geometry, public.spheroid)">
      <title id="public.function.st-length3d-spheroid-public.geometry-public.spheroid-title">
       st_length3d_spheroid(public.geometry, public.spheroid)
      </title>
      <titleabbrev id="public.function.st-length3d-spheroid-public.geometry-public.spheroid-titleabbrev">
       st_length3d_spheroid(public.geometry, public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length_ellipsoid_linestring</programlisting>
      </para>
    </section>

<!-- Function st_length_spheroid(public.geometry, public.spheroid) -->
    <section id="public.function.st-length-spheroid-public.geometry-public.spheroid"
             xreflabel="publicst_length_spheroid(public.geometry, public.spheroid)">
      <title id="public.function.st-length-spheroid-public.geometry-public.spheroid-title">
       st_length_spheroid(public.geometry, public.spheroid)
      </title>
      <titleabbrev id="public.function.st-length-spheroid-public.geometry-public.spheroid-titleabbrev">
       st_length_spheroid(public.geometry, public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_length_ellipsoid_linestring</programlisting>
      </para>
    </section>

<!-- Function st_line_interpolate_point(public.geometry, double precision) -->
    <section id="public.function.st-line-interpolate-point-public.geometry-double-precision"
             xreflabel="publicst_line_interpolate_point(public.geometry, double precision)">
      <title id="public.function.st-line-interpolate-point-public.geometry-double-precision-title">
       st_line_interpolate_point(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-line-interpolate-point-public.geometry-double-precision-titleabbrev">
       st_line_interpolate_point(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_line_interpolate_point</programlisting>
      </para>
    </section>

<!-- Function st_line_locate_point(public.geometry, public.geometry) -->
    <section id="public.function.st-line-locate-point-public.geometry-public.geometry"
             xreflabel="publicst_line_locate_point(public.geometry, public.geometry)">
      <title id="public.function.st-line-locate-point-public.geometry-public.geometry-title">
       st_line_locate_point(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-line-locate-point-public.geometry-public.geometry-titleabbrev">
       st_line_locate_point(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_line_locate_point</programlisting>
      </para>
    </section>

<!-- Function st_line_substring(public.geometry, double precision, double precision) -->
    <section id="public.function.st-line-substring-public.geometry-double-precision-double-precision"
             xreflabel="publicst_line_substring(public.geometry, double precision, double precision)">
      <title id="public.function.st-line-substring-public.geometry-double-precision-double-precision-title">
       st_line_substring(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-line-substring-public.geometry-double-precision-double-precision-titleabbrev">
       st_line_substring(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_line_substring</programlisting>
      </para>
    </section>

<!-- Function st_linefrommultipoint(public.geometry) -->
    <section id="public.function.st-linefrommultipoint-public.geometry"
             xreflabel="publicst_linefrommultipoint(public.geometry)">
      <title id="public.function.st-linefrommultipoint-public.geometry-title">
       st_linefrommultipoint(public.geometry)
      </title>
      <titleabbrev id="public.function.st-linefrommultipoint-public.geometry-titleabbrev">
       st_linefrommultipoint(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_line_from_mpoint</programlisting>
      </para>
    </section>

<!-- Function st_linefromtext(text) -->
    <section id="public.function.st-linefromtext-text"
             xreflabel="publicst_linefromtext(text)">
      <title id="public.function.st-linefromtext-text-title">
       st_linefromtext(text)
      </title>
      <titleabbrev id="public.function.st-linefromtext-text-titleabbrev">
       st_linefromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;LINESTRING&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_linefromtext(text, integer) -->
    <section id="public.function.st-linefromtext-text-integer"
             xreflabel="publicst_linefromtext(text, integer)">
      <title id="public.function.st-linefromtext-text-integer-title">
       st_linefromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-linefromtext-text-integer-titleabbrev">
       st_linefromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = &#39;LINESTRING&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_linefromwkb(bytea) -->
    <section id="public.function.st-linefromwkb-bytea"
             xreflabel="publicst_linefromwkb(bytea)">
      <title id="public.function.st-linefromwkb-bytea-title">
       st_linefromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-linefromwkb-bytea-titleabbrev">
       st_linefromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;LINESTRING&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_linefromwkb(bytea, integer) -->
    <section id="public.function.st-linefromwkb-bytea-integer"
             xreflabel="publicst_linefromwkb(bytea, integer)">
      <title id="public.function.st-linefromwkb-bytea-integer-title">
       st_linefromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-linefromwkb-bytea-integer-titleabbrev">
       st_linefromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;LINESTRING&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_linemerge(public.geometry) -->
    <section id="public.function.st-linemerge-public.geometry"
             xreflabel="publicst_linemerge(public.geometry)">
      <title id="public.function.st-linemerge-public.geometry-title">
       st_linemerge(public.geometry)
      </title>
      <titleabbrev id="public.function.st-linemerge-public.geometry-titleabbrev">
       st_linemerge(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>linemerge</programlisting>
      </para>
    </section>

<!-- Function st_linestringfromwkb(bytea) -->
    <section id="public.function.st-linestringfromwkb-bytea"
             xreflabel="publicst_linestringfromwkb(bytea)">
      <title id="public.function.st-linestringfromwkb-bytea-title">
       st_linestringfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-linestringfromwkb-bytea-titleabbrev">
       st_linestringfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;LINESTRING&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_linestringfromwkb(bytea, integer) -->
    <section id="public.function.st-linestringfromwkb-bytea-integer"
             xreflabel="publicst_linestringfromwkb(bytea, integer)">
      <title id="public.function.st-linestringfromwkb-bytea-integer-title">
       st_linestringfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-linestringfromwkb-bytea-integer-titleabbrev">
       st_linestringfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;LINESTRING&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_linetocurve(public.geometry) -->
    <section id="public.function.st-linetocurve-public.geometry"
             xreflabel="publicst_linetocurve(public.geometry)">
      <title id="public.function.st-linetocurve-public.geometry-title">
       st_linetocurve(public.geometry)
      </title>
      <titleabbrev id="public.function.st-linetocurve-public.geometry-titleabbrev">
       st_linetocurve(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_line_desegmentize</programlisting>
      </para>
    </section>

<!-- Function st_locate_along_measure(public.geometry, double precision) -->
    <section id="public.function.st-locate-along-measure-public.geometry-double-precision"
             xreflabel="publicst_locate_along_measure(public.geometry, double precision)">
      <title id="public.function.st-locate-along-measure-public.geometry-double-precision-title">
       st_locate_along_measure(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-locate-along-measure-public.geometry-double-precision-titleabbrev">
       st_locate_along_measure(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT locate_between_measures($1, $2, $2)</programlisting>
      </para>
    </section>

<!-- Function st_locate_between_measures(public.geometry, double precision, double precision) -->
    <section id="public.function.st-locate-between-measures-public.geometry-double-precision-double-precision"
             xreflabel="publicst_locate_between_measures(public.geometry, double precision, double precision)">
      <title id="public.function.st-locate-between-measures-public.geometry-double-precision-double-precision-title">
       st_locate_between_measures(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-locate-between-measures-public.geometry-double-precision-double-precision-titleabbrev">
       st_locate_between_measures(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_locate_between_m</programlisting>
      </para>
    </section>

<!-- Function st_m(public.geometry) -->
    <section id="public.function.st-m-public.geometry"
             xreflabel="publicst_m(public.geometry)">
      <title id="public.function.st-m-public.geometry-title">
       st_m(public.geometry)
      </title>
      <titleabbrev id="public.function.st-m-public.geometry-titleabbrev">
       st_m(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_m_point</programlisting>
      </para>
    </section>

<!-- Function st_makebox2d(public.geometry, public.geometry) -->
    <section id="public.function.st-makebox2d-public.geometry-public.geometry"
             xreflabel="publicst_makebox2d(public.geometry, public.geometry)">
      <title id="public.function.st-makebox2d-public.geometry-public.geometry-title">
       st_makebox2d(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-makebox2d-public.geometry-public.geometry-titleabbrev">
       st_makebox2d(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box2d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX2DFLOAT4_construct</programlisting>
      </para>
    </section>

<!-- Function st_makebox3d(public.geometry, public.geometry) -->
    <section id="public.function.st-makebox3d-public.geometry-public.geometry"
             xreflabel="publicst_makebox3d(public.geometry, public.geometry)">
      <title id="public.function.st-makebox3d-public.geometry-public.geometry-title">
       st_makebox3d(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-makebox3d-public.geometry-public.geometry-titleabbrev">
       st_makebox3d(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>box3d</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_construct</programlisting>
      </para>
    </section>

<!-- Function st_makeline(public.geometry) -->
    <section id="public.function.st-makeline-public.geometry"
             xreflabel="publicst_makeline(public.geometry)">
      <title id="public.function.st-makeline-public.geometry-title">
       st_makeline(public.geometry)
      </title>
      <titleabbrev id="public.function.st-makeline-public.geometry-titleabbrev">
       st_makeline(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function st_makeline(public.geometry, public.geometry) -->
    <section id="public.function.st-makeline-public.geometry-public.geometry"
             xreflabel="publicst_makeline(public.geometry, public.geometry)">
      <title id="public.function.st-makeline-public.geometry-public.geometry-title">
       st_makeline(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-makeline-public.geometry-public.geometry-titleabbrev">
       st_makeline(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makeline</programlisting>
      </para>
    </section>

<!-- Function st_makeline_garray(public.geometry[]) -->
    <section id="public.function.st-makeline-garray-public.geometryARRAY"
             xreflabel="publicst_makeline_garray(public.geometry[])">
      <title id="public.function.st-makeline-garray-public.geometryARRAY-title">
       st_makeline_garray(public.geometry[])
      </title>
      <titleabbrev id="public.function.st-makeline-garray-public.geometryARRAY-titleabbrev">
       st_makeline_garray(public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makeline_garray</programlisting>
      </para>
    </section>

<!-- Function st_makepoint(double precision, double precision) -->
    <section id="public.function.st-makepoint-double-precision-double-precision"
             xreflabel="publicst_makepoint(double precision, double precision)">
      <title id="public.function.st-makepoint-double-precision-double-precision-title">
       st_makepoint(double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-makepoint-double-precision-double-precision-titleabbrev">
       st_makepoint(double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoint</programlisting>
      </para>
    </section>

<!-- Function st_makepoint(double precision, double precision, double precision) -->
    <section id="public.function.st-makepoint-double-precision-double-precision-double-precision"
             xreflabel="publicst_makepoint(double precision, double precision, double precision)">
      <title id="public.function.st-makepoint-double-precision-double-precision-double-precision-title">
       st_makepoint(double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-makepoint-double-precision-double-precision-double-precision-titleabbrev">
       st_makepoint(double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoint</programlisting>
      </para>
    </section>

<!-- Function st_makepoint(double precision, double precision, double precision, double precision) -->
    <section id="public.function.st-makepoint-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicst_makepoint(double precision, double precision, double precision, double precision)">
      <title id="public.function.st-makepoint-double-precision-double-precision-double-precision-double-precision-title">
       st_makepoint(double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-makepoint-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       st_makepoint(double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoint</programlisting>
      </para>
    </section>

<!-- Function st_makepointm(double precision, double precision, double precision) -->
    <section id="public.function.st-makepointm-double-precision-double-precision-double-precision"
             xreflabel="publicst_makepointm(double precision, double precision, double precision)">
      <title id="public.function.st-makepointm-double-precision-double-precision-double-precision-title">
       st_makepointm(double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-makepointm-double-precision-double-precision-double-precision-titleabbrev">
       st_makepointm(double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoint3dm</programlisting>
      </para>
    </section>

<!-- Function st_makepolygon(public.geometry) -->
    <section id="public.function.st-makepolygon-public.geometry"
             xreflabel="publicst_makepolygon(public.geometry)">
      <title id="public.function.st-makepolygon-public.geometry-title">
       st_makepolygon(public.geometry)
      </title>
      <titleabbrev id="public.function.st-makepolygon-public.geometry-titleabbrev">
       st_makepolygon(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoly</programlisting>
      </para>
    </section>

<!-- Function st_makepolygon(public.geometry, public.geometry[]) -->
    <section id="public.function.st-makepolygon-public.geometry-public.geometryARRAY"
             xreflabel="publicst_makepolygon(public.geometry, public.geometry[])">
      <title id="public.function.st-makepolygon-public.geometry-public.geometryARRAY-title">
       st_makepolygon(public.geometry, public.geometry[])
      </title>
      <titleabbrev id="public.function.st-makepolygon-public.geometry-public.geometryARRAY-titleabbrev">
       st_makepolygon(public.geometry, public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoly</programlisting>
      </para>
    </section>

<!-- Function st_max_distance(public.geometry, public.geometry) -->
    <section id="public.function.st-max-distance-public.geometry-public.geometry"
             xreflabel="publicst_max_distance(public.geometry, public.geometry)">
      <title id="public.function.st-max-distance-public.geometry-public.geometry-title">
       st_max_distance(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-max-distance-public.geometry-public.geometry-titleabbrev">
       st_max_distance(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_maxdistance2d_linestring</programlisting>
      </para>
    </section>

<!-- Function st_mem_size(public.geometry) -->
    <section id="public.function.st-mem-size-public.geometry"
             xreflabel="publicst_mem_size(public.geometry)">
      <title id="public.function.st-mem-size-public.geometry-title">
       st_mem_size(public.geometry)
      </title>
      <titleabbrev id="public.function.st-mem-size-public.geometry-titleabbrev">
       st_mem_size(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_mem_size</programlisting>
      </para>
    </section>

<!-- Function st_memcollect(public.geometry) -->
    <section id="public.function.st-memcollect-public.geometry"
             xreflabel="publicst_memcollect(public.geometry)">
      <title id="public.function.st-memcollect-public.geometry-title">
       st_memcollect(public.geometry)
      </title>
      <titleabbrev id="public.function.st-memcollect-public.geometry-titleabbrev">
       st_memcollect(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function st_memunion(public.geometry) -->
    <section id="public.function.st-memunion-public.geometry"
             xreflabel="publicst_memunion(public.geometry)">
      <title id="public.function.st-memunion-public.geometry-title">
       st_memunion(public.geometry)
      </title>
      <titleabbrev id="public.function.st-memunion-public.geometry-titleabbrev">
       st_memunion(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function st_mlinefromtext(text) -->
    <section id="public.function.st-mlinefromtext-text"
             xreflabel="publicst_mlinefromtext(text)">
      <title id="public.function.st-mlinefromtext-text-title">
       st_mlinefromtext(text)
      </title>
      <titleabbrev id="public.function.st-mlinefromtext-text-titleabbrev">
       st_mlinefromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mlinefromtext(text, integer) -->
    <section id="public.function.st-mlinefromtext-text-integer"
             xreflabel="publicst_mlinefromtext(text, integer)">
      <title id="public.function.st-mlinefromtext-text-integer-title">
       st_mlinefromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-mlinefromtext-text-integer-titleabbrev">
       st_mlinefromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE
	WHEN geometrytype(GeomFromText($1, $2)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mlinefromwkb(bytea) -->
    <section id="public.function.st-mlinefromwkb-bytea"
             xreflabel="publicst_mlinefromwkb(bytea)">
      <title id="public.function.st-mlinefromwkb-bytea-title">
       st_mlinefromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-mlinefromwkb-bytea-titleabbrev">
       st_mlinefromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mlinefromwkb(bytea, integer) -->
    <section id="public.function.st-mlinefromwkb-bytea-integer"
             xreflabel="publicst_mlinefromwkb(bytea, integer)">
      <title id="public.function.st-mlinefromwkb-bytea-integer-title">
       st_mlinefromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-mlinefromwkb-bytea-integer-titleabbrev">
       st_mlinefromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mpointfromtext(text) -->
    <section id="public.function.st-mpointfromtext-text"
             xreflabel="publicst_mpointfromtext(text)">
      <title id="public.function.st-mpointfromtext-text-title">
       st_mpointfromtext(text)
      </title>
      <titleabbrev id="public.function.st-mpointfromtext-text-titleabbrev">
       st_mpointfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;MULTIPOINT&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mpointfromtext(text, integer) -->
    <section id="public.function.st-mpointfromtext-text-integer"
             xreflabel="publicst_mpointfromtext(text, integer)">
      <title id="public.function.st-mpointfromtext-text-integer-title">
       st_mpointfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-mpointfromtext-text-integer-titleabbrev">
       st_mpointfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = &#39;MULTIPOINT&#39;
	THEN GeomFromText($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mpointfromwkb(bytea) -->
    <section id="public.function.st-mpointfromwkb-bytea"
             xreflabel="publicst_mpointfromwkb(bytea)">
      <title id="public.function.st-mpointfromwkb-bytea-title">
       st_mpointfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-mpointfromwkb-bytea-titleabbrev">
       st_mpointfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTIPOINT&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mpointfromwkb(bytea, integer) -->
    <section id="public.function.st-mpointfromwkb-bytea-integer"
             xreflabel="publicst_mpointfromwkb(bytea, integer)">
      <title id="public.function.st-mpointfromwkb-bytea-integer-title">
       st_mpointfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-mpointfromwkb-bytea-integer-titleabbrev">
       st_mpointfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;MULTIPOINT&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mpolyfromtext(text) -->
    <section id="public.function.st-mpolyfromtext-text"
             xreflabel="publicst_mpolyfromtext(text)">
      <title id="public.function.st-mpolyfromtext-text-title">
       st_mpolyfromtext(text)
      </title>
      <titleabbrev id="public.function.st-mpolyfromtext-text-titleabbrev">
       st_mpolyfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mpolyfromtext(text, integer) -->
    <section id="public.function.st-mpolyfromtext-text-integer"
             xreflabel="publicst_mpolyfromtext(text, integer)">
      <title id="public.function.st-mpolyfromtext-text-integer-title">
       st_mpolyfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-mpolyfromtext-text-integer-titleabbrev">
       st_mpolyfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromText($1,$2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mpolyfromwkb(bytea) -->
    <section id="public.function.st-mpolyfromwkb-bytea"
             xreflabel="publicst_mpolyfromwkb(bytea)">
      <title id="public.function.st-mpolyfromwkb-bytea-title">
       st_mpolyfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-mpolyfromwkb-bytea-titleabbrev">
       st_mpolyfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_mpolyfromwkb(bytea, integer) -->
    <section id="public.function.st-mpolyfromwkb-bytea-integer"
             xreflabel="publicst_mpolyfromwkb(bytea, integer)">
      <title id="public.function.st-mpolyfromwkb-bytea-integer-title">
       st_mpolyfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-mpolyfromwkb-bytea-integer-titleabbrev">
       st_mpolyfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_multi(public.geometry) -->
    <section id="public.function.st-multi-public.geometry"
             xreflabel="publicst_multi(public.geometry)">
      <title id="public.function.st-multi-public.geometry-title">
       st_multi(public.geometry)
      </title>
      <titleabbrev id="public.function.st-multi-public.geometry-titleabbrev">
       st_multi(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_force_multi</programlisting>
      </para>
    </section>

<!-- Function st_multilinefromwkb(bytea) -->
    <section id="public.function.st-multilinefromwkb-bytea"
             xreflabel="publicst_multilinefromwkb(bytea)">
      <title id="public.function.st-multilinefromwkb-bytea-title">
       st_multilinefromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-multilinefromwkb-bytea-titleabbrev">
       st_multilinefromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTILINESTRING&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_multilinestringfromtext(text) -->
    <section id="public.function.st-multilinestringfromtext-text"
             xreflabel="publicst_multilinestringfromtext(text)">
      <title id="public.function.st-multilinestringfromtext-text-title">
       st_multilinestringfromtext(text)
      </title>
      <titleabbrev id="public.function.st-multilinestringfromtext-text-titleabbrev">
       st_multilinestringfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MLineFromText($1)</programlisting>
      </para>
    </section>

<!-- Function st_multilinestringfromtext(text, integer) -->
    <section id="public.function.st-multilinestringfromtext-text-integer"
             xreflabel="publicst_multilinestringfromtext(text, integer)">
      <title id="public.function.st-multilinestringfromtext-text-integer-title">
       st_multilinestringfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-multilinestringfromtext-text-integer-titleabbrev">
       st_multilinestringfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MLineFromText($1, $2)</programlisting>
      </para>
    </section>

<!-- Function st_multipointfromtext(text) -->
    <section id="public.function.st-multipointfromtext-text"
             xreflabel="publicst_multipointfromtext(text)">
      <title id="public.function.st-multipointfromtext-text-title">
       st_multipointfromtext(text)
      </title>
      <titleabbrev id="public.function.st-multipointfromtext-text-titleabbrev">
       st_multipointfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MPointFromText($1)</programlisting>
      </para>
    </section>

<!-- Function st_multipointfromwkb(bytea) -->
    <section id="public.function.st-multipointfromwkb-bytea"
             xreflabel="publicst_multipointfromwkb(bytea)">
      <title id="public.function.st-multipointfromwkb-bytea-title">
       st_multipointfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-multipointfromwkb-bytea-titleabbrev">
       st_multipointfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTIPOINT&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_multipointfromwkb(bytea, integer) -->
    <section id="public.function.st-multipointfromwkb-bytea-integer"
             xreflabel="publicst_multipointfromwkb(bytea, integer)">
      <title id="public.function.st-multipointfromwkb-bytea-integer-title">
       st_multipointfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-multipointfromwkb-bytea-integer-titleabbrev">
       st_multipointfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = &#39;MULTIPOINT&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_multipolyfromwkb(bytea) -->
    <section id="public.function.st-multipolyfromwkb-bytea"
             xreflabel="publicst_multipolyfromwkb(bytea)">
      <title id="public.function.st-multipolyfromwkb-bytea-title">
       st_multipolyfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-multipolyfromwkb-bytea-titleabbrev">
       st_multipolyfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_multipolyfromwkb(bytea, integer) -->
    <section id="public.function.st-multipolyfromwkb-bytea-integer"
             xreflabel="publicst_multipolyfromwkb(bytea, integer)">
      <title id="public.function.st-multipolyfromwkb-bytea-integer-title">
       st_multipolyfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-multipolyfromwkb-bytea-integer-titleabbrev">
       st_multipolyfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;MULTIPOLYGON&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_multipolygonfromtext(text) -->
    <section id="public.function.st-multipolygonfromtext-text"
             xreflabel="publicst_multipolygonfromtext(text)">
      <title id="public.function.st-multipolygonfromtext-text-title">
       st_multipolygonfromtext(text)
      </title>
      <titleabbrev id="public.function.st-multipolygonfromtext-text-titleabbrev">
       st_multipolygonfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MPolyFromText($1)</programlisting>
      </para>
    </section>

<!-- Function st_multipolygonfromtext(text, integer) -->
    <section id="public.function.st-multipolygonfromtext-text-integer"
             xreflabel="publicst_multipolygonfromtext(text, integer)">
      <title id="public.function.st-multipolygonfromtext-text-integer-title">
       st_multipolygonfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-multipolygonfromtext-text-integer-titleabbrev">
       st_multipolygonfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT MPolyFromText($1, $2)</programlisting>
      </para>
    </section>

<!-- Function st_ndims(public.geometry) -->
    <section id="public.function.st-ndims-public.geometry"
             xreflabel="publicst_ndims(public.geometry)">
      <title id="public.function.st-ndims-public.geometry-title">
       st_ndims(public.geometry)
      </title>
      <titleabbrev id="public.function.st-ndims-public.geometry-titleabbrev">
       st_ndims(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>smallint</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_ndims</programlisting>
      </para>
    </section>

<!-- Function st_noop(public.geometry) -->
    <section id="public.function.st-noop-public.geometry"
             xreflabel="publicst_noop(public.geometry)">
      <title id="public.function.st-noop-public.geometry-title">
       st_noop(public.geometry)
      </title>
      <titleabbrev id="public.function.st-noop-public.geometry-titleabbrev">
       st_noop(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_noop</programlisting>
      </para>
    </section>

<!-- Function st_npoints(public.geometry) -->
    <section id="public.function.st-npoints-public.geometry"
             xreflabel="publicst_npoints(public.geometry)">
      <title id="public.function.st-npoints-public.geometry-title">
       st_npoints(public.geometry)
      </title>
      <titleabbrev id="public.function.st-npoints-public.geometry-titleabbrev">
       st_npoints(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_npoints</programlisting>
      </para>
    </section>

<!-- Function st_nrings(public.geometry) -->
    <section id="public.function.st-nrings-public.geometry"
             xreflabel="publicst_nrings(public.geometry)">
      <title id="public.function.st-nrings-public.geometry-title">
       st_nrings(public.geometry)
      </title>
      <titleabbrev id="public.function.st-nrings-public.geometry-titleabbrev">
       st_nrings(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_nrings</programlisting>
      </para>
    </section>

<!-- Function st_numgeometries(public.geometry) -->
    <section id="public.function.st-numgeometries-public.geometry"
             xreflabel="publicst_numgeometries(public.geometry)">
      <title id="public.function.st-numgeometries-public.geometry-title">
       st_numgeometries(public.geometry)
      </title>
      <titleabbrev id="public.function.st-numgeometries-public.geometry-titleabbrev">
       st_numgeometries(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_numgeometries_collection</programlisting>
      </para>
    </section>

<!-- Function st_numinteriorring(public.geometry) -->
    <section id="public.function.st-numinteriorring-public.geometry"
             xreflabel="publicst_numinteriorring(public.geometry)">
      <title id="public.function.st-numinteriorring-public.geometry-title">
       st_numinteriorring(public.geometry)
      </title>
      <titleabbrev id="public.function.st-numinteriorring-public.geometry-titleabbrev">
       st_numinteriorring(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_numinteriorrings_polygon</programlisting>
      </para>
    </section>

<!-- Function st_numinteriorrings(public.geometry) -->
    <section id="public.function.st-numinteriorrings-public.geometry"
             xreflabel="publicst_numinteriorrings(public.geometry)">
      <title id="public.function.st-numinteriorrings-public.geometry-title">
       st_numinteriorrings(public.geometry)
      </title>
      <titleabbrev id="public.function.st-numinteriorrings-public.geometry-titleabbrev">
       st_numinteriorrings(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_numinteriorrings_polygon</programlisting>
      </para>
    </section>

<!-- Function st_numpoints(public.geometry) -->
    <section id="public.function.st-numpoints-public.geometry"
             xreflabel="publicst_numpoints(public.geometry)">
      <title id="public.function.st-numpoints-public.geometry-title">
       st_numpoints(public.geometry)
      </title>
      <titleabbrev id="public.function.st-numpoints-public.geometry-titleabbrev">
       st_numpoints(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_numpoints_linestring</programlisting>
      </para>
    </section>

<!-- Function st_orderingequals(public.geometry, public.geometry) -->
    <section id="public.function.st-orderingequals-public.geometry-public.geometry"
             xreflabel="publicst_orderingequals(public.geometry, public.geometry)">
      <title id="public.function.st-orderingequals-public.geometry-public.geometry-title">
       st_orderingequals(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-orderingequals-public.geometry-public.geometry-titleabbrev">
       st_orderingequals(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
    SELECT $1 &amp;&amp; $2 AND $1 ~= $2
	</programlisting>
      </para>
    </section>

<!-- Function st_overlaps(public.geometry, public.geometry) -->
    <section id="public.function.st-overlaps-public.geometry-public.geometry"
             xreflabel="publicst_overlaps(public.geometry, public.geometry)">
      <title id="public.function.st-overlaps-public.geometry-public.geometry-title">
       st_overlaps(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-overlaps-public.geometry-public.geometry-titleabbrev">
       st_overlaps(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT $1 &amp;&amp; $2 AND _ST_Overlaps($1,$2)</programlisting>
      </para>
    </section>

<!-- Function st_perimeter(public.geometry) -->
    <section id="public.function.st-perimeter-public.geometry"
             xreflabel="publicst_perimeter(public.geometry)">
      <title id="public.function.st-perimeter-public.geometry-title">
       st_perimeter(public.geometry)
      </title>
      <titleabbrev id="public.function.st-perimeter-public.geometry-titleabbrev">
       st_perimeter(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_perimeter2d_poly</programlisting>
      </para>
    </section>

<!-- Function st_perimeter2d(public.geometry) -->
    <section id="public.function.st-perimeter2d-public.geometry"
             xreflabel="publicst_perimeter2d(public.geometry)">
      <title id="public.function.st-perimeter2d-public.geometry-title">
       st_perimeter2d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-perimeter2d-public.geometry-titleabbrev">
       st_perimeter2d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_perimeter2d_poly</programlisting>
      </para>
    </section>

<!-- Function st_perimeter3d(public.geometry) -->
    <section id="public.function.st-perimeter3d-public.geometry"
             xreflabel="publicst_perimeter3d(public.geometry)">
      <title id="public.function.st-perimeter3d-public.geometry-title">
       st_perimeter3d(public.geometry)
      </title>
      <titleabbrev id="public.function.st-perimeter3d-public.geometry-titleabbrev">
       st_perimeter3d(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_perimeter_poly</programlisting>
      </para>
    </section>

<!-- Function st_point(double precision, double precision) -->
    <section id="public.function.st-point-double-precision-double-precision"
             xreflabel="publicst_point(double precision, double precision)">
      <title id="public.function.st-point-double-precision-double-precision-title">
       st_point(double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-point-double-precision-double-precision-titleabbrev">
       st_point(double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_makepoint</programlisting>
      </para>
    </section>

<!-- Function st_point_inside_circle(public.geometry, double precision, double precision, double precision) -->
    <section id="public.function.st-point-inside-circle-public.geometry-double-precision-double-precision-double-precision"
             xreflabel="publicst_point_inside_circle(public.geometry, double precision, double precision, double precision)">
      <title id="public.function.st-point-inside-circle-public.geometry-double-precision-double-precision-double-precision-title">
       st_point_inside_circle(public.geometry, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-point-inside-circle-public.geometry-double-precision-double-precision-double-precision-titleabbrev">
       st_point_inside_circle(public.geometry, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_inside_circle_point</programlisting>
      </para>
    </section>

<!-- Function st_pointfromtext(text) -->
    <section id="public.function.st-pointfromtext-text"
             xreflabel="publicst_pointfromtext(text)">
      <title id="public.function.st-pointfromtext-text-title">
       st_pointfromtext(text)
      </title>
      <titleabbrev id="public.function.st-pointfromtext-text-titleabbrev">
       st_pointfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;POINT&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_pointfromtext(text, integer) -->
    <section id="public.function.st-pointfromtext-text-integer"
             xreflabel="publicst_pointfromtext(text, integer)">
      <title id="public.function.st-pointfromtext-text-integer-title">
       st_pointfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-pointfromtext-text-integer-titleabbrev">
       st_pointfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = &#39;POINT&#39;
	THEN GeomFromText($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_pointfromwkb(bytea) -->
    <section id="public.function.st-pointfromwkb-bytea"
             xreflabel="publicst_pointfromwkb(bytea)">
      <title id="public.function.st-pointfromwkb-bytea-title">
       st_pointfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-pointfromwkb-bytea-titleabbrev">
       st_pointfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;POINT&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_pointfromwkb(bytea, integer) -->
    <section id="public.function.st-pointfromwkb-bytea-integer"
             xreflabel="publicst_pointfromwkb(bytea, integer)">
      <title id="public.function.st-pointfromwkb-bytea-integer-title">
       st_pointfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-pointfromwkb-bytea-integer-titleabbrev">
       st_pointfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;POINT&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_pointn(public.geometry, integer) -->
    <section id="public.function.st-pointn-public.geometry-integer"
             xreflabel="publicst_pointn(public.geometry, integer)">
      <title id="public.function.st-pointn-public.geometry-integer-title">
       st_pointn(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-pointn-public.geometry-integer-titleabbrev">
       st_pointn(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_pointn_linestring</programlisting>
      </para>
    </section>

<!-- Function st_pointonsurface(public.geometry) -->
    <section id="public.function.st-pointonsurface-public.geometry"
             xreflabel="publicst_pointonsurface(public.geometry)">
      <title id="public.function.st-pointonsurface-public.geometry-title">
       st_pointonsurface(public.geometry)
      </title>
      <titleabbrev id="public.function.st-pointonsurface-public.geometry-titleabbrev">
       st_pointonsurface(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>pointonsurface</programlisting>
      </para>
    </section>

<!-- Function st_polyfromtext(text) -->
    <section id="public.function.st-polyfromtext-text"
             xreflabel="publicst_polyfromtext(text)">
      <title id="public.function.st-polyfromtext-text-title">
       st_polyfromtext(text)
      </title>
      <titleabbrev id="public.function.st-polyfromtext-text-titleabbrev">
       st_polyfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1)) = &#39;POLYGON&#39;
	THEN GeomFromText($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_polyfromtext(text, integer) -->
    <section id="public.function.st-polyfromtext-text-integer"
             xreflabel="publicst_polyfromtext(text, integer)">
      <title id="public.function.st-polyfromtext-text-integer-title">
       st_polyfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-polyfromtext-text-integer-titleabbrev">
       st_polyfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromText($1, $2)) = &#39;POLYGON&#39;
	THEN GeomFromText($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_polyfromwkb(bytea) -->
    <section id="public.function.st-polyfromwkb-bytea"
             xreflabel="publicst_polyfromwkb(bytea)">
      <title id="public.function.st-polyfromwkb-bytea-title">
       st_polyfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-polyfromwkb-bytea-titleabbrev">
       st_polyfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;POLYGON&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_polyfromwkb(bytea, integer) -->
    <section id="public.function.st-polyfromwkb-bytea-integer"
             xreflabel="publicst_polyfromwkb(bytea, integer)">
      <title id="public.function.st-polyfromwkb-bytea-integer-title">
       st_polyfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-polyfromwkb-bytea-integer-titleabbrev">
       st_polyfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1, $2)) = &#39;POLYGON&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_polygon(public.geometry, integer) -->
    <section id="public.function.st-polygon-public.geometry-integer"
             xreflabel="publicst_polygon(public.geometry, integer)">
      <title id="public.function.st-polygon-public.geometry-integer-title">
       st_polygon(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-polygon-public.geometry-integer-titleabbrev">
       st_polygon(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT setSRID(makepolygon($1), $2)
	</programlisting>
      </para>
    </section>

<!-- Function st_polygonfromtext(text) -->
    <section id="public.function.st-polygonfromtext-text"
             xreflabel="publicst_polygonfromtext(text)">
      <title id="public.function.st-polygonfromtext-text-title">
       st_polygonfromtext(text)
      </title>
      <titleabbrev id="public.function.st-polygonfromtext-text-titleabbrev">
       st_polygonfromtext(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT PolyFromText($1)</programlisting>
      </para>
    </section>

<!-- Function st_polygonfromtext(text, integer) -->
    <section id="public.function.st-polygonfromtext-text-integer"
             xreflabel="publicst_polygonfromtext(text, integer)">
      <title id="public.function.st-polygonfromtext-text-integer-title">
       st_polygonfromtext(text, integer)
      </title>
      <titleabbrev id="public.function.st-polygonfromtext-text-integer-titleabbrev">
       st_polygonfromtext(text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT PolyFromText($1, $2)</programlisting>
      </para>
    </section>

<!-- Function st_polygonfromwkb(bytea) -->
    <section id="public.function.st-polygonfromwkb-bytea"
             xreflabel="publicst_polygonfromwkb(bytea)">
      <title id="public.function.st-polygonfromwkb-bytea-title">
       st_polygonfromwkb(bytea)
      </title>
      <titleabbrev id="public.function.st-polygonfromwkb-bytea-titleabbrev">
       st_polygonfromwkb(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1)) = &#39;POLYGON&#39;
	THEN GeomFromWKB($1)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_polygonfromwkb(bytea, integer) -->
    <section id="public.function.st-polygonfromwkb-bytea-integer"
             xreflabel="publicst_polygonfromwkb(bytea, integer)">
      <title id="public.function.st-polygonfromwkb-bytea-integer-title">
       st_polygonfromwkb(bytea, integer)
      </title>
      <titleabbrev id="public.function.st-polygonfromwkb-bytea-integer-titleabbrev">
       st_polygonfromwkb(bytea, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
	SELECT CASE WHEN geometrytype(GeomFromWKB($1,$2)) = &#39;POLYGON&#39;
	THEN GeomFromWKB($1, $2)
	ELSE NULL END
	</programlisting>
      </para>
    </section>

<!-- Function st_polygonize(public.geometry) -->
    <section id="public.function.st-polygonize-public.geometry"
             xreflabel="publicst_polygonize(public.geometry)">
      <title id="public.function.st-polygonize-public.geometry-title">
       st_polygonize(public.geometry)
      </title>
      <titleabbrev id="public.function.st-polygonize-public.geometry-titleabbrev">
       st_polygonize(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function st_polygonize_garray(public.geometry[]) -->
    <section id="public.function.st-polygonize-garray-public.geometryARRAY"
             xreflabel="publicst_polygonize_garray(public.geometry[])">
      <title id="public.function.st-polygonize-garray-public.geometryARRAY-title">
       st_polygonize_garray(public.geometry[])
      </title>
      <titleabbrev id="public.function.st-polygonize-garray-public.geometryARRAY-titleabbrev">
       st_polygonize_garray(public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>polygonize_garray</programlisting>
      </para>
    </section>

<!-- Function st_postgis_gist_joinsel(internal, oid, internal, smallint) -->
    <section id="public.function.st-postgis-gist-joinsel-internal-oid-internal-smallint"
             xreflabel="publicst_postgis_gist_joinsel(internal, oid, internal, smallint)">
      <title id="public.function.st-postgis-gist-joinsel-internal-oid-internal-smallint-title">
       st_postgis_gist_joinsel(internal, oid, internal, smallint)
      </title>
      <titleabbrev id="public.function.st-postgis-gist-joinsel-internal-oid-internal-smallint-titleabbrev">
       st_postgis_gist_joinsel(internal, oid, internal, smallint)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_joinsel</programlisting>
      </para>
    </section>

<!-- Function st_postgis_gist_sel(internal, oid, internal, integer) -->
    <section id="public.function.st-postgis-gist-sel-internal-oid-internal-integer"
             xreflabel="publicst_postgis_gist_sel(internal, oid, internal, integer)">
      <title id="public.function.st-postgis-gist-sel-internal-oid-internal-integer-title">
       st_postgis_gist_sel(internal, oid, internal, integer)
      </title>
      <titleabbrev id="public.function.st-postgis-gist-sel-internal-oid-internal-integer-titleabbrev">
       st_postgis_gist_sel(internal, oid, internal, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_gist_sel</programlisting>
      </para>
    </section>

<!-- Function st_relate(public.geometry, public.geometry) -->
    <section id="public.function.st-relate-public.geometry-public.geometry"
             xreflabel="publicst_relate(public.geometry, public.geometry)">
      <title id="public.function.st-relate-public.geometry-public.geometry-title">
       st_relate(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-relate-public.geometry-public.geometry-titleabbrev">
       st_relate(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>relate_full</programlisting>
      </para>
    </section>

<!-- Function st_relate(public.geometry, public.geometry, text) -->
    <section id="public.function.st-relate-public.geometry-public.geometry-text"
             xreflabel="publicst_relate(public.geometry, public.geometry, text)">
      <title id="public.function.st-relate-public.geometry-public.geometry-text-title">
       st_relate(public.geometry, public.geometry, text)
      </title>
      <titleabbrev id="public.function.st-relate-public.geometry-public.geometry-text-titleabbrev">
       st_relate(public.geometry, public.geometry, text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>relate_pattern</programlisting>
      </para>
    </section>

<!-- Function st_removepoint(public.geometry, integer) -->
    <section id="public.function.st-removepoint-public.geometry-integer"
             xreflabel="publicst_removepoint(public.geometry, integer)">
      <title id="public.function.st-removepoint-public.geometry-integer-title">
       st_removepoint(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-removepoint-public.geometry-integer-titleabbrev">
       st_removepoint(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_removepoint</programlisting>
      </para>
    </section>

<!-- Function st_reverse(public.geometry) -->
    <section id="public.function.st-reverse-public.geometry"
             xreflabel="publicst_reverse(public.geometry)">
      <title id="public.function.st-reverse-public.geometry-title">
       st_reverse(public.geometry)
      </title>
      <titleabbrev id="public.function.st-reverse-public.geometry-titleabbrev">
       st_reverse(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_reverse</programlisting>
      </para>
    </section>

<!-- Function st_rotate(public.geometry, double precision) -->
    <section id="public.function.st-rotate-public.geometry-double-precision"
             xreflabel="publicst_rotate(public.geometry, double precision)">
      <title id="public.function.st-rotate-public.geometry-double-precision-title">
       st_rotate(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-rotate-public.geometry-double-precision-titleabbrev">
       st_rotate(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT rotateZ($1, $2)</programlisting>
      </para>
    </section>

<!-- Function st_rotatex(public.geometry, double precision) -->
    <section id="public.function.st-rotatex-public.geometry-double-precision"
             xreflabel="publicst_rotatex(public.geometry, double precision)">
      <title id="public.function.st-rotatex-public.geometry-double-precision-title">
       st_rotatex(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-rotatex-public.geometry-double-precision-titleabbrev">
       st_rotatex(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)</programlisting>
      </para>
    </section>

<!-- Function st_rotatey(public.geometry, double precision) -->
    <section id="public.function.st-rotatey-public.geometry-double-precision"
             xreflabel="publicst_rotatey(public.geometry, double precision)">
      <title id="public.function.st-rotatey-public.geometry-double-precision-title">
       st_rotatey(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-rotatey-public.geometry-double-precision-titleabbrev">
       st_rotatey(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)</programlisting>
      </para>
    </section>

<!-- Function st_rotatez(public.geometry, double precision) -->
    <section id="public.function.st-rotatez-public.geometry-double-precision"
             xreflabel="publicst_rotatez(public.geometry, double precision)">
      <title id="public.function.st-rotatez-public.geometry-double-precision-title">
       st_rotatez(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-rotatez-public.geometry-double-precision-titleabbrev">
       st_rotatez(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)</programlisting>
      </para>
    </section>

<!-- Function st_scale(public.geometry, double precision, double precision) -->
    <section id="public.function.st-scale-public.geometry-double-precision-double-precision"
             xreflabel="publicst_scale(public.geometry, double precision, double precision)">
      <title id="public.function.st-scale-public.geometry-double-precision-double-precision-title">
       st_scale(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-scale-public.geometry-double-precision-double-precision-titleabbrev">
       st_scale(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT scale($1, $2, $3, 1)</programlisting>
      </para>
    </section>

<!-- Function st_scale(public.geometry, double precision, double precision, double precision) -->
    <section id="public.function.st-scale-public.geometry-double-precision-double-precision-double-precision"
             xreflabel="publicst_scale(public.geometry, double precision, double precision, double precision)">
      <title id="public.function.st-scale-public.geometry-double-precision-double-precision-double-precision-title">
       st_scale(public.geometry, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-scale-public.geometry-double-precision-double-precision-double-precision-titleabbrev">
       st_scale(public.geometry, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)</programlisting>
      </para>
    </section>

<!-- Function st_segmentize(public.geometry, double precision) -->
    <section id="public.function.st-segmentize-public.geometry-double-precision"
             xreflabel="publicst_segmentize(public.geometry, double precision)">
      <title id="public.function.st-segmentize-public.geometry-double-precision-title">
       st_segmentize(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-segmentize-public.geometry-double-precision-titleabbrev">
       st_segmentize(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_segmentize2d</programlisting>
      </para>
    </section>

<!-- Function st_setfactor(public.chip, real) -->
    <section id="public.function.st-setfactor-public.chip-real"
             xreflabel="publicst_setfactor(public.chip, real)">
      <title id="public.function.st-setfactor-public.chip-real-title">
       st_setfactor(public.chip, real)
      </title>
      <titleabbrev id="public.function.st-setfactor-public.chip-real-titleabbrev">
       st_setfactor(public.chip, real)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>chip</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_setFactor</programlisting>
      </para>
    </section>

<!-- Function st_setpoint(public.geometry, integer, public.geometry) -->
    <section id="public.function.st-setpoint-public.geometry-integer-public.geometry"
             xreflabel="publicst_setpoint(public.geometry, integer, public.geometry)">
      <title id="public.function.st-setpoint-public.geometry-integer-public.geometry-title">
       st_setpoint(public.geometry, integer, public.geometry)
      </title>
      <titleabbrev id="public.function.st-setpoint-public.geometry-integer-public.geometry-titleabbrev">
       st_setpoint(public.geometry, integer, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_setpoint_linestring</programlisting>
      </para>
    </section>

<!-- Function st_setsrid(public.geometry, integer) -->
    <section id="public.function.st-setsrid-public.geometry-integer"
             xreflabel="publicst_setsrid(public.geometry, integer)">
      <title id="public.function.st-setsrid-public.geometry-integer-title">
       st_setsrid(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-setsrid-public.geometry-integer-titleabbrev">
       st_setsrid(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_setSRID</programlisting>
      </para>
    </section>

<!-- Function st_shift_longitude(public.geometry) -->
    <section id="public.function.st-shift-longitude-public.geometry"
             xreflabel="publicst_shift_longitude(public.geometry)">
      <title id="public.function.st-shift-longitude-public.geometry-title">
       st_shift_longitude(public.geometry)
      </title>
      <titleabbrev id="public.function.st-shift-longitude-public.geometry-titleabbrev">
       st_shift_longitude(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_longitude_shift</programlisting>
      </para>
    </section>

<!-- Function st_simplify(public.geometry, double precision) -->
    <section id="public.function.st-simplify-public.geometry-double-precision"
             xreflabel="publicst_simplify(public.geometry, double precision)">
      <title id="public.function.st-simplify-public.geometry-double-precision-title">
       st_simplify(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-simplify-public.geometry-double-precision-titleabbrev">
       st_simplify(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_simplify2d</programlisting>
      </para>
    </section>

<!-- Function st_snaptogrid(public.geometry, double precision) -->
    <section id="public.function.st-snaptogrid-public.geometry-double-precision"
             xreflabel="publicst_snaptogrid(public.geometry, double precision)">
      <title id="public.function.st-snaptogrid-public.geometry-double-precision-title">
       st_snaptogrid(public.geometry, double precision)
      </title>
      <titleabbrev id="public.function.st-snaptogrid-public.geometry-double-precision-titleabbrev">
       st_snaptogrid(public.geometry, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT SnapToGrid($1, 0, 0, $2, $2)</programlisting>
      </para>
    </section>

<!-- Function st_snaptogrid(public.geometry, double precision, double precision) -->
    <section id="public.function.st-snaptogrid-public.geometry-double-precision-double-precision"
             xreflabel="publicst_snaptogrid(public.geometry, double precision, double precision)">
      <title id="public.function.st-snaptogrid-public.geometry-double-precision-double-precision-title">
       st_snaptogrid(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-snaptogrid-public.geometry-double-precision-double-precision-titleabbrev">
       st_snaptogrid(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT SnapToGrid($1, 0, 0, $2, $3)</programlisting>
      </para>
    </section>

<!-- Function st_snaptogrid(public.geometry, double precision, double precision, double precision, double precision) -->
    <section id="public.function.st-snaptogrid-public.geometry-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicst_snaptogrid(public.geometry, double precision, double precision, double precision, double precision)">
      <title id="public.function.st-snaptogrid-public.geometry-double-precision-double-precision-double-precision-double-precision-title">
       st_snaptogrid(public.geometry, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-snaptogrid-public.geometry-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       st_snaptogrid(public.geometry, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_snaptogrid</programlisting>
      </para>
    </section>

<!-- Function st_snaptogrid(public.geometry, public.geometry, double precision, double precision, double precision, double precision) -->
    <section id="public.function.st-snaptogrid-public.geometry-public.geometry-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicst_snaptogrid(public.geometry, public.geometry, double precision, double precision, double precision, double precision)">
      <title id="public.function.st-snaptogrid-public.geometry-public.geometry-double-precision-double-precision-double-precision-double-precision-title">
       st_snaptogrid(public.geometry, public.geometry, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-snaptogrid-public.geometry-public.geometry-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       st_snaptogrid(public.geometry, public.geometry, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_snaptogrid_pointoff</programlisting>
      </para>
    </section>

<!-- Function st_spheroid_in(cstring) -->
    <section id="public.function.st-spheroid-in-cstring"
             xreflabel="publicst_spheroid_in(cstring)">
      <title id="public.function.st-spheroid-in-cstring-title">
       st_spheroid_in(cstring)
      </title>
      <titleabbrev id="public.function.st-spheroid-in-cstring-titleabbrev">
       st_spheroid_in(cstring)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>spheroid</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ellipsoid_in</programlisting>
      </para>
    </section>

<!-- Function st_spheroid_out(public.spheroid) -->
    <section id="public.function.st-spheroid-out-public.spheroid"
             xreflabel="publicst_spheroid_out(public.spheroid)">
      <title id="public.function.st-spheroid-out-public.spheroid-title">
       st_spheroid_out(public.spheroid)
      </title>
      <titleabbrev id="public.function.st-spheroid-out-public.spheroid-titleabbrev">
       st_spheroid_out(public.spheroid)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>cstring</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>ellipsoid_out</programlisting>
      </para>
    </section>

<!-- Function st_srid(public.chip) -->
    <section id="public.function.st-srid-public.chip"
             xreflabel="publicst_srid(public.chip)">
      <title id="public.function.st-srid-public.chip-title">
       st_srid(public.chip)
      </title>
      <titleabbrev id="public.function.st-srid-public.chip-titleabbrev">
       st_srid(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getSRID</programlisting>
      </para>
    </section>

<!-- Function st_srid(public.geometry) -->
    <section id="public.function.st-srid-public.geometry"
             xreflabel="publicst_srid(public.geometry)">
      <title id="public.function.st-srid-public.geometry-title">
       st_srid(public.geometry)
      </title>
      <titleabbrev id="public.function.st-srid-public.geometry-titleabbrev">
       st_srid(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_getSRID</programlisting>
      </para>
    </section>

<!-- Function st_startpoint(public.geometry) -->
    <section id="public.function.st-startpoint-public.geometry"
             xreflabel="publicst_startpoint(public.geometry)">
      <title id="public.function.st-startpoint-public.geometry-title">
       st_startpoint(public.geometry)
      </title>
      <titleabbrev id="public.function.st-startpoint-public.geometry-titleabbrev">
       st_startpoint(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_startpoint_linestring</programlisting>
      </para>
    </section>

<!-- Function st_summary(public.geometry) -->
    <section id="public.function.st-summary-public.geometry"
             xreflabel="publicst_summary(public.geometry)">
      <title id="public.function.st-summary-public.geometry-title">
       st_summary(public.geometry)
      </title>
      <titleabbrev id="public.function.st-summary-public.geometry-titleabbrev">
       st_summary(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_summary</programlisting>
      </para>
    </section>

<!-- Function st_symdifference(public.geometry, public.geometry) -->
    <section id="public.function.st-symdifference-public.geometry-public.geometry"
             xreflabel="publicst_symdifference(public.geometry, public.geometry)">
      <title id="public.function.st-symdifference-public.geometry-public.geometry-title">
       st_symdifference(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-symdifference-public.geometry-public.geometry-titleabbrev">
       st_symdifference(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>symdifference</programlisting>
      </para>
    </section>

<!-- Function st_symmetricdifference(public.geometry, public.geometry) -->
    <section id="public.function.st-symmetricdifference-public.geometry-public.geometry"
             xreflabel="publicst_symmetricdifference(public.geometry, public.geometry)">
      <title id="public.function.st-symmetricdifference-public.geometry-public.geometry-title">
       st_symmetricdifference(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-symmetricdifference-public.geometry-public.geometry-titleabbrev">
       st_symmetricdifference(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>symdifference</programlisting>
      </para>
    </section>

<!-- Function st_text(boolean) -->
    <section id="public.function.st-text-boolean"
             xreflabel="publicst_text(boolean)">
      <title id="public.function.st-text-boolean-title">
       st_text(boolean)
      </title>
      <titleabbrev id="public.function.st-text-boolean-titleabbrev">
       st_text(boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOOL_to_text</programlisting>
      </para>
    </section>

<!-- Function st_text(public.geometry) -->
    <section id="public.function.st-text-public.geometry"
             xreflabel="publicst_text(public.geometry)">
      <title id="public.function.st-text-public.geometry-title">
       st_text(public.geometry)
      </title>
      <titleabbrev id="public.function.st-text-public.geometry-titleabbrev">
       st_text(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_text</programlisting>
      </para>
    </section>

<!-- Function st_touches(public.geometry, public.geometry) -->
    <section id="public.function.st-touches-public.geometry-public.geometry"
             xreflabel="publicst_touches(public.geometry, public.geometry)">
      <title id="public.function.st-touches-public.geometry-public.geometry-title">
       st_touches(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-touches-public.geometry-public.geometry-titleabbrev">
       st_touches(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT $1 &amp;&amp; $2 AND _ST_Touches($1,$2)</programlisting>
      </para>
    </section>

<!-- Function st_transform(public.geometry, integer) -->
    <section id="public.function.st-transform-public.geometry-integer"
             xreflabel="publicst_transform(public.geometry, integer)">
      <title id="public.function.st-transform-public.geometry-integer-title">
       st_transform(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.st-transform-public.geometry-integer-titleabbrev">
       st_transform(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>transform</programlisting>
      </para>
    </section>

<!-- Function st_translate(public.geometry, double precision, double precision) -->
    <section id="public.function.st-translate-public.geometry-double-precision-double-precision"
             xreflabel="publicst_translate(public.geometry, double precision, double precision)">
      <title id="public.function.st-translate-public.geometry-double-precision-double-precision-title">
       st_translate(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-translate-public.geometry-double-precision-double-precision-titleabbrev">
       st_translate(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT translate($1, $2, $3, 0)</programlisting>
      </para>
    </section>

<!-- Function st_translate(public.geometry, double precision, double precision, double precision) -->
    <section id="public.function.st-translate-public.geometry-double-precision-double-precision-double-precision"
             xreflabel="publicst_translate(public.geometry, double precision, double precision, double precision)">
      <title id="public.function.st-translate-public.geometry-double-precision-double-precision-double-precision-title">
       st_translate(public.geometry, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-translate-public.geometry-double-precision-double-precision-double-precision-titleabbrev">
       st_translate(public.geometry, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)</programlisting>
      </para>
    </section>

<!-- Function st_transscale(public.geometry, double precision, double precision, double precision, double precision) -->
    <section id="public.function.st-transscale-public.geometry-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publicst_transscale(public.geometry, double precision, double precision, double precision, double precision)">
      <title id="public.function.st-transscale-public.geometry-double-precision-double-precision-double-precision-double-precision-title">
       st_transscale(public.geometry, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.st-transscale-public.geometry-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       st_transscale(public.geometry, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  $4, 0, 0,  0, $5, 0, 
		0, 0, 1,  $2 * $4, $3 * $5, 0)</programlisting>
      </para>
    </section>

<!-- Function st_union(public.geometry) -->
    <section id="public.function.st-union-public.geometry"
             xreflabel="publicst_union(public.geometry)">
      <title id="public.function.st-union-public.geometry-title">
       st_union(public.geometry)
      </title>
      <titleabbrev id="public.function.st-union-public.geometry-titleabbrev">
       st_union(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>INTERNAL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>aggregate_dummy</programlisting>
      </para>
    </section>

<!-- Function st_union(public.geometry, public.geometry) -->
    <section id="public.function.st-union-public.geometry-public.geometry"
             xreflabel="publicst_union(public.geometry, public.geometry)">
      <title id="public.function.st-union-public.geometry-public.geometry-title">
       st_union(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-union-public.geometry-public.geometry-titleabbrev">
       st_union(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>geomunion</programlisting>
      </para>
    </section>

<!-- Function st_unite_garray(public.geometry[]) -->
    <section id="public.function.st-unite-garray-public.geometryARRAY"
             xreflabel="publicst_unite_garray(public.geometry[])">
      <title id="public.function.st-unite-garray-public.geometryARRAY-title">
       st_unite_garray(public.geometry[])
      </title>
      <titleabbrev id="public.function.st-unite-garray-public.geometryARRAY-titleabbrev">
       st_unite_garray(public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>unite_garray</programlisting>
      </para>
    </section>

<!-- Function st_width(public.chip) -->
    <section id="public.function.st-width-public.chip"
             xreflabel="publicst_width(public.chip)">
      <title id="public.function.st-width-public.chip-title">
       st_width(public.chip)
      </title>
      <titleabbrev id="public.function.st-width-public.chip-titleabbrev">
       st_width(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getWidth</programlisting>
      </para>
    </section>

<!-- Function st_within(public.geometry, public.geometry) -->
    <section id="public.function.st-within-public.geometry-public.geometry"
             xreflabel="publicst_within(public.geometry, public.geometry)">
      <title id="public.function.st-within-public.geometry-public.geometry-title">
       st_within(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.st-within-public.geometry-public.geometry-titleabbrev">
       st_within(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT $1 &amp;&amp; $2 AND _ST_Within($1,$2)</programlisting>
      </para>
    </section>

<!-- Function st_wkbtosql(bytea) -->
    <section id="public.function.st-wkbtosql-bytea"
             xreflabel="publicst_wkbtosql(bytea)">
      <title id="public.function.st-wkbtosql-bytea-title">
       st_wkbtosql(bytea)
      </title>
      <titleabbrev id="public.function.st-wkbtosql-bytea-titleabbrev">
       st_wkbtosql(bytea)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT GeomFromWKB($1)</programlisting>
      </para>
    </section>

<!-- Function st_wkttosql(text) -->
    <section id="public.function.st-wkttosql-text"
             xreflabel="publicst_wkttosql(text)">
      <title id="public.function.st-wkttosql-text-title">
       st_wkttosql(text)
      </title>
      <titleabbrev id="public.function.st-wkttosql-text-titleabbrev">
       st_wkttosql(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT geometryfromtext($1)</programlisting>
      </para>
    </section>

<!-- Function st_x(public.geometry) -->
    <section id="public.function.st-x-public.geometry"
             xreflabel="publicst_x(public.geometry)">
      <title id="public.function.st-x-public.geometry-title">
       st_x(public.geometry)
      </title>
      <titleabbrev id="public.function.st-x-public.geometry-titleabbrev">
       st_x(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_x_point</programlisting>
      </para>
    </section>

<!-- Function st_xmax(public.box3d) -->
    <section id="public.function.st-xmax-public.box3d"
             xreflabel="publicst_xmax(public.box3d)">
      <title id="public.function.st-xmax-public.box3d-title">
       st_xmax(public.box3d)
      </title>
      <titleabbrev id="public.function.st-xmax-public.box3d-titleabbrev">
       st_xmax(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_xmax</programlisting>
      </para>
    </section>

<!-- Function st_xmin(public.box3d) -->
    <section id="public.function.st-xmin-public.box3d"
             xreflabel="publicst_xmin(public.box3d)">
      <title id="public.function.st-xmin-public.box3d-title">
       st_xmin(public.box3d)
      </title>
      <titleabbrev id="public.function.st-xmin-public.box3d-titleabbrev">
       st_xmin(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_xmin</programlisting>
      </para>
    </section>

<!-- Function st_y(public.geometry) -->
    <section id="public.function.st-y-public.geometry"
             xreflabel="publicst_y(public.geometry)">
      <title id="public.function.st-y-public.geometry-title">
       st_y(public.geometry)
      </title>
      <titleabbrev id="public.function.st-y-public.geometry-titleabbrev">
       st_y(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_y_point</programlisting>
      </para>
    </section>

<!-- Function st_ymax(public.box3d) -->
    <section id="public.function.st-ymax-public.box3d"
             xreflabel="publicst_ymax(public.box3d)">
      <title id="public.function.st-ymax-public.box3d-title">
       st_ymax(public.box3d)
      </title>
      <titleabbrev id="public.function.st-ymax-public.box3d-titleabbrev">
       st_ymax(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_ymax</programlisting>
      </para>
    </section>

<!-- Function st_ymin(public.box3d) -->
    <section id="public.function.st-ymin-public.box3d"
             xreflabel="publicst_ymin(public.box3d)">
      <title id="public.function.st-ymin-public.box3d-title">
       st_ymin(public.box3d)
      </title>
      <titleabbrev id="public.function.st-ymin-public.box3d-titleabbrev">
       st_ymin(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_ymin</programlisting>
      </para>
    </section>

<!-- Function st_z(public.geometry) -->
    <section id="public.function.st-z-public.geometry"
             xreflabel="publicst_z(public.geometry)">
      <title id="public.function.st-z-public.geometry-title">
       st_z(public.geometry)
      </title>
      <titleabbrev id="public.function.st-z-public.geometry-titleabbrev">
       st_z(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_z_point</programlisting>
      </para>
    </section>

<!-- Function st_zmax(public.box3d) -->
    <section id="public.function.st-zmax-public.box3d"
             xreflabel="publicst_zmax(public.box3d)">
      <title id="public.function.st-zmax-public.box3d-title">
       st_zmax(public.box3d)
      </title>
      <titleabbrev id="public.function.st-zmax-public.box3d-titleabbrev">
       st_zmax(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_zmax</programlisting>
      </para>
    </section>

<!-- Function st_zmflag(public.geometry) -->
    <section id="public.function.st-zmflag-public.geometry"
             xreflabel="publicst_zmflag(public.geometry)">
      <title id="public.function.st-zmflag-public.geometry-title">
       st_zmflag(public.geometry)
      </title>
      <titleabbrev id="public.function.st-zmflag-public.geometry-titleabbrev">
       st_zmflag(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>smallint</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_zmflag</programlisting>
      </para>
    </section>

<!-- Function st_zmin(public.box3d) -->
    <section id="public.function.st-zmin-public.box3d"
             xreflabel="publicst_zmin(public.box3d)">
      <title id="public.function.st-zmin-public.box3d-title">
       st_zmin(public.box3d)
      </title>
      <titleabbrev id="public.function.st-zmin-public.box3d-titleabbrev">
       st_zmin(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_zmin</programlisting>
      </para>
    </section>

<!-- Function startpoint(public.geometry) -->
    <section id="public.function.startpoint-public.geometry"
             xreflabel="publicstartpoint(public.geometry)">
      <title id="public.function.startpoint-public.geometry-title">
       startpoint(public.geometry)
      </title>
      <titleabbrev id="public.function.startpoint-public.geometry-titleabbrev">
       startpoint(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_startpoint_linestring</programlisting>
      </para>
    </section>

<!-- Function summary(public.geometry) -->
    <section id="public.function.summary-public.geometry"
             xreflabel="publicsummary(public.geometry)">
      <title id="public.function.summary-public.geometry-title">
       summary(public.geometry)
      </title>
      <titleabbrev id="public.function.summary-public.geometry-titleabbrev">
       summary(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_summary</programlisting>
      </para>
    </section>

<!-- Function symdifference(public.geometry, public.geometry) -->
    <section id="public.function.symdifference-public.geometry-public.geometry"
             xreflabel="publicsymdifference(public.geometry, public.geometry)">
      <title id="public.function.symdifference-public.geometry-public.geometry-title">
       symdifference(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.symdifference-public.geometry-public.geometry-titleabbrev">
       symdifference(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>symdifference</programlisting>
      </para>
    </section>

<!-- Function symmetricdifference(public.geometry, public.geometry) -->
    <section id="public.function.symmetricdifference-public.geometry-public.geometry"
             xreflabel="publicsymmetricdifference(public.geometry, public.geometry)">
      <title id="public.function.symmetricdifference-public.geometry-public.geometry-title">
       symmetricdifference(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.symmetricdifference-public.geometry-public.geometry-titleabbrev">
       symmetricdifference(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>symdifference</programlisting>
      </para>
    </section>

<!-- Function text(boolean) -->
    <section id="public.function.text-boolean"
             xreflabel="publictext(boolean)">
      <title id="public.function.text-boolean-title">
       text(boolean)
      </title>
      <titleabbrev id="public.function.text-boolean-titleabbrev">
       text(boolean)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
SELECT CASE WHEN $1 THEN &#39;true&#39; ELSE &#39;false&#39; END
</programlisting>
      </para>
    </section>

<!-- Function text(public.geometry) -->
    <section id="public.function.text-public.geometry"
             xreflabel="publictext(public.geometry)">
      <title id="public.function.text-public.geometry-title">
       text(public.geometry)
      </title>
      <titleabbrev id="public.function.text-public.geometry-titleabbrev">
       text(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_to_text</programlisting>
      </para>
    </section>

<!-- Function touches(public.geometry, public.geometry) -->
    <section id="public.function.touches-public.geometry-public.geometry"
             xreflabel="publictouches(public.geometry, public.geometry)">
      <title id="public.function.touches-public.geometry-public.geometry-title">
       touches(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.touches-public.geometry-public.geometry-titleabbrev">
       touches(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>touches</programlisting>
      </para>
    </section>

<!-- Function transform(public.geometry, integer) -->
    <section id="public.function.transform-public.geometry-integer"
             xreflabel="publictransform(public.geometry, integer)">
      <title id="public.function.transform-public.geometry-integer-title">
       transform(public.geometry, integer)
      </title>
      <titleabbrev id="public.function.transform-public.geometry-integer-titleabbrev">
       transform(public.geometry, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>transform</programlisting>
      </para>
    </section>

<!-- Function transform_geometry(public.geometry, text, text, integer) -->
    <section id="public.function.transform-geometry-public.geometry-text-text-integer"
             xreflabel="publictransform_geometry(public.geometry, text, text, integer)">
      <title id="public.function.transform-geometry-public.geometry-text-text-integer-title">
       transform_geometry(public.geometry, text, text, integer)
      </title>
      <titleabbrev id="public.function.transform-geometry-public.geometry-text-text-integer-titleabbrev">
       transform_geometry(public.geometry, text, text, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>transform_geom</programlisting>
      </para>
    </section>

<!-- Function translate(public.geometry, double precision, double precision) -->
    <section id="public.function.translate-public.geometry-double-precision-double-precision"
             xreflabel="publictranslate(public.geometry, double precision, double precision)">
      <title id="public.function.translate-public.geometry-double-precision-double-precision-title">
       translate(public.geometry, double precision, double precision)
      </title>
      <titleabbrev id="public.function.translate-public.geometry-double-precision-double-precision-titleabbrev">
       translate(public.geometry, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT translate($1, $2, $3, 0)</programlisting>
      </para>
    </section>

<!-- Function translate(public.geometry, double precision, double precision, double precision) -->
    <section id="public.function.translate-public.geometry-double-precision-double-precision-double-precision"
             xreflabel="publictranslate(public.geometry, double precision, double precision, double precision)">
      <title id="public.function.translate-public.geometry-double-precision-double-precision-double-precision-title">
       translate(public.geometry, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.translate-public.geometry-double-precision-double-precision-double-precision-titleabbrev">
       translate(public.geometry, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)</programlisting>
      </para>
    </section>

<!-- Function transscale(public.geometry, double precision, double precision, double precision, double precision) -->
    <section id="public.function.transscale-public.geometry-double-precision-double-precision-double-precision-double-precision"
             xreflabel="publictransscale(public.geometry, double precision, double precision, double precision, double precision)">
      <title id="public.function.transscale-public.geometry-double-precision-double-precision-double-precision-double-precision-title">
       transscale(public.geometry, double precision, double precision, double precision, double precision)
      </title>
      <titleabbrev id="public.function.transscale-public.geometry-double-precision-double-precision-double-precision-double-precision-titleabbrev">
       transscale(public.geometry, double precision, double precision, double precision, double precision)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT affine($1,  $4, 0, 0,  0, $5, 0, 
		0, 0, 1,  $2 * $4, $3 * $5, 0)</programlisting>
      </para>
    </section>

<!-- Function unite_garray(public.geometry[]) -->
    <section id="public.function.unite-garray-public.geometryARRAY"
             xreflabel="publicunite_garray(public.geometry[])">
      <title id="public.function.unite-garray-public.geometryARRAY-title">
       unite_garray(public.geometry[])
      </title>
      <titleabbrev id="public.function.unite-garray-public.geometryARRAY-titleabbrev">
       unite_garray(public.geometry[])
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>geometry</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>unite_garray</programlisting>
      </para>
    </section>

<!-- Function unlockrows(text) -->
    <section id="public.function.unlockrows-text"
             xreflabel="publicunlockrows(text)">
      <title id="public.function.unlockrows-text-title">
       unlockrows(text)
      </title>
      <titleabbrev id="public.function.unlockrows-text-titleabbrev">
       unlockrows(text)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	ret int;
BEGIN

	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION &#39;Long transaction support disabled, use EnableLongTransaction() to enable.&#39;;
	END IF;

	EXECUTE &#39;DELETE FROM authorization_table where authid = &#39; ||
		quote_literal($1);

	GET DIAGNOSTICS ret = ROW_COUNT;

	RETURN ret;
END;
</programlisting>
      </para>
    </section>

<!-- Function update_cost_from_distance(geom_table character varying) -->
    <section id="public.function.update-cost-from-distance-geom-table-character-varying"
             xreflabel="publicupdate_cost_from_distance(geom_table character varying)">
      <title id="public.function.update-cost-from-distance-geom-table-character-varying-title">
       update_cost_from_distance(geom_table character varying)
      </title>
      <titleabbrev id="public.function.update-cost-from-distance-geom-table-character-varying-titleabbrev">
       update_cost_from_distance(geom_table character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>void</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE 
BEGIN
	BEGIN
	  EXECUTE &#39;CREATE INDEX &#39; || quote_ident(geom_table) || 
                  &#39;_edge_id_idx ON &#39; || quote_ident(geom_table) || 
                  &#39; (edge_id)&#39;;
	EXCEPTION 
		WHEN DUPLICATE_TABLE THEN
		RAISE NOTICE &#39;Not creating index, already there&#39;;
	END;

	EXECUTE &#39;UPDATE &#39; || quote_ident(geom_table) || 
              &#39;_edges SET cost = (SELECT sum( length( g.the_geom ) ) FROM &#39; || 
              quote_ident(geom_table) || 
              &#39; g WHERE g.edge_id = id GROUP BY id)&#39;;

	RETURN;
END;
</programlisting>
      </para>
    </section>

<!-- Function update_geometry_stats() -->
    <section id="public.function.update-geometry-stats"
             xreflabel="publicupdate_geometry_stats()">
      <title id="public.function.update-geometry-stats-title">
       update_geometry_stats()
      </title>
      <titleabbrev id="public.function.update-geometry-stats-titleabbrev">
       update_geometry_stats()
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting> SELECT &#39;update_geometry_stats() has been obsoleted. Statistics are automatically built running the ANALYZE command&#39;::text</programlisting>
      </para>
    </section>

<!-- Function update_geometry_stats(character varying, character varying) -->
    <section id="public.function.update-geometry-stats-character-varying-character-varying"
             xreflabel="publicupdate_geometry_stats(character varying, character varying)">
      <title id="public.function.update-geometry-stats-character-varying-character-varying-title">
       update_geometry_stats(character varying, character varying)
      </title>
      <titleabbrev id="public.function.update-geometry-stats-character-varying-character-varying-titleabbrev">
       update_geometry_stats(character varying, character varying)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>SQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>SELECT update_geometry_stats();</programlisting>
      </para>
    </section>

<!-- Function updategeometrysrid(character varying, character varying, character varying, character varying, integer) -->
    <section id="public.function.updategeometrysrid-character-varying-character-varying-character-varying-character-varying-integer"
             xreflabel="publicupdategeometrysrid(character varying, character varying, character varying, character varying, integer)">
      <title id="public.function.updategeometrysrid-character-varying-character-varying-character-varying-character-varying-integer-title">
       updategeometrysrid(character varying, character varying, character varying, character varying, integer)
      </title>
      <titleabbrev id="public.function.updategeometrysrid-character-varying-character-varying-character-varying-character-varying-integer-titleabbrev">
       updategeometrysrid(character varying, character varying, character varying, character varying, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	catalog_name alias for $1; 
	schema_name alias for $2;
	table_name alias for $3;
	column_name alias for $4;
	new_srid alias for $5;
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;

BEGIN


	-- Find, check or fix schema_name
	IF ( schema_name != &#39;&#39; ) THEN
		okay = &#39;f&#39;;

		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := &#39;t&#39;;
		END LOOP;

		IF ( okay &lt;&gt; &#39;t&#39; ) THEN
			RAISE EXCEPTION &#39;Invalid schema name&#39;;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;

 	-- Find out if the column is in the geometry_columns table
	okay = &#39;f&#39;;
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := &#39;t&#39;;
	END LOOP; 
	IF (okay &lt;&gt; &#39;t&#39;) THEN 
		RAISE EXCEPTION &#39;column not found in geometry_columns table&#39;;
		RETURN &#39;f&#39;;
	END IF;

	-- Update ref from geometry_columns table
	EXECUTE &#39;UPDATE geometry_columns SET SRID = &#39; || new_srid::text || 
		&#39; where f_table_schema = &#39; ||
		quote_literal(real_schema) || &#39; and f_table_name = &#39; ||
		quote_literal(table_name)  || &#39; and f_geometry_column = &#39; ||
		quote_literal(column_name);
	
	-- Make up constraint name
	cname = &#39;enforce_srid_&#39;  || column_name;

	-- Drop enforce_srid constraint
	EXECUTE &#39;ALTER TABLE &#39; || quote_ident(real_schema) ||
		&#39;.&#39; || quote_ident(table_name) ||
		&#39; DROP constraint &#39; || quote_ident(cname);

	-- Update geometries SRID
	EXECUTE &#39;UPDATE &#39; || quote_ident(real_schema) ||
		&#39;.&#39; || quote_ident(table_name) ||
		&#39; SET &#39; || quote_ident(column_name) ||
		&#39; = setSRID(&#39; || quote_ident(column_name) ||
		&#39;, &#39; || new_srid::text || &#39;)&#39;;

	-- Reset enforce_srid constraint
	EXECUTE &#39;ALTER TABLE &#39; || quote_ident(real_schema) ||
		&#39;.&#39; || quote_ident(table_name) ||
		&#39; ADD constraint &#39; || quote_ident(cname) ||
		&#39; CHECK (srid(&#39; || quote_ident(column_name) ||
		&#39;) = &#39; || new_srid::text || &#39;)&#39;;

	RETURN real_schema || &#39;.&#39; || table_name || &#39;.&#39; || column_name ||&#39; SRID changed to &#39; || new_srid::text;
	
END;
</programlisting>
      </para>
    </section>

<!-- Function updategeometrysrid(character varying, character varying, character varying, integer) -->
    <section id="public.function.updategeometrysrid-character-varying-character-varying-character-varying-integer"
             xreflabel="publicupdategeometrysrid(character varying, character varying, character varying, integer)">
      <title id="public.function.updategeometrysrid-character-varying-character-varying-character-varying-integer-title">
       updategeometrysrid(character varying, character varying, character varying, integer)
      </title>
      <titleabbrev id="public.function.updategeometrysrid-character-varying-character-varying-character-varying-integer-titleabbrev">
       updategeometrysrid(character varying, character varying, character varying, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID(&#39;&#39;,$1,$2,$3,$4) into ret;
	RETURN ret;
END;
</programlisting>
      </para>
    </section>

<!-- Function updategeometrysrid(character varying, character varying, integer) -->
    <section id="public.function.updategeometrysrid-character-varying-character-varying-integer"
             xreflabel="publicupdategeometrysrid(character varying, character varying, integer)">
      <title id="public.function.updategeometrysrid-character-varying-character-varying-integer-title">
       updategeometrysrid(character varying, character varying, integer)
      </title>
      <titleabbrev id="public.function.updategeometrysrid-character-varying-character-varying-integer-titleabbrev">
       updategeometrysrid(character varying, character varying, integer)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>PLPGSQL</seg>
         <seg>text</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID(&#39;&#39;,&#39;&#39;,$1,$2,$3) into ret;
	RETURN ret;
END;
</programlisting>
      </para>
    </section>

<!-- Function width(public.chip) -->
    <section id="public.function.width-public.chip"
             xreflabel="publicwidth(public.chip)">
      <title id="public.function.width-public.chip-title">
       width(public.chip)
      </title>
      <titleabbrev id="public.function.width-public.chip-titleabbrev">
       width(public.chip)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>integer</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>CHIP_getWidth</programlisting>
      </para>
    </section>

<!-- Function within(public.geometry, public.geometry) -->
    <section id="public.function.within-public.geometry-public.geometry"
             xreflabel="publicwithin(public.geometry, public.geometry)">
      <title id="public.function.within-public.geometry-public.geometry-title">
       within(public.geometry, public.geometry)
      </title>
      <titleabbrev id="public.function.within-public.geometry-public.geometry-titleabbrev">
       within(public.geometry, public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>boolean</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>within</programlisting>
      </para>
    </section>

<!-- Function x(public.geometry) -->
    <section id="public.function.x-public.geometry"
             xreflabel="publicx(public.geometry)">
      <title id="public.function.x-public.geometry-title">
       x(public.geometry)
      </title>
      <titleabbrev id="public.function.x-public.geometry-titleabbrev">
       x(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_x_point</programlisting>
      </para>
    </section>

<!-- Function xmax(public.box3d) -->
    <section id="public.function.xmax-public.box3d"
             xreflabel="publicxmax(public.box3d)">
      <title id="public.function.xmax-public.box3d-title">
       xmax(public.box3d)
      </title>
      <titleabbrev id="public.function.xmax-public.box3d-titleabbrev">
       xmax(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_xmax</programlisting>
      </para>
    </section>

<!-- Function xmin(public.box3d) -->
    <section id="public.function.xmin-public.box3d"
             xreflabel="publicxmin(public.box3d)">
      <title id="public.function.xmin-public.box3d-title">
       xmin(public.box3d)
      </title>
      <titleabbrev id="public.function.xmin-public.box3d-titleabbrev">
       xmin(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_xmin</programlisting>
      </para>
    </section>

<!-- Function y(public.geometry) -->
    <section id="public.function.y-public.geometry"
             xreflabel="publicy(public.geometry)">
      <title id="public.function.y-public.geometry-title">
       y(public.geometry)
      </title>
      <titleabbrev id="public.function.y-public.geometry-titleabbrev">
       y(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_y_point</programlisting>
      </para>
    </section>

<!-- Function ymax(public.box3d) -->
    <section id="public.function.ymax-public.box3d"
             xreflabel="publicymax(public.box3d)">
      <title id="public.function.ymax-public.box3d-title">
       ymax(public.box3d)
      </title>
      <titleabbrev id="public.function.ymax-public.box3d-titleabbrev">
       ymax(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_ymax</programlisting>
      </para>
    </section>

<!-- Function ymin(public.box3d) -->
    <section id="public.function.ymin-public.box3d"
             xreflabel="publicymin(public.box3d)">
      <title id="public.function.ymin-public.box3d-title">
       ymin(public.box3d)
      </title>
      <titleabbrev id="public.function.ymin-public.box3d-titleabbrev">
       ymin(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_ymin</programlisting>
      </para>
    </section>

<!-- Function z(public.geometry) -->
    <section id="public.function.z-public.geometry"
             xreflabel="publicz(public.geometry)">
      <title id="public.function.z-public.geometry-title">
       z(public.geometry)
      </title>
      <titleabbrev id="public.function.z-public.geometry-titleabbrev">
       z(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_z_point</programlisting>
      </para>
    </section>

<!-- Function zmax(public.box3d) -->
    <section id="public.function.zmax-public.box3d"
             xreflabel="publiczmax(public.box3d)">
      <title id="public.function.zmax-public.box3d-title">
       zmax(public.box3d)
      </title>
      <titleabbrev id="public.function.zmax-public.box3d-titleabbrev">
       zmax(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_zmax</programlisting>
      </para>
    </section>

<!-- Function zmflag(public.geometry) -->
    <section id="public.function.zmflag-public.geometry"
             xreflabel="publiczmflag(public.geometry)">
      <title id="public.function.zmflag-public.geometry-title">
       zmflag(public.geometry)
      </title>
      <titleabbrev id="public.function.zmflag-public.geometry-titleabbrev">
       zmflag(public.geometry)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>smallint</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>LWGEOM_zmflag</programlisting>
      </para>
    </section>

<!-- Function zmin(public.box3d) -->
    <section id="public.function.zmin-public.box3d"
             xreflabel="publiczmin(public.box3d)">
      <title id="public.function.zmin-public.box3d-title">
       zmin(public.box3d)
      </title>
      <titleabbrev id="public.function.zmin-public.box3d-titleabbrev">
       zmin(public.box3d)
      </titleabbrev>

      <para>
       <segmentedlist>
        <title>Function Properties</title>
        <?dbhtml list-presentation="list"?>
        <segtitle>Language</segtitle>
        <segtitle>Return Type</segtitle>
        <seglistitem>
         <seg>C</seg>
         <seg>double precision</seg>
        </seglistitem>
       </segmentedlist>
 
       
        <programlisting>BOX3D_zmin</programlisting>
      </para>
    </section>

  </chapter>

</book>

