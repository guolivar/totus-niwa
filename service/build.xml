<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project name="TOTUS-SERVER" basedir=".">
  <!-- defs -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

  <fail unless="BUILD_ENVIRONMENT" message="The BUILD_ENVIRONMENT property needs to be set, eg. prod or test" />

  <!-- global properties -->
  <property name="deploydir" value="/srv/www/vhosts" />
  <property name="configdir" value="/etc/apache2/vhosts.d" />

  <!-- import build environment specific application properties -->
  <import file="build/${BUILD_ENVIRONMENT}.xml" />

  <!-- set default deployment user -->
  <property name="deployuser" value="robot" />

  <target name="package" >
    <zip destfile="${BUILD_ENVIRONMENT}_totus_server.zip">
      <fileset dir="./">
        <include name="favicon.ico" />
        <include name="totus.py" />
        <include name="TotusServer/**" />
        <include name="config/*${BUILD_ENVIRONMENT}*" />
        <include name="thirdparty/featureserver/FeatureServer/**" />
        <include name="thirdparty/featureserver/LICENSE.txt" />
        <include name="thirdparty/featureserver/vectorformats/**" />
        <include name="thirdparty/featureserver/web_request/**" />
      </fileset>
    </zip>
  </target>

  <target name="deploy" depends="package" >
    <if>
      <equals arg1="localhost" arg2="${apphost}" />
      <then>
        <copy file="${BUILD_ENVIRONMENT}_totus_server.zip" todir="/tmp" />
      </then>
      <else>
        <if>
          <equals arg1="aws" arg2="${BUILD_ENVIRONMENT}" />
          <then>
            <!-- manual scp exec to use standard socat config for proxy -->
            <exec executable="scp" failonerror="true" >
              <arg line="${BUILD_ENVIRONMENT}_totus_server.zip ${deployuser}@${apphost}:/tmp" />
            </exec>
          </then>
          <else>    
            <input message="Enter ${deployuser} password for ${apphost}:" addproperty="deploypasswd" />
            <scp file="${BUILD_ENVIRONMENT}_totus_server.zip" todir="${deployuser}@${apphost}:/tmp" password="${deploypasswd}" />
          </else>
        </if>
      </else>
    </if>

    <echo file="deploy-totus.sh" append="false" message="echo ${deploypasswd} | sudo -S bash -c '
cd ${deploydir};
outdir=${BUILD_ENVIRONMENT}_totus_server;
if [ -d $outdir ]; then 
  tar cvzf /tmp/${outdir}-$(date +%Y%m%d_%H%M%S).tgz $outdir;
  rm -rf $outdir/*;
else
  mkdir $outdir;
  if [ $? -ne 0 ]; then exit 1; fi;
fi;
cd $outdir;
if [ $? -ne 0 ]; then exit 1; fi;
unzip /tmp/${BUILD_ENVIRONMENT}_totus_server.zip;
if [ $? -ne 0 ]; then exit 1; fi;
cp config/totus_server-${BUILD_ENVIRONMENT}.conf ${configdir};
if [ $? -ne 0 ]; then exit 1; fi;
cd TotusServer/DataSource;
for f in *; do
  file=$(basename $f);
  if [ $file != '__init__.py' ]; then
    (
      cd ../../thirdparty/featureserver/FeatureServer/DataSource;
      ln -s ../../../../TotusServer/DataSource/$f ./;
      if [ $? -ne 0 ]; then exit 1; fi;
    )
  fi;
done;
rm -f /tmp/${BUILD_ENVIRONMENT}_totus_server.zip
'" />

    <if>
      <equals arg1="localhost" arg2="${apphost}" />
      <then>
        <exec executable="sudo" failonerror="true" >
          <arg line="sh deploy-totus.sh" />
        </exec>
      </then>
      <else>
        <if>
          <equals arg1="aws" arg2="${BUILD_ENVIRONMENT}" />
          <then>
            <!-- manual scp exec to use standard socat config for proxy -->
            <exec executable="scp" failonerror="true" >
              <arg line="deploy-totus.sh ${deployuser}@${apphost}:/tmp" />
            </exec>
            <exec executable="ssh" failonerror="true" >
              <arg line="${deployuser}@${apphost} sh /tmp/deploy-totus.sh" />
            </exec>
          </then>
          <else>    
            <sshexec host="${apphost}" username="${deployuser}" password="${deploypasswd}" 
                     commandResource="deploy-totus.sh" verbose="true" />
          </else>
        </if>
      </else>
    </if>

    <delete file="deploy-totus.sh" verbose="true" />
    <delete file="${BUILD_ENVIRONMENT}_totus_server.zip" verbose="true" />
  </target>
</project>
